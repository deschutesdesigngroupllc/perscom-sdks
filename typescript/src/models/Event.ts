/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    calendarId: number;
    /**
     * Supports HTML.
     * @type {string}
     * @memberof Event
     */
    description?: string | null;
    /**
     * Supports HTML.
     * @type {string}
     * @memberof Event
     */
    content?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    location?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    url?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    authorId: number;
    /**
     * 
     * @type {boolean}
     * @memberof Event
     */
    allDay: boolean;
    /**
     * 
     * @type {Date}
     * @memberof Event
     */
    starts: Date;
    /**
     * 
     * @type {Date}
     * @memberof Event
     */
    ends: Date | null;
    /**
     * 
     * @type {boolean}
     * @memberof Event
     */
    repeats: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Event
     */
    registrationEnabled: boolean;
    /**
     * 
     * @type {Date}
     * @memberof Event
     */
    registrationDeadline?: Date | null;
    /**
     * 
     * @type {boolean}
     * @memberof Event
     */
    notificationsEnabled: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof Event
     */
    notificationsInterval?: Array<EventNotificationsIntervalEnum> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Event
     */
    notificationsChannels?: Array<EventNotificationsChannelsEnum> | null;
}


/**
 * @export
 */
export const EventNotificationsIntervalEnum = {
    Pt0m: 'pt0m',
    Pt15m: 'pt15m',
    Pt1h: 'pt1h',
    P1d: 'p1d',
    P1w: 'p1w'
} as const;
export type EventNotificationsIntervalEnum = typeof EventNotificationsIntervalEnum[keyof typeof EventNotificationsIntervalEnum];

/**
 * @export
 */
export const EventNotificationsChannelsEnum = {
    Broadcast: 'broadcast',
    Database: 'database',
    DiscordPrivate: 'discord_private',
    DiscordPublic: 'discord_public',
    Mail: 'mail',
    Sms: 'sms'
} as const;
export type EventNotificationsChannelsEnum = typeof EventNotificationsChannelsEnum[keyof typeof EventNotificationsChannelsEnum];


/**
 * Check if a given object implements the Event interface.
 */
export function instanceOfEvent(value: object): value is Event {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('calendarId' in value) || value['calendarId'] === undefined) return false;
    if (!('authorId' in value) || value['authorId'] === undefined) return false;
    if (!('allDay' in value) || value['allDay'] === undefined) return false;
    if (!('starts' in value) || value['starts'] === undefined) return false;
    if (!('ends' in value) || value['ends'] === undefined) return false;
    if (!('repeats' in value) || value['repeats'] === undefined) return false;
    if (!('registrationEnabled' in value) || value['registrationEnabled'] === undefined) return false;
    if (!('notificationsEnabled' in value) || value['notificationsEnabled'] === undefined) return false;
    return true;
}

export function EventFromJSON(json: any): Event {
    return EventFromJSONTyped(json, false);
}

export function EventFromJSONTyped(json: any, ignoreDiscriminator: boolean): Event {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'calendarId': json['calendar_id'],
        'description': json['description'] == null ? undefined : json['description'],
        'content': json['content'] == null ? undefined : json['content'],
        'location': json['location'] == null ? undefined : json['location'],
        'url': json['url'] == null ? undefined : json['url'],
        'authorId': json['author_id'],
        'allDay': json['all_day'],
        'starts': (new Date(json['starts'])),
        'ends': (json['ends'] == null ? null : new Date(json['ends'])),
        'repeats': json['repeats'],
        'registrationEnabled': json['registration_enabled'],
        'registrationDeadline': json['registration_deadline'] == null ? undefined : (new Date(json['registration_deadline'])),
        'notificationsEnabled': json['notifications_enabled'],
        'notificationsInterval': json['notifications_interval'] == null ? undefined : json['notifications_interval'],
        'notificationsChannels': json['notifications_channels'] == null ? undefined : json['notifications_channels'],
    };
}

export function EventToJSON(json: any): Event {
    return EventToJSONTyped(json, false);
}

export function EventToJSONTyped(value?: Event | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'calendar_id': value['calendarId'],
        'description': value['description'],
        'content': value['content'],
        'location': value['location'],
        'url': value['url'],
        'author_id': value['authorId'],
        'all_day': value['allDay'],
        'starts': ((value['starts']).toISOString()),
        'ends': (value['ends'] == null ? null : (value['ends'] as any).toISOString()),
        'repeats': value['repeats'],
        'registration_enabled': value['registrationEnabled'],
        'registration_deadline': value['registrationDeadline'] == null ? undefined : ((value['registrationDeadline'] as any).toISOString()),
        'notifications_enabled': value['notificationsEnabled'],
        'notifications_interval': value['notificationsInterval'],
        'notifications_channels': value['notificationsChannels'],
    };
}

