/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Image,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsPost422Response,
  VersionAwardsAwardImagePost201Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
} from '../models/index';
import {
    ImageFromJSON,
    ImageToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionAwardsAwardImagePost201ResponseFromJSON,
    VersionAwardsAwardImagePost201ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
} from '../models/index';

export interface VersionGroupsGroupImageImageDeleteRequest {
    version: VersionGroupsGroupImageImageDeleteVersionEnum;
    group: number;
    image: number;
}

export interface VersionGroupsGroupImageImageGetRequest {
    version: VersionGroupsGroupImageImageGetVersionEnum;
    group: number;
    image: number;
}

export interface VersionGroupsGroupImageImagePatchRequest {
    version: VersionGroupsGroupImageImagePatchVersionEnum;
    group: number;
    image: number;
    image2?: Omit<Image, 'filename'|'path'|'image_url'>;
}

export interface VersionGroupsGroupImagePostRequest {
    version: VersionGroupsGroupImagePostVersionEnum;
    group: number;
    image?: Omit<Image, 'filename'|'path'|'image_url'>;
}

/**
 * 
 */
export class GroupsImageApi extends runtime.BaseAPI {

    /**
     * Delete image
     */
    async versionGroupsGroupImageImageDeleteRaw(requestParameters: VersionGroupsGroupImageImageDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardsAwardImagePost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionGroupsGroupImageImageDelete().'
            );
        }

        if (requestParameters['group'] == null) {
            throw new runtime.RequiredError(
                'group',
                'Required parameter "group" was null or undefined when calling versionGroupsGroupImageImageDelete().'
            );
        }

        if (requestParameters['image'] == null) {
            throw new runtime.RequiredError(
                'image',
                'Required parameter "image" was null or undefined when calling versionGroupsGroupImageImageDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/groups/{group}/image/{image}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"group"}}`, encodeURIComponent(String(requestParameters['group']))).replace(`{${"image"}}`, encodeURIComponent(String(requestParameters['image']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardsAwardImagePost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete image
     */
    async versionGroupsGroupImageImageDelete(requestParameters: VersionGroupsGroupImageImageDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardsAwardImagePost201Response> {
        const response = await this.versionGroupsGroupImageImageDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get image
     */
    async versionGroupsGroupImageImageGetRaw(requestParameters: VersionGroupsGroupImageImageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardsAwardImagePost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionGroupsGroupImageImageGet().'
            );
        }

        if (requestParameters['group'] == null) {
            throw new runtime.RequiredError(
                'group',
                'Required parameter "group" was null or undefined when calling versionGroupsGroupImageImageGet().'
            );
        }

        if (requestParameters['image'] == null) {
            throw new runtime.RequiredError(
                'image',
                'Required parameter "image" was null or undefined when calling versionGroupsGroupImageImageGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/groups/{group}/image/{image}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"group"}}`, encodeURIComponent(String(requestParameters['group']))).replace(`{${"image"}}`, encodeURIComponent(String(requestParameters['image']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardsAwardImagePost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get image
     */
    async versionGroupsGroupImageImageGet(requestParameters: VersionGroupsGroupImageImageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardsAwardImagePost201Response> {
        const response = await this.versionGroupsGroupImageImageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update image
     */
    async versionGroupsGroupImageImagePatchRaw(requestParameters: VersionGroupsGroupImageImagePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardsAwardImagePost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionGroupsGroupImageImagePatch().'
            );
        }

        if (requestParameters['group'] == null) {
            throw new runtime.RequiredError(
                'group',
                'Required parameter "group" was null or undefined when calling versionGroupsGroupImageImagePatch().'
            );
        }

        if (requestParameters['image'] == null) {
            throw new runtime.RequiredError(
                'image',
                'Required parameter "image" was null or undefined when calling versionGroupsGroupImageImagePatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/groups/{group}/image/{image}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"group"}}`, encodeURIComponent(String(requestParameters['group']))).replace(`{${"image"}}`, encodeURIComponent(String(requestParameters['image']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ImageToJSON(requestParameters['image2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardsAwardImagePost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update image
     */
    async versionGroupsGroupImageImagePatch(requestParameters: VersionGroupsGroupImageImagePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardsAwardImagePost201Response> {
        const response = await this.versionGroupsGroupImageImagePatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create image
     */
    async versionGroupsGroupImagePostRaw(requestParameters: VersionGroupsGroupImagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardsAwardImagePost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionGroupsGroupImagePost().'
            );
        }

        if (requestParameters['group'] == null) {
            throw new runtime.RequiredError(
                'group',
                'Required parameter "group" was null or undefined when calling versionGroupsGroupImagePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/groups/{group}/image`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"group"}}`, encodeURIComponent(String(requestParameters['group']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImageToJSON(requestParameters['image']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardsAwardImagePost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create image
     */
    async versionGroupsGroupImagePost(requestParameters: VersionGroupsGroupImagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardsAwardImagePost201Response> {
        const response = await this.versionGroupsGroupImagePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionGroupsGroupImageImageDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionGroupsGroupImageImageDeleteVersionEnum = typeof VersionGroupsGroupImageImageDeleteVersionEnum[keyof typeof VersionGroupsGroupImageImageDeleteVersionEnum];
/**
 * @export
 */
export const VersionGroupsGroupImageImageGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionGroupsGroupImageImageGetVersionEnum = typeof VersionGroupsGroupImageImageGetVersionEnum[keyof typeof VersionGroupsGroupImageImageGetVersionEnum];
/**
 * @export
 */
export const VersionGroupsGroupImageImagePatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionGroupsGroupImageImagePatchVersionEnum = typeof VersionGroupsGroupImageImagePatchVersionEnum[keyof typeof VersionGroupsGroupImageImagePatchVersionEnum];
/**
 * @export
 */
export const VersionGroupsGroupImagePostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionGroupsGroupImagePostVersionEnum = typeof VersionGroupsGroupImagePostVersionEnum[keyof typeof VersionGroupsGroupImagePostVersionEnum];
