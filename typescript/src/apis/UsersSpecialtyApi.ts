/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Specialty,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
  VersionSpecialtiesBatchPatchRequest,
  VersionSpecialtiesBatchPost200Response,
  VersionSpecialtiesPost201Response,
} from '../models/index';
import {
    SpecialtyFromJSON,
    SpecialtyToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
    VersionSpecialtiesBatchPatchRequestFromJSON,
    VersionSpecialtiesBatchPatchRequestToJSON,
    VersionSpecialtiesBatchPost200ResponseFromJSON,
    VersionSpecialtiesBatchPost200ResponseToJSON,
    VersionSpecialtiesPost201ResponseFromJSON,
    VersionSpecialtiesPost201ResponseToJSON,
} from '../models/index';

export interface VersionUsersUserSpecialtyBatchDeleteRequest {
    version: VersionUsersUserSpecialtyBatchDeleteVersionEnum;
    user: number;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionUsersUserSpecialtyBatchPatchRequest {
    version: VersionUsersUserSpecialtyBatchPatchVersionEnum;
    user: number;
    versionSpecialtiesBatchPatchRequest?: VersionSpecialtiesBatchPatchRequest;
}

export interface VersionUsersUserSpecialtySpecialtyDeleteRequest {
    version: VersionUsersUserSpecialtySpecialtyDeleteVersionEnum;
    user: number;
    specialty: number;
}

export interface VersionUsersUserSpecialtySpecialtyGetRequest {
    version: VersionUsersUserSpecialtySpecialtyGetVersionEnum;
    user: number;
    specialty: number;
}

export interface VersionUsersUserSpecialtySpecialtyPatchRequest {
    version: VersionUsersUserSpecialtySpecialtyPatchVersionEnum;
    user: number;
    specialty: number;
    specialty2?: Specialty;
}

/**
 * 
 */
export class UsersSpecialtyApi extends runtime.BaseAPI {

    /**
     * Delete a batch of specialties
     */
    async versionUsersUserSpecialtyBatchDeleteRaw(requestParameters: VersionUsersUserSpecialtyBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionSpecialtiesBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserSpecialtyBatchDelete().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserSpecialtyBatchDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/specialty/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionSpecialtiesBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of specialties
     */
    async versionUsersUserSpecialtyBatchDelete(requestParameters: VersionUsersUserSpecialtyBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionSpecialtiesBatchPost200Response> {
        const response = await this.versionUsersUserSpecialtyBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of specialties
     */
    async versionUsersUserSpecialtyBatchPatchRaw(requestParameters: VersionUsersUserSpecialtyBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionSpecialtiesBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserSpecialtyBatchPatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserSpecialtyBatchPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/specialty/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionSpecialtiesBatchPatchRequestToJSON(requestParameters['versionSpecialtiesBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionSpecialtiesBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of specialties
     */
    async versionUsersUserSpecialtyBatchPatch(requestParameters: VersionUsersUserSpecialtyBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionSpecialtiesBatchPost200Response> {
        const response = await this.versionUsersUserSpecialtyBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete specialty
     */
    async versionUsersUserSpecialtySpecialtyDeleteRaw(requestParameters: VersionUsersUserSpecialtySpecialtyDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionSpecialtiesPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserSpecialtySpecialtyDelete().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserSpecialtySpecialtyDelete().'
            );
        }

        if (requestParameters['specialty'] == null) {
            throw new runtime.RequiredError(
                'specialty',
                'Required parameter "specialty" was null or undefined when calling versionUsersUserSpecialtySpecialtyDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/specialty/{specialty}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"specialty"}}`, encodeURIComponent(String(requestParameters['specialty']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionSpecialtiesPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete specialty
     */
    async versionUsersUserSpecialtySpecialtyDelete(requestParameters: VersionUsersUserSpecialtySpecialtyDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionSpecialtiesPost201Response> {
        const response = await this.versionUsersUserSpecialtySpecialtyDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get specialty
     */
    async versionUsersUserSpecialtySpecialtyGetRaw(requestParameters: VersionUsersUserSpecialtySpecialtyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionSpecialtiesPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserSpecialtySpecialtyGet().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserSpecialtySpecialtyGet().'
            );
        }

        if (requestParameters['specialty'] == null) {
            throw new runtime.RequiredError(
                'specialty',
                'Required parameter "specialty" was null or undefined when calling versionUsersUserSpecialtySpecialtyGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/specialty/{specialty}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"specialty"}}`, encodeURIComponent(String(requestParameters['specialty']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionSpecialtiesPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get specialty
     */
    async versionUsersUserSpecialtySpecialtyGet(requestParameters: VersionUsersUserSpecialtySpecialtyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionSpecialtiesPost201Response> {
        const response = await this.versionUsersUserSpecialtySpecialtyGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update specialty
     */
    async versionUsersUserSpecialtySpecialtyPatchRaw(requestParameters: VersionUsersUserSpecialtySpecialtyPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionSpecialtiesPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserSpecialtySpecialtyPatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserSpecialtySpecialtyPatch().'
            );
        }

        if (requestParameters['specialty'] == null) {
            throw new runtime.RequiredError(
                'specialty',
                'Required parameter "specialty" was null or undefined when calling versionUsersUserSpecialtySpecialtyPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/specialty/{specialty}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"specialty"}}`, encodeURIComponent(String(requestParameters['specialty']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SpecialtyToJSON(requestParameters['specialty2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionSpecialtiesPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update specialty
     */
    async versionUsersUserSpecialtySpecialtyPatch(requestParameters: VersionUsersUserSpecialtySpecialtyPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionSpecialtiesPost201Response> {
        const response = await this.versionUsersUserSpecialtySpecialtyPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionUsersUserSpecialtyBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserSpecialtyBatchDeleteVersionEnum = typeof VersionUsersUserSpecialtyBatchDeleteVersionEnum[keyof typeof VersionUsersUserSpecialtyBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersUserSpecialtyBatchPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserSpecialtyBatchPatchVersionEnum = typeof VersionUsersUserSpecialtyBatchPatchVersionEnum[keyof typeof VersionUsersUserSpecialtyBatchPatchVersionEnum];
/**
 * @export
 */
export const VersionUsersUserSpecialtySpecialtyDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserSpecialtySpecialtyDeleteVersionEnum = typeof VersionUsersUserSpecialtySpecialtyDeleteVersionEnum[keyof typeof VersionUsersUserSpecialtySpecialtyDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersUserSpecialtySpecialtyGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserSpecialtySpecialtyGetVersionEnum = typeof VersionUsersUserSpecialtySpecialtyGetVersionEnum[keyof typeof VersionUsersUserSpecialtySpecialtyGetVersionEnum];
/**
 * @export
 */
export const VersionUsersUserSpecialtySpecialtyPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserSpecialtySpecialtyPatchVersionEnum = typeof VersionUsersUserSpecialtySpecialtyPatchVersionEnum[keyof typeof VersionUsersUserSpecialtySpecialtyPatchVersionEnum];
