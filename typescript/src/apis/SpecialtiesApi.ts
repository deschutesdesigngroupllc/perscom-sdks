/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Specialty,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
  VersionSpecialtiesBatchPatchRequest,
  VersionSpecialtiesBatchPost200Response,
  VersionSpecialtiesBatchPostRequest,
  VersionSpecialtiesGet200Response,
  VersionSpecialtiesPost201Response,
} from '../models/index';
import {
    SpecialtyFromJSON,
    SpecialtyToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
    VersionSpecialtiesBatchPatchRequestFromJSON,
    VersionSpecialtiesBatchPatchRequestToJSON,
    VersionSpecialtiesBatchPost200ResponseFromJSON,
    VersionSpecialtiesBatchPost200ResponseToJSON,
    VersionSpecialtiesBatchPostRequestFromJSON,
    VersionSpecialtiesBatchPostRequestToJSON,
    VersionSpecialtiesGet200ResponseFromJSON,
    VersionSpecialtiesGet200ResponseToJSON,
    VersionSpecialtiesPost201ResponseFromJSON,
    VersionSpecialtiesPost201ResponseToJSON,
} from '../models/index';

export interface VersionSpecialtiesBatchDeleteRequest {
    version: VersionSpecialtiesBatchDeleteVersionEnum;
    include?: VersionSpecialtiesBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionSpecialtiesBatchPatchOperationRequest {
    version: VersionSpecialtiesBatchPatchOperationVersionEnum;
    include?: VersionSpecialtiesBatchPatchOperationIncludeEnum;
    versionSpecialtiesBatchPatchRequest?: VersionSpecialtiesBatchPatchRequest;
}

export interface VersionSpecialtiesBatchPostOperationRequest {
    version: VersionSpecialtiesBatchPostOperationVersionEnum;
    include?: VersionSpecialtiesBatchPostOperationIncludeEnum;
    versionSpecialtiesBatchPostRequest?: VersionSpecialtiesBatchPostRequest;
}

export interface VersionSpecialtiesGetRequest {
    version: VersionSpecialtiesGetVersionEnum;
    include?: VersionSpecialtiesGetIncludeEnum;
}

export interface VersionSpecialtiesPostRequest {
    version: VersionSpecialtiesPostVersionEnum;
    include?: VersionSpecialtiesPostIncludeEnum;
    specialty?: Specialty;
}

export interface VersionSpecialtiesSpecialtyDeleteRequest {
    version: VersionSpecialtiesSpecialtyDeleteVersionEnum;
    specialty: number;
    include?: VersionSpecialtiesSpecialtyDeleteIncludeEnum;
}

export interface VersionSpecialtiesSpecialtyGetRequest {
    version: VersionSpecialtiesSpecialtyGetVersionEnum;
    specialty: number;
    include?: VersionSpecialtiesSpecialtyGetIncludeEnum;
}

export interface VersionSpecialtiesSpecialtyPatchRequest {
    version: VersionSpecialtiesSpecialtyPatchVersionEnum;
    specialty: number;
    include?: VersionSpecialtiesSpecialtyPatchIncludeEnum;
    specialty2?: Specialty;
}

/**
 * 
 */
export class SpecialtiesApi extends runtime.BaseAPI {

    /**
     * Delete a batch of specialties
     */
    async versionSpecialtiesBatchDeleteRaw(requestParameters: VersionSpecialtiesBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionSpecialtiesBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionSpecialtiesBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/specialties/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionSpecialtiesBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of specialties
     */
    async versionSpecialtiesBatchDelete(requestParameters: VersionSpecialtiesBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionSpecialtiesBatchPost200Response> {
        const response = await this.versionSpecialtiesBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of specialties
     */
    async versionSpecialtiesBatchPatchRaw(requestParameters: VersionSpecialtiesBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionSpecialtiesBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionSpecialtiesBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/specialties/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionSpecialtiesBatchPatchRequestToJSON(requestParameters['versionSpecialtiesBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionSpecialtiesBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of specialties
     */
    async versionSpecialtiesBatchPatch(requestParameters: VersionSpecialtiesBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionSpecialtiesBatchPost200Response> {
        const response = await this.versionSpecialtiesBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of specialties
     */
    async versionSpecialtiesBatchPostRaw(requestParameters: VersionSpecialtiesBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionSpecialtiesBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionSpecialtiesBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/specialties/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionSpecialtiesBatchPostRequestToJSON(requestParameters['versionSpecialtiesBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionSpecialtiesBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of specialties
     */
    async versionSpecialtiesBatchPost(requestParameters: VersionSpecialtiesBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionSpecialtiesBatchPost200Response> {
        const response = await this.versionSpecialtiesBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of specialties
     */
    async versionSpecialtiesGetRaw(requestParameters: VersionSpecialtiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionSpecialtiesGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionSpecialtiesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/specialties`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionSpecialtiesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of specialties
     */
    async versionSpecialtiesGet(requestParameters: VersionSpecialtiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionSpecialtiesGet200Response> {
        const response = await this.versionSpecialtiesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create specialty
     */
    async versionSpecialtiesPostRaw(requestParameters: VersionSpecialtiesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionSpecialtiesPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionSpecialtiesPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/specialties`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SpecialtyToJSON(requestParameters['specialty']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionSpecialtiesPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create specialty
     */
    async versionSpecialtiesPost(requestParameters: VersionSpecialtiesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionSpecialtiesPost201Response> {
        const response = await this.versionSpecialtiesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete specialty
     */
    async versionSpecialtiesSpecialtyDeleteRaw(requestParameters: VersionSpecialtiesSpecialtyDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionSpecialtiesPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionSpecialtiesSpecialtyDelete().'
            );
        }

        if (requestParameters['specialty'] == null) {
            throw new runtime.RequiredError(
                'specialty',
                'Required parameter "specialty" was null or undefined when calling versionSpecialtiesSpecialtyDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/specialties/{specialty}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"specialty"}}`, encodeURIComponent(String(requestParameters['specialty']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionSpecialtiesPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete specialty
     */
    async versionSpecialtiesSpecialtyDelete(requestParameters: VersionSpecialtiesSpecialtyDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionSpecialtiesPost201Response> {
        const response = await this.versionSpecialtiesSpecialtyDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get specialty
     */
    async versionSpecialtiesSpecialtyGetRaw(requestParameters: VersionSpecialtiesSpecialtyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionSpecialtiesPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionSpecialtiesSpecialtyGet().'
            );
        }

        if (requestParameters['specialty'] == null) {
            throw new runtime.RequiredError(
                'specialty',
                'Required parameter "specialty" was null or undefined when calling versionSpecialtiesSpecialtyGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/specialties/{specialty}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"specialty"}}`, encodeURIComponent(String(requestParameters['specialty']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionSpecialtiesPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get specialty
     */
    async versionSpecialtiesSpecialtyGet(requestParameters: VersionSpecialtiesSpecialtyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionSpecialtiesPost201Response> {
        const response = await this.versionSpecialtiesSpecialtyGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update specialty
     */
    async versionSpecialtiesSpecialtyPatchRaw(requestParameters: VersionSpecialtiesSpecialtyPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionSpecialtiesPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionSpecialtiesSpecialtyPatch().'
            );
        }

        if (requestParameters['specialty'] == null) {
            throw new runtime.RequiredError(
                'specialty',
                'Required parameter "specialty" was null or undefined when calling versionSpecialtiesSpecialtyPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/specialties/{specialty}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"specialty"}}`, encodeURIComponent(String(requestParameters['specialty']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SpecialtyToJSON(requestParameters['specialty2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionSpecialtiesPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update specialty
     */
    async versionSpecialtiesSpecialtyPatch(requestParameters: VersionSpecialtiesSpecialtyPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionSpecialtiesPost201Response> {
        const response = await this.versionSpecialtiesSpecialtyPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionSpecialtiesBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionSpecialtiesBatchDeleteVersionEnum = typeof VersionSpecialtiesBatchDeleteVersionEnum[keyof typeof VersionSpecialtiesBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionSpecialtiesBatchDeleteIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    Users: 'users'
} as const;
export type VersionSpecialtiesBatchDeleteIncludeEnum = typeof VersionSpecialtiesBatchDeleteIncludeEnum[keyof typeof VersionSpecialtiesBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionSpecialtiesBatchPatchOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionSpecialtiesBatchPatchOperationVersionEnum = typeof VersionSpecialtiesBatchPatchOperationVersionEnum[keyof typeof VersionSpecialtiesBatchPatchOperationVersionEnum];
/**
 * @export
 */
export const VersionSpecialtiesBatchPatchOperationIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    Users: 'users'
} as const;
export type VersionSpecialtiesBatchPatchOperationIncludeEnum = typeof VersionSpecialtiesBatchPatchOperationIncludeEnum[keyof typeof VersionSpecialtiesBatchPatchOperationIncludeEnum];
/**
 * @export
 */
export const VersionSpecialtiesBatchPostOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionSpecialtiesBatchPostOperationVersionEnum = typeof VersionSpecialtiesBatchPostOperationVersionEnum[keyof typeof VersionSpecialtiesBatchPostOperationVersionEnum];
/**
 * @export
 */
export const VersionSpecialtiesBatchPostOperationIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    Users: 'users'
} as const;
export type VersionSpecialtiesBatchPostOperationIncludeEnum = typeof VersionSpecialtiesBatchPostOperationIncludeEnum[keyof typeof VersionSpecialtiesBatchPostOperationIncludeEnum];
/**
 * @export
 */
export const VersionSpecialtiesGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionSpecialtiesGetVersionEnum = typeof VersionSpecialtiesGetVersionEnum[keyof typeof VersionSpecialtiesGetVersionEnum];
/**
 * @export
 */
export const VersionSpecialtiesGetIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    Users: 'users'
} as const;
export type VersionSpecialtiesGetIncludeEnum = typeof VersionSpecialtiesGetIncludeEnum[keyof typeof VersionSpecialtiesGetIncludeEnum];
/**
 * @export
 */
export const VersionSpecialtiesPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionSpecialtiesPostVersionEnum = typeof VersionSpecialtiesPostVersionEnum[keyof typeof VersionSpecialtiesPostVersionEnum];
/**
 * @export
 */
export const VersionSpecialtiesPostIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    Users: 'users'
} as const;
export type VersionSpecialtiesPostIncludeEnum = typeof VersionSpecialtiesPostIncludeEnum[keyof typeof VersionSpecialtiesPostIncludeEnum];
/**
 * @export
 */
export const VersionSpecialtiesSpecialtyDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionSpecialtiesSpecialtyDeleteVersionEnum = typeof VersionSpecialtiesSpecialtyDeleteVersionEnum[keyof typeof VersionSpecialtiesSpecialtyDeleteVersionEnum];
/**
 * @export
 */
export const VersionSpecialtiesSpecialtyDeleteIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    Users: 'users'
} as const;
export type VersionSpecialtiesSpecialtyDeleteIncludeEnum = typeof VersionSpecialtiesSpecialtyDeleteIncludeEnum[keyof typeof VersionSpecialtiesSpecialtyDeleteIncludeEnum];
/**
 * @export
 */
export const VersionSpecialtiesSpecialtyGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionSpecialtiesSpecialtyGetVersionEnum = typeof VersionSpecialtiesSpecialtyGetVersionEnum[keyof typeof VersionSpecialtiesSpecialtyGetVersionEnum];
/**
 * @export
 */
export const VersionSpecialtiesSpecialtyGetIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    Users: 'users'
} as const;
export type VersionSpecialtiesSpecialtyGetIncludeEnum = typeof VersionSpecialtiesSpecialtyGetIncludeEnum[keyof typeof VersionSpecialtiesSpecialtyGetIncludeEnum];
/**
 * @export
 */
export const VersionSpecialtiesSpecialtyPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionSpecialtiesSpecialtyPatchVersionEnum = typeof VersionSpecialtiesSpecialtyPatchVersionEnum[keyof typeof VersionSpecialtiesSpecialtyPatchVersionEnum];
/**
 * @export
 */
export const VersionSpecialtiesSpecialtyPatchIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    Users: 'users'
} as const;
export type VersionSpecialtiesSpecialtyPatchIncludeEnum = typeof VersionSpecialtiesSpecialtyPatchIncludeEnum[keyof typeof VersionSpecialtiesSpecialtyPatchIncludeEnum];
