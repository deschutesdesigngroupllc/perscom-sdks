/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Document,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionCategoriesCategoryDocumentsBatchPatchRequest,
  VersionCategoriesCategoryDocumentsBatchPost200Response,
  VersionCategoriesCategoryDocumentsBatchPostRequest,
  VersionCategoriesCategoryDocumentsGet200Response,
  VersionCategoriesCategoryDocumentsPost201Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
} from '../models/index';
import {
    DocumentFromJSON,
    DocumentToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionCategoriesCategoryDocumentsBatchPatchRequestFromJSON,
    VersionCategoriesCategoryDocumentsBatchPatchRequestToJSON,
    VersionCategoriesCategoryDocumentsBatchPost200ResponseFromJSON,
    VersionCategoriesCategoryDocumentsBatchPost200ResponseToJSON,
    VersionCategoriesCategoryDocumentsBatchPostRequestFromJSON,
    VersionCategoriesCategoryDocumentsBatchPostRequestToJSON,
    VersionCategoriesCategoryDocumentsGet200ResponseFromJSON,
    VersionCategoriesCategoryDocumentsGet200ResponseToJSON,
    VersionCategoriesCategoryDocumentsPost201ResponseFromJSON,
    VersionCategoriesCategoryDocumentsPost201ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
} from '../models/index';

export interface VersionDocumentsBatchDeleteRequest {
    version: VersionDocumentsBatchDeleteVersionEnum;
    include?: VersionDocumentsBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionDocumentsBatchPatchRequest {
    version: VersionDocumentsBatchPatchVersionEnum;
    include?: VersionDocumentsBatchPatchIncludeEnum;
    versionCategoriesCategoryDocumentsBatchPatchRequest?: VersionCategoriesCategoryDocumentsBatchPatchRequest;
}

export interface VersionDocumentsBatchPostRequest {
    version: VersionDocumentsBatchPostVersionEnum;
    include?: VersionDocumentsBatchPostIncludeEnum;
    versionCategoriesCategoryDocumentsBatchPostRequest?: VersionCategoriesCategoryDocumentsBatchPostRequest;
}

export interface VersionDocumentsDocumentDeleteRequest {
    version: VersionDocumentsDocumentDeleteVersionEnum;
    document: number;
    include?: VersionDocumentsDocumentDeleteIncludeEnum;
}

export interface VersionDocumentsDocumentGetRequest {
    version: VersionDocumentsDocumentGetVersionEnum;
    document: number;
    include?: VersionDocumentsDocumentGetIncludeEnum;
}

export interface VersionDocumentsDocumentPatchRequest {
    version: VersionDocumentsDocumentPatchVersionEnum;
    document: number;
    include?: VersionDocumentsDocumentPatchIncludeEnum;
    document2?: Document;
}

export interface VersionDocumentsGetRequest {
    version: VersionDocumentsGetVersionEnum;
    include?: VersionDocumentsGetIncludeEnum;
}

export interface VersionDocumentsPostRequest {
    version: VersionDocumentsPostVersionEnum;
    include?: VersionDocumentsPostIncludeEnum;
    document?: Document;
}

/**
 * 
 */
export class DocumentsApi extends runtime.BaseAPI {

    /**
     * Delete a batch of documents
     */
    async versionDocumentsBatchDeleteRaw(requestParameters: VersionDocumentsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryDocumentsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionDocumentsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/documents/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryDocumentsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of documents
     */
    async versionDocumentsBatchDelete(requestParameters: VersionDocumentsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryDocumentsBatchPost200Response> {
        const response = await this.versionDocumentsBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of documents
     */
    async versionDocumentsBatchPatchRaw(requestParameters: VersionDocumentsBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryDocumentsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionDocumentsBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/documents/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryDocumentsBatchPatchRequestToJSON(requestParameters['versionCategoriesCategoryDocumentsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryDocumentsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of documents
     */
    async versionDocumentsBatchPatch(requestParameters: VersionDocumentsBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryDocumentsBatchPost200Response> {
        const response = await this.versionDocumentsBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of documents
     */
    async versionDocumentsBatchPostRaw(requestParameters: VersionDocumentsBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryDocumentsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionDocumentsBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/documents/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryDocumentsBatchPostRequestToJSON(requestParameters['versionCategoriesCategoryDocumentsBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryDocumentsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of documents
     */
    async versionDocumentsBatchPost(requestParameters: VersionDocumentsBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryDocumentsBatchPost200Response> {
        const response = await this.versionDocumentsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete document
     */
    async versionDocumentsDocumentDeleteRaw(requestParameters: VersionDocumentsDocumentDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryDocumentsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionDocumentsDocumentDelete().'
            );
        }

        if (requestParameters['document'] == null) {
            throw new runtime.RequiredError(
                'document',
                'Required parameter "document" was null or undefined when calling versionDocumentsDocumentDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/documents/{document}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"document"}}`, encodeURIComponent(String(requestParameters['document']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryDocumentsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete document
     */
    async versionDocumentsDocumentDelete(requestParameters: VersionDocumentsDocumentDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryDocumentsPost201Response> {
        const response = await this.versionDocumentsDocumentDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get document
     */
    async versionDocumentsDocumentGetRaw(requestParameters: VersionDocumentsDocumentGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryDocumentsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionDocumentsDocumentGet().'
            );
        }

        if (requestParameters['document'] == null) {
            throw new runtime.RequiredError(
                'document',
                'Required parameter "document" was null or undefined when calling versionDocumentsDocumentGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/documents/{document}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"document"}}`, encodeURIComponent(String(requestParameters['document']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryDocumentsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get document
     */
    async versionDocumentsDocumentGet(requestParameters: VersionDocumentsDocumentGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryDocumentsPost201Response> {
        const response = await this.versionDocumentsDocumentGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update document
     */
    async versionDocumentsDocumentPatchRaw(requestParameters: VersionDocumentsDocumentPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryDocumentsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionDocumentsDocumentPatch().'
            );
        }

        if (requestParameters['document'] == null) {
            throw new runtime.RequiredError(
                'document',
                'Required parameter "document" was null or undefined when calling versionDocumentsDocumentPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/documents/{document}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"document"}}`, encodeURIComponent(String(requestParameters['document']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentToJSON(requestParameters['document2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryDocumentsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update document
     */
    async versionDocumentsDocumentPatch(requestParameters: VersionDocumentsDocumentPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryDocumentsPost201Response> {
        const response = await this.versionDocumentsDocumentPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of documents
     */
    async versionDocumentsGetRaw(requestParameters: VersionDocumentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryDocumentsGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionDocumentsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/documents`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryDocumentsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of documents
     */
    async versionDocumentsGet(requestParameters: VersionDocumentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryDocumentsGet200Response> {
        const response = await this.versionDocumentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create document
     */
    async versionDocumentsPostRaw(requestParameters: VersionDocumentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryDocumentsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionDocumentsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/documents`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentToJSON(requestParameters['document']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryDocumentsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create document
     */
    async versionDocumentsPost(requestParameters: VersionDocumentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryDocumentsPost201Response> {
        const response = await this.versionDocumentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionDocumentsBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionDocumentsBatchDeleteVersionEnum = typeof VersionDocumentsBatchDeleteVersionEnum[keyof typeof VersionDocumentsBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionDocumentsBatchDeleteIncludeEnum = {
    Author: 'author'
} as const;
export type VersionDocumentsBatchDeleteIncludeEnum = typeof VersionDocumentsBatchDeleteIncludeEnum[keyof typeof VersionDocumentsBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionDocumentsBatchPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionDocumentsBatchPatchVersionEnum = typeof VersionDocumentsBatchPatchVersionEnum[keyof typeof VersionDocumentsBatchPatchVersionEnum];
/**
 * @export
 */
export const VersionDocumentsBatchPatchIncludeEnum = {
    Author: 'author'
} as const;
export type VersionDocumentsBatchPatchIncludeEnum = typeof VersionDocumentsBatchPatchIncludeEnum[keyof typeof VersionDocumentsBatchPatchIncludeEnum];
/**
 * @export
 */
export const VersionDocumentsBatchPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionDocumentsBatchPostVersionEnum = typeof VersionDocumentsBatchPostVersionEnum[keyof typeof VersionDocumentsBatchPostVersionEnum];
/**
 * @export
 */
export const VersionDocumentsBatchPostIncludeEnum = {
    Author: 'author'
} as const;
export type VersionDocumentsBatchPostIncludeEnum = typeof VersionDocumentsBatchPostIncludeEnum[keyof typeof VersionDocumentsBatchPostIncludeEnum];
/**
 * @export
 */
export const VersionDocumentsDocumentDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionDocumentsDocumentDeleteVersionEnum = typeof VersionDocumentsDocumentDeleteVersionEnum[keyof typeof VersionDocumentsDocumentDeleteVersionEnum];
/**
 * @export
 */
export const VersionDocumentsDocumentDeleteIncludeEnum = {
    Author: 'author'
} as const;
export type VersionDocumentsDocumentDeleteIncludeEnum = typeof VersionDocumentsDocumentDeleteIncludeEnum[keyof typeof VersionDocumentsDocumentDeleteIncludeEnum];
/**
 * @export
 */
export const VersionDocumentsDocumentGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionDocumentsDocumentGetVersionEnum = typeof VersionDocumentsDocumentGetVersionEnum[keyof typeof VersionDocumentsDocumentGetVersionEnum];
/**
 * @export
 */
export const VersionDocumentsDocumentGetIncludeEnum = {
    Author: 'author'
} as const;
export type VersionDocumentsDocumentGetIncludeEnum = typeof VersionDocumentsDocumentGetIncludeEnum[keyof typeof VersionDocumentsDocumentGetIncludeEnum];
/**
 * @export
 */
export const VersionDocumentsDocumentPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionDocumentsDocumentPatchVersionEnum = typeof VersionDocumentsDocumentPatchVersionEnum[keyof typeof VersionDocumentsDocumentPatchVersionEnum];
/**
 * @export
 */
export const VersionDocumentsDocumentPatchIncludeEnum = {
    Author: 'author'
} as const;
export type VersionDocumentsDocumentPatchIncludeEnum = typeof VersionDocumentsDocumentPatchIncludeEnum[keyof typeof VersionDocumentsDocumentPatchIncludeEnum];
/**
 * @export
 */
export const VersionDocumentsGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionDocumentsGetVersionEnum = typeof VersionDocumentsGetVersionEnum[keyof typeof VersionDocumentsGetVersionEnum];
/**
 * @export
 */
export const VersionDocumentsGetIncludeEnum = {
    Author: 'author'
} as const;
export type VersionDocumentsGetIncludeEnum = typeof VersionDocumentsGetIncludeEnum[keyof typeof VersionDocumentsGetIncludeEnum];
/**
 * @export
 */
export const VersionDocumentsPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionDocumentsPostVersionEnum = typeof VersionDocumentsPostVersionEnum[keyof typeof VersionDocumentsPostVersionEnum];
/**
 * @export
 */
export const VersionDocumentsPostIncludeEnum = {
    Author: 'author'
} as const;
export type VersionDocumentsPostIncludeEnum = typeof VersionDocumentsPostIncludeEnum[keyof typeof VersionDocumentsPostIncludeEnum];
