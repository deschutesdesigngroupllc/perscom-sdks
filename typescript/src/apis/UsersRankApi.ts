/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Rank,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionCategoriesCategoryRanksBatchPatchRequest,
  VersionCategoriesCategoryRanksBatchPost200Response,
  VersionCategoriesCategoryRanksPost201Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
} from '../models/index';
import {
    RankFromJSON,
    RankToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionCategoriesCategoryRanksBatchPatchRequestFromJSON,
    VersionCategoriesCategoryRanksBatchPatchRequestToJSON,
    VersionCategoriesCategoryRanksBatchPost200ResponseFromJSON,
    VersionCategoriesCategoryRanksBatchPost200ResponseToJSON,
    VersionCategoriesCategoryRanksPost201ResponseFromJSON,
    VersionCategoriesCategoryRanksPost201ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
} from '../models/index';

export interface VersionUsersUserRankBatchDeleteRequest {
    version: VersionUsersUserRankBatchDeleteVersionEnum;
    user: number;
    include?: VersionUsersUserRankBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionUsersUserRankBatchPatchRequest {
    version: VersionUsersUserRankBatchPatchVersionEnum;
    user: number;
    include?: VersionUsersUserRankBatchPatchIncludeEnum;
    versionCategoriesCategoryRanksBatchPatchRequest?: VersionCategoriesCategoryRanksBatchPatchRequest;
}

export interface VersionUsersUserRankRankDeleteRequest {
    version: VersionUsersUserRankRankDeleteVersionEnum;
    user: number;
    rank: number;
    include?: VersionUsersUserRankRankDeleteIncludeEnum;
}

export interface VersionUsersUserRankRankGetRequest {
    version: VersionUsersUserRankRankGetVersionEnum;
    user: number;
    rank: number;
    include?: VersionUsersUserRankRankGetIncludeEnum;
}

export interface VersionUsersUserRankRankPatchRequest {
    version: VersionUsersUserRankRankPatchVersionEnum;
    user: number;
    rank: number;
    include?: VersionUsersUserRankRankPatchIncludeEnum;
    rank2?: Rank;
}

/**
 * 
 */
export class UsersRankApi extends runtime.BaseAPI {

    /**
     * Delete a batch of ranks
     */
    async versionUsersUserRankBatchDeleteRaw(requestParameters: VersionUsersUserRankBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryRanksBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserRankBatchDelete().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserRankBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/rank/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryRanksBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of ranks
     */
    async versionUsersUserRankBatchDelete(requestParameters: VersionUsersUserRankBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryRanksBatchPost200Response> {
        const response = await this.versionUsersUserRankBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of ranks
     */
    async versionUsersUserRankBatchPatchRaw(requestParameters: VersionUsersUserRankBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryRanksBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserRankBatchPatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserRankBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/rank/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryRanksBatchPatchRequestToJSON(requestParameters['versionCategoriesCategoryRanksBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryRanksBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of ranks
     */
    async versionUsersUserRankBatchPatch(requestParameters: VersionUsersUserRankBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryRanksBatchPost200Response> {
        const response = await this.versionUsersUserRankBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete rank
     */
    async versionUsersUserRankRankDeleteRaw(requestParameters: VersionUsersUserRankRankDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryRanksPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserRankRankDelete().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserRankRankDelete().'
            );
        }

        if (requestParameters['rank'] == null) {
            throw new runtime.RequiredError(
                'rank',
                'Required parameter "rank" was null or undefined when calling versionUsersUserRankRankDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/rank/{rank}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"rank"}}`, encodeURIComponent(String(requestParameters['rank']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryRanksPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete rank
     */
    async versionUsersUserRankRankDelete(requestParameters: VersionUsersUserRankRankDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryRanksPost201Response> {
        const response = await this.versionUsersUserRankRankDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get rank
     */
    async versionUsersUserRankRankGetRaw(requestParameters: VersionUsersUserRankRankGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryRanksPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserRankRankGet().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserRankRankGet().'
            );
        }

        if (requestParameters['rank'] == null) {
            throw new runtime.RequiredError(
                'rank',
                'Required parameter "rank" was null or undefined when calling versionUsersUserRankRankGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/rank/{rank}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"rank"}}`, encodeURIComponent(String(requestParameters['rank']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryRanksPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get rank
     */
    async versionUsersUserRankRankGet(requestParameters: VersionUsersUserRankRankGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryRanksPost201Response> {
        const response = await this.versionUsersUserRankRankGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update rank
     */
    async versionUsersUserRankRankPatchRaw(requestParameters: VersionUsersUserRankRankPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryRanksPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserRankRankPatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserRankRankPatch().'
            );
        }

        if (requestParameters['rank'] == null) {
            throw new runtime.RequiredError(
                'rank',
                'Required parameter "rank" was null or undefined when calling versionUsersUserRankRankPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/rank/{rank}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"rank"}}`, encodeURIComponent(String(requestParameters['rank']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RankToJSON(requestParameters['rank2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryRanksPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update rank
     */
    async versionUsersUserRankRankPatch(requestParameters: VersionUsersUserRankRankPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryRanksPost201Response> {
        const response = await this.versionUsersUserRankRankPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionUsersUserRankBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserRankBatchDeleteVersionEnum = typeof VersionUsersUserRankBatchDeleteVersionEnum[keyof typeof VersionUsersUserRankBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersUserRankBatchDeleteIncludeEnum = {
    Image: 'image'
} as const;
export type VersionUsersUserRankBatchDeleteIncludeEnum = typeof VersionUsersUserRankBatchDeleteIncludeEnum[keyof typeof VersionUsersUserRankBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserRankBatchPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserRankBatchPatchVersionEnum = typeof VersionUsersUserRankBatchPatchVersionEnum[keyof typeof VersionUsersUserRankBatchPatchVersionEnum];
/**
 * @export
 */
export const VersionUsersUserRankBatchPatchIncludeEnum = {
    Image: 'image'
} as const;
export type VersionUsersUserRankBatchPatchIncludeEnum = typeof VersionUsersUserRankBatchPatchIncludeEnum[keyof typeof VersionUsersUserRankBatchPatchIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserRankRankDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserRankRankDeleteVersionEnum = typeof VersionUsersUserRankRankDeleteVersionEnum[keyof typeof VersionUsersUserRankRankDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersUserRankRankDeleteIncludeEnum = {
    Image: 'image'
} as const;
export type VersionUsersUserRankRankDeleteIncludeEnum = typeof VersionUsersUserRankRankDeleteIncludeEnum[keyof typeof VersionUsersUserRankRankDeleteIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserRankRankGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserRankRankGetVersionEnum = typeof VersionUsersUserRankRankGetVersionEnum[keyof typeof VersionUsersUserRankRankGetVersionEnum];
/**
 * @export
 */
export const VersionUsersUserRankRankGetIncludeEnum = {
    Image: 'image'
} as const;
export type VersionUsersUserRankRankGetIncludeEnum = typeof VersionUsersUserRankRankGetIncludeEnum[keyof typeof VersionUsersUserRankRankGetIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserRankRankPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserRankRankPatchVersionEnum = typeof VersionUsersUserRankRankPatchVersionEnum[keyof typeof VersionUsersUserRankRankPatchVersionEnum];
/**
 * @export
 */
export const VersionUsersUserRankRankPatchIncludeEnum = {
    Image: 'image'
} as const;
export type VersionUsersUserRankRankPatchIncludeEnum = typeof VersionUsersUserRankRankPatchIncludeEnum[keyof typeof VersionUsersUserRankRankPatchIncludeEnum];
