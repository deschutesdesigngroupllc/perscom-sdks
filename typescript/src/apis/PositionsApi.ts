/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Position,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
  VersionPositionsBatchPatchRequest,
  VersionPositionsBatchPost200Response,
  VersionPositionsBatchPostRequest,
  VersionPositionsGet200Response,
  VersionPositionsPost201Response,
} from '../models/index';
import {
    PositionFromJSON,
    PositionToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
    VersionPositionsBatchPatchRequestFromJSON,
    VersionPositionsBatchPatchRequestToJSON,
    VersionPositionsBatchPost200ResponseFromJSON,
    VersionPositionsBatchPost200ResponseToJSON,
    VersionPositionsBatchPostRequestFromJSON,
    VersionPositionsBatchPostRequestToJSON,
    VersionPositionsGet200ResponseFromJSON,
    VersionPositionsGet200ResponseToJSON,
    VersionPositionsPost201ResponseFromJSON,
    VersionPositionsPost201ResponseToJSON,
} from '../models/index';

export interface VersionPositionsBatchDeleteRequest {
    version: VersionPositionsBatchDeleteVersionEnum;
    include?: VersionPositionsBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionPositionsBatchPatchOperationRequest {
    version: VersionPositionsBatchPatchOperationVersionEnum;
    include?: VersionPositionsBatchPatchOperationIncludeEnum;
    versionPositionsBatchPatchRequest?: VersionPositionsBatchPatchRequest;
}

export interface VersionPositionsBatchPostOperationRequest {
    version: VersionPositionsBatchPostOperationVersionEnum;
    include?: VersionPositionsBatchPostOperationIncludeEnum;
    versionPositionsBatchPostRequest?: VersionPositionsBatchPostRequest;
}

export interface VersionPositionsGetRequest {
    version: VersionPositionsGetVersionEnum;
    include?: VersionPositionsGetIncludeEnum;
}

export interface VersionPositionsPositionDeleteRequest {
    version: VersionPositionsPositionDeleteVersionEnum;
    position: number;
    include?: VersionPositionsPositionDeleteIncludeEnum;
}

export interface VersionPositionsPositionGetRequest {
    version: VersionPositionsPositionGetVersionEnum;
    position: number;
    include?: VersionPositionsPositionGetIncludeEnum;
}

export interface VersionPositionsPositionPatchRequest {
    version: VersionPositionsPositionPatchVersionEnum;
    position: number;
    include?: VersionPositionsPositionPatchIncludeEnum;
    position2?: Position;
}

export interface VersionPositionsPostRequest {
    version: VersionPositionsPostVersionEnum;
    include?: VersionPositionsPostIncludeEnum;
    position?: Position;
}

/**
 * 
 */
export class PositionsApi extends runtime.BaseAPI {

    /**
     * Delete a batch of positions
     */
    async versionPositionsBatchDeleteRaw(requestParameters: VersionPositionsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionPositionsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionPositionsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/positions/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionPositionsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of positions
     */
    async versionPositionsBatchDelete(requestParameters: VersionPositionsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionPositionsBatchPost200Response> {
        const response = await this.versionPositionsBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of positions
     */
    async versionPositionsBatchPatchRaw(requestParameters: VersionPositionsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionPositionsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionPositionsBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/positions/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionPositionsBatchPatchRequestToJSON(requestParameters['versionPositionsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionPositionsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of positions
     */
    async versionPositionsBatchPatch(requestParameters: VersionPositionsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionPositionsBatchPost200Response> {
        const response = await this.versionPositionsBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of positions
     */
    async versionPositionsBatchPostRaw(requestParameters: VersionPositionsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionPositionsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionPositionsBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/positions/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionPositionsBatchPostRequestToJSON(requestParameters['versionPositionsBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionPositionsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of positions
     */
    async versionPositionsBatchPost(requestParameters: VersionPositionsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionPositionsBatchPost200Response> {
        const response = await this.versionPositionsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of positions
     */
    async versionPositionsGetRaw(requestParameters: VersionPositionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionPositionsGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionPositionsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/positions`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionPositionsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of positions
     */
    async versionPositionsGet(requestParameters: VersionPositionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionPositionsGet200Response> {
        const response = await this.versionPositionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete position
     */
    async versionPositionsPositionDeleteRaw(requestParameters: VersionPositionsPositionDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionPositionsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionPositionsPositionDelete().'
            );
        }

        if (requestParameters['position'] == null) {
            throw new runtime.RequiredError(
                'position',
                'Required parameter "position" was null or undefined when calling versionPositionsPositionDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/positions/{position}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"position"}}`, encodeURIComponent(String(requestParameters['position']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionPositionsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete position
     */
    async versionPositionsPositionDelete(requestParameters: VersionPositionsPositionDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionPositionsPost201Response> {
        const response = await this.versionPositionsPositionDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get position
     */
    async versionPositionsPositionGetRaw(requestParameters: VersionPositionsPositionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionPositionsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionPositionsPositionGet().'
            );
        }

        if (requestParameters['position'] == null) {
            throw new runtime.RequiredError(
                'position',
                'Required parameter "position" was null or undefined when calling versionPositionsPositionGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/positions/{position}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"position"}}`, encodeURIComponent(String(requestParameters['position']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionPositionsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get position
     */
    async versionPositionsPositionGet(requestParameters: VersionPositionsPositionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionPositionsPost201Response> {
        const response = await this.versionPositionsPositionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update position
     */
    async versionPositionsPositionPatchRaw(requestParameters: VersionPositionsPositionPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionPositionsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionPositionsPositionPatch().'
            );
        }

        if (requestParameters['position'] == null) {
            throw new runtime.RequiredError(
                'position',
                'Required parameter "position" was null or undefined when calling versionPositionsPositionPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/positions/{position}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"position"}}`, encodeURIComponent(String(requestParameters['position']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PositionToJSON(requestParameters['position2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionPositionsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update position
     */
    async versionPositionsPositionPatch(requestParameters: VersionPositionsPositionPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionPositionsPost201Response> {
        const response = await this.versionPositionsPositionPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create position
     */
    async versionPositionsPostRaw(requestParameters: VersionPositionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionPositionsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionPositionsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/positions`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PositionToJSON(requestParameters['position']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionPositionsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create position
     */
    async versionPositionsPost(requestParameters: VersionPositionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionPositionsPost201Response> {
        const response = await this.versionPositionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionPositionsBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionPositionsBatchDeleteVersionEnum = typeof VersionPositionsBatchDeleteVersionEnum[keyof typeof VersionPositionsBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionPositionsBatchDeleteIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    Users: 'users'
} as const;
export type VersionPositionsBatchDeleteIncludeEnum = typeof VersionPositionsBatchDeleteIncludeEnum[keyof typeof VersionPositionsBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionPositionsBatchPatchOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionPositionsBatchPatchOperationVersionEnum = typeof VersionPositionsBatchPatchOperationVersionEnum[keyof typeof VersionPositionsBatchPatchOperationVersionEnum];
/**
 * @export
 */
export const VersionPositionsBatchPatchOperationIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    Users: 'users'
} as const;
export type VersionPositionsBatchPatchOperationIncludeEnum = typeof VersionPositionsBatchPatchOperationIncludeEnum[keyof typeof VersionPositionsBatchPatchOperationIncludeEnum];
/**
 * @export
 */
export const VersionPositionsBatchPostOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionPositionsBatchPostOperationVersionEnum = typeof VersionPositionsBatchPostOperationVersionEnum[keyof typeof VersionPositionsBatchPostOperationVersionEnum];
/**
 * @export
 */
export const VersionPositionsBatchPostOperationIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    Users: 'users'
} as const;
export type VersionPositionsBatchPostOperationIncludeEnum = typeof VersionPositionsBatchPostOperationIncludeEnum[keyof typeof VersionPositionsBatchPostOperationIncludeEnum];
/**
 * @export
 */
export const VersionPositionsGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionPositionsGetVersionEnum = typeof VersionPositionsGetVersionEnum[keyof typeof VersionPositionsGetVersionEnum];
/**
 * @export
 */
export const VersionPositionsGetIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    Users: 'users'
} as const;
export type VersionPositionsGetIncludeEnum = typeof VersionPositionsGetIncludeEnum[keyof typeof VersionPositionsGetIncludeEnum];
/**
 * @export
 */
export const VersionPositionsPositionDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionPositionsPositionDeleteVersionEnum = typeof VersionPositionsPositionDeleteVersionEnum[keyof typeof VersionPositionsPositionDeleteVersionEnum];
/**
 * @export
 */
export const VersionPositionsPositionDeleteIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    Users: 'users'
} as const;
export type VersionPositionsPositionDeleteIncludeEnum = typeof VersionPositionsPositionDeleteIncludeEnum[keyof typeof VersionPositionsPositionDeleteIncludeEnum];
/**
 * @export
 */
export const VersionPositionsPositionGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionPositionsPositionGetVersionEnum = typeof VersionPositionsPositionGetVersionEnum[keyof typeof VersionPositionsPositionGetVersionEnum];
/**
 * @export
 */
export const VersionPositionsPositionGetIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    Users: 'users'
} as const;
export type VersionPositionsPositionGetIncludeEnum = typeof VersionPositionsPositionGetIncludeEnum[keyof typeof VersionPositionsPositionGetIncludeEnum];
/**
 * @export
 */
export const VersionPositionsPositionPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionPositionsPositionPatchVersionEnum = typeof VersionPositionsPositionPatchVersionEnum[keyof typeof VersionPositionsPositionPatchVersionEnum];
/**
 * @export
 */
export const VersionPositionsPositionPatchIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    Users: 'users'
} as const;
export type VersionPositionsPositionPatchIncludeEnum = typeof VersionPositionsPositionPatchIncludeEnum[keyof typeof VersionPositionsPositionPatchIncludeEnum];
/**
 * @export
 */
export const VersionPositionsPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionPositionsPostVersionEnum = typeof VersionPositionsPostVersionEnum[keyof typeof VersionPositionsPostVersionEnum];
/**
 * @export
 */
export const VersionPositionsPostIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    Users: 'users'
} as const;
export type VersionPositionsPostIncludeEnum = typeof VersionPositionsPostIncludeEnum[keyof typeof VersionPositionsPostIncludeEnum];
