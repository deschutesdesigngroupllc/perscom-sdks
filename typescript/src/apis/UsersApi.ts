/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  User,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionMeGet200Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
  VersionUsersBatchPatchRequest,
  VersionUsersBatchPost200Response,
  VersionUsersBatchPostRequest,
  VersionUsersPost201Response,
} from '../models/index';
import {
    UserFromJSON,
    UserToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionMeGet200ResponseFromJSON,
    VersionMeGet200ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
    VersionUsersBatchPatchRequestFromJSON,
    VersionUsersBatchPatchRequestToJSON,
    VersionUsersBatchPost200ResponseFromJSON,
    VersionUsersBatchPost200ResponseToJSON,
    VersionUsersBatchPostRequestFromJSON,
    VersionUsersBatchPostRequestToJSON,
    VersionUsersPost201ResponseFromJSON,
    VersionUsersPost201ResponseToJSON,
} from '../models/index';

export interface VersionUsersBatchDeleteRequest {
    version: VersionUsersBatchDeleteVersionEnum;
    include?: VersionUsersBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionUsersBatchPatchOperationRequest {
    version: VersionUsersBatchPatchOperationVersionEnum;
    include?: VersionUsersBatchPatchOperationIncludeEnum;
    versionUsersBatchPatchRequest?: VersionUsersBatchPatchRequest;
}

export interface VersionUsersBatchPostOperationRequest {
    version: VersionUsersBatchPostOperationVersionEnum;
    include?: VersionUsersBatchPostOperationIncludeEnum;
    versionUsersBatchPostRequest?: VersionUsersBatchPostRequest;
}

export interface VersionUsersGetRequest {
    version: VersionUsersGetVersionEnum;
    include?: VersionUsersGetIncludeEnum;
}

export interface VersionUsersPostRequest {
    version: VersionUsersPostVersionEnum;
    include?: VersionUsersPostIncludeEnum;
    user?: Omit<User, 'online'|'profile_photo_url'|'cover_photo_url'|'discord_user_id'|'timezone'|'last_assignment_change_date'|'last_rank_change_date'>;
}

export interface VersionUsersUserDeleteRequest {
    version: VersionUsersUserDeleteVersionEnum;
    user: number;
    include?: VersionUsersUserDeleteIncludeEnum;
}

export interface VersionUsersUserGetRequest {
    version: VersionUsersUserGetVersionEnum;
    user: number;
    include?: VersionUsersUserGetIncludeEnum;
}

export interface VersionUsersUserPatchRequest {
    version: VersionUsersUserPatchVersionEnum;
    user: number;
    include?: VersionUsersUserPatchIncludeEnum;
    user2?: Omit<User, 'online'|'profile_photo_url'|'cover_photo_url'|'discord_user_id'|'timezone'|'last_assignment_change_date'|'last_rank_change_date'>;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Delete a batch of users
     */
    async versionUsersBatchDeleteRaw(requestParameters: VersionUsersBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionUsersBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionUsersBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of users
     */
    async versionUsersBatchDelete(requestParameters: VersionUsersBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionUsersBatchPost200Response> {
        const response = await this.versionUsersBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of users
     */
    async versionUsersBatchPatchRaw(requestParameters: VersionUsersBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionUsersBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionUsersBatchPatchRequestToJSON(requestParameters['versionUsersBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionUsersBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of users
     */
    async versionUsersBatchPatch(requestParameters: VersionUsersBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionUsersBatchPost200Response> {
        const response = await this.versionUsersBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of users
     */
    async versionUsersBatchPostRaw(requestParameters: VersionUsersBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionUsersBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionUsersBatchPostRequestToJSON(requestParameters['versionUsersBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionUsersBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of users
     */
    async versionUsersBatchPost(requestParameters: VersionUsersBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionUsersBatchPost200Response> {
        const response = await this.versionUsersBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of users
     */
    async versionUsersGetRaw(requestParameters: VersionUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionMeGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionMeGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of users
     */
    async versionUsersGet(requestParameters: VersionUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionMeGet200Response> {
        const response = await this.versionUsersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create user
     */
    async versionUsersPostRaw(requestParameters: VersionUsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionUsersPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters['user']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionUsersPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create user
     */
    async versionUsersPost(requestParameters: VersionUsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionUsersPost201Response> {
        const response = await this.versionUsersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete user
     */
    async versionUsersUserDeleteRaw(requestParameters: VersionUsersUserDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionUsersPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserDelete().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionUsersPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete user
     */
    async versionUsersUserDelete(requestParameters: VersionUsersUserDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionUsersPost201Response> {
        const response = await this.versionUsersUserDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get user
     */
    async versionUsersUserGetRaw(requestParameters: VersionUsersUserGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionUsersPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserGet().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionUsersPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get user
     */
    async versionUsersUserGet(requestParameters: VersionUsersUserGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionUsersPost201Response> {
        const response = await this.versionUsersUserGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update user
     */
    async versionUsersUserPatchRaw(requestParameters: VersionUsersUserPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionUsersPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserPatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters['user2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionUsersPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update user
     */
    async versionUsersUserPatch(requestParameters: VersionUsersUserPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionUsersPost201Response> {
        const response = await this.versionUsersUserPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionUsersBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersBatchDeleteVersionEnum = typeof VersionUsersBatchDeleteVersionEnum[keyof typeof VersionUsersBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersBatchDeleteIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    Attachments: 'attachments',
    AwardRecords: 'award_records',
    AwardRecords2: 'award_records.*',
    AwardRecordsAward: 'award_records.award.*',
    CombatRecords: 'combat_records',
    CombatRecords2: 'combat_records.*',
    Fields: 'fields',
    Position: 'position',
    PrimaryAssignmentRecords: 'primary_assignment_records',
    PrimaryAssignmentRecords2: 'primary_assignment_records.*',
    QualificationRecords: 'qualification_records',
    QualificationRecords2: 'qualification_records.*',
    Rank: 'rank',
    Rank2: 'rank.*',
    RankRecords: 'rank_records',
    RankRecords2: 'rank_records.*',
    SecondaryAssignmentRecords: 'secondary_assignment_records',
    SecondaryAssignmentRecords2: 'secondary_assignment_records.*',
    ServiceRecords: 'service_records',
    ServiceRecords2: 'service_records.*',
    Specialty: 'specialty',
    Status: 'status',
    Unit: 'unit',
    Unit2: 'unit.*'
} as const;
export type VersionUsersBatchDeleteIncludeEnum = typeof VersionUsersBatchDeleteIncludeEnum[keyof typeof VersionUsersBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionUsersBatchPatchOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersBatchPatchOperationVersionEnum = typeof VersionUsersBatchPatchOperationVersionEnum[keyof typeof VersionUsersBatchPatchOperationVersionEnum];
/**
 * @export
 */
export const VersionUsersBatchPatchOperationIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    Attachments: 'attachments',
    AwardRecords: 'award_records',
    AwardRecords2: 'award_records.*',
    AwardRecordsAward: 'award_records.award.*',
    CombatRecords: 'combat_records',
    CombatRecords2: 'combat_records.*',
    Fields: 'fields',
    Position: 'position',
    PrimaryAssignmentRecords: 'primary_assignment_records',
    PrimaryAssignmentRecords2: 'primary_assignment_records.*',
    QualificationRecords: 'qualification_records',
    QualificationRecords2: 'qualification_records.*',
    Rank: 'rank',
    Rank2: 'rank.*',
    RankRecords: 'rank_records',
    RankRecords2: 'rank_records.*',
    SecondaryAssignmentRecords: 'secondary_assignment_records',
    SecondaryAssignmentRecords2: 'secondary_assignment_records.*',
    ServiceRecords: 'service_records',
    ServiceRecords2: 'service_records.*',
    Specialty: 'specialty',
    Status: 'status',
    Unit: 'unit',
    Unit2: 'unit.*'
} as const;
export type VersionUsersBatchPatchOperationIncludeEnum = typeof VersionUsersBatchPatchOperationIncludeEnum[keyof typeof VersionUsersBatchPatchOperationIncludeEnum];
/**
 * @export
 */
export const VersionUsersBatchPostOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersBatchPostOperationVersionEnum = typeof VersionUsersBatchPostOperationVersionEnum[keyof typeof VersionUsersBatchPostOperationVersionEnum];
/**
 * @export
 */
export const VersionUsersBatchPostOperationIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    Attachments: 'attachments',
    AwardRecords: 'award_records',
    AwardRecords2: 'award_records.*',
    AwardRecordsAward: 'award_records.award.*',
    CombatRecords: 'combat_records',
    CombatRecords2: 'combat_records.*',
    Fields: 'fields',
    Position: 'position',
    PrimaryAssignmentRecords: 'primary_assignment_records',
    PrimaryAssignmentRecords2: 'primary_assignment_records.*',
    QualificationRecords: 'qualification_records',
    QualificationRecords2: 'qualification_records.*',
    Rank: 'rank',
    Rank2: 'rank.*',
    RankRecords: 'rank_records',
    RankRecords2: 'rank_records.*',
    SecondaryAssignmentRecords: 'secondary_assignment_records',
    SecondaryAssignmentRecords2: 'secondary_assignment_records.*',
    ServiceRecords: 'service_records',
    ServiceRecords2: 'service_records.*',
    Specialty: 'specialty',
    Status: 'status',
    Unit: 'unit',
    Unit2: 'unit.*'
} as const;
export type VersionUsersBatchPostOperationIncludeEnum = typeof VersionUsersBatchPostOperationIncludeEnum[keyof typeof VersionUsersBatchPostOperationIncludeEnum];
/**
 * @export
 */
export const VersionUsersGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersGetVersionEnum = typeof VersionUsersGetVersionEnum[keyof typeof VersionUsersGetVersionEnum];
/**
 * @export
 */
export const VersionUsersGetIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    Attachments: 'attachments',
    AwardRecords: 'award_records',
    AwardRecords2: 'award_records.*',
    AwardRecordsAward: 'award_records.award.*',
    CombatRecords: 'combat_records',
    CombatRecords2: 'combat_records.*',
    Fields: 'fields',
    Position: 'position',
    PrimaryAssignmentRecords: 'primary_assignment_records',
    PrimaryAssignmentRecords2: 'primary_assignment_records.*',
    QualificationRecords: 'qualification_records',
    QualificationRecords2: 'qualification_records.*',
    Rank: 'rank',
    Rank2: 'rank.*',
    RankRecords: 'rank_records',
    RankRecords2: 'rank_records.*',
    SecondaryAssignmentRecords: 'secondary_assignment_records',
    SecondaryAssignmentRecords2: 'secondary_assignment_records.*',
    ServiceRecords: 'service_records',
    ServiceRecords2: 'service_records.*',
    Specialty: 'specialty',
    Status: 'status',
    Unit: 'unit',
    Unit2: 'unit.*'
} as const;
export type VersionUsersGetIncludeEnum = typeof VersionUsersGetIncludeEnum[keyof typeof VersionUsersGetIncludeEnum];
/**
 * @export
 */
export const VersionUsersPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersPostVersionEnum = typeof VersionUsersPostVersionEnum[keyof typeof VersionUsersPostVersionEnum];
/**
 * @export
 */
export const VersionUsersPostIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    Attachments: 'attachments',
    AwardRecords: 'award_records',
    AwardRecords2: 'award_records.*',
    AwardRecordsAward: 'award_records.award.*',
    CombatRecords: 'combat_records',
    CombatRecords2: 'combat_records.*',
    Fields: 'fields',
    Position: 'position',
    PrimaryAssignmentRecords: 'primary_assignment_records',
    PrimaryAssignmentRecords2: 'primary_assignment_records.*',
    QualificationRecords: 'qualification_records',
    QualificationRecords2: 'qualification_records.*',
    Rank: 'rank',
    Rank2: 'rank.*',
    RankRecords: 'rank_records',
    RankRecords2: 'rank_records.*',
    SecondaryAssignmentRecords: 'secondary_assignment_records',
    SecondaryAssignmentRecords2: 'secondary_assignment_records.*',
    ServiceRecords: 'service_records',
    ServiceRecords2: 'service_records.*',
    Specialty: 'specialty',
    Status: 'status',
    Unit: 'unit',
    Unit2: 'unit.*'
} as const;
export type VersionUsersPostIncludeEnum = typeof VersionUsersPostIncludeEnum[keyof typeof VersionUsersPostIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserDeleteVersionEnum = typeof VersionUsersUserDeleteVersionEnum[keyof typeof VersionUsersUserDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersUserDeleteIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    Attachments: 'attachments',
    AwardRecords: 'award_records',
    AwardRecords2: 'award_records.*',
    AwardRecordsAward: 'award_records.award.*',
    CombatRecords: 'combat_records',
    CombatRecords2: 'combat_records.*',
    Fields: 'fields',
    Position: 'position',
    PrimaryAssignmentRecords: 'primary_assignment_records',
    PrimaryAssignmentRecords2: 'primary_assignment_records.*',
    QualificationRecords: 'qualification_records',
    QualificationRecords2: 'qualification_records.*',
    Rank: 'rank',
    Rank2: 'rank.*',
    RankRecords: 'rank_records',
    RankRecords2: 'rank_records.*',
    SecondaryAssignmentRecords: 'secondary_assignment_records',
    SecondaryAssignmentRecords2: 'secondary_assignment_records.*',
    ServiceRecords: 'service_records',
    ServiceRecords2: 'service_records.*',
    Specialty: 'specialty',
    Status: 'status',
    Unit: 'unit',
    Unit2: 'unit.*'
} as const;
export type VersionUsersUserDeleteIncludeEnum = typeof VersionUsersUserDeleteIncludeEnum[keyof typeof VersionUsersUserDeleteIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserGetVersionEnum = typeof VersionUsersUserGetVersionEnum[keyof typeof VersionUsersUserGetVersionEnum];
/**
 * @export
 */
export const VersionUsersUserGetIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    Attachments: 'attachments',
    AwardRecords: 'award_records',
    AwardRecords2: 'award_records.*',
    AwardRecordsAward: 'award_records.award.*',
    CombatRecords: 'combat_records',
    CombatRecords2: 'combat_records.*',
    Fields: 'fields',
    Position: 'position',
    PrimaryAssignmentRecords: 'primary_assignment_records',
    PrimaryAssignmentRecords2: 'primary_assignment_records.*',
    QualificationRecords: 'qualification_records',
    QualificationRecords2: 'qualification_records.*',
    Rank: 'rank',
    Rank2: 'rank.*',
    RankRecords: 'rank_records',
    RankRecords2: 'rank_records.*',
    SecondaryAssignmentRecords: 'secondary_assignment_records',
    SecondaryAssignmentRecords2: 'secondary_assignment_records.*',
    ServiceRecords: 'service_records',
    ServiceRecords2: 'service_records.*',
    Specialty: 'specialty',
    Status: 'status',
    Unit: 'unit',
    Unit2: 'unit.*'
} as const;
export type VersionUsersUserGetIncludeEnum = typeof VersionUsersUserGetIncludeEnum[keyof typeof VersionUsersUserGetIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserPatchVersionEnum = typeof VersionUsersUserPatchVersionEnum[keyof typeof VersionUsersUserPatchVersionEnum];
/**
 * @export
 */
export const VersionUsersUserPatchIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    Attachments: 'attachments',
    AwardRecords: 'award_records',
    AwardRecords2: 'award_records.*',
    AwardRecordsAward: 'award_records.award.*',
    CombatRecords: 'combat_records',
    CombatRecords2: 'combat_records.*',
    Fields: 'fields',
    Position: 'position',
    PrimaryAssignmentRecords: 'primary_assignment_records',
    PrimaryAssignmentRecords2: 'primary_assignment_records.*',
    QualificationRecords: 'qualification_records',
    QualificationRecords2: 'qualification_records.*',
    Rank: 'rank',
    Rank2: 'rank.*',
    RankRecords: 'rank_records',
    RankRecords2: 'rank_records.*',
    SecondaryAssignmentRecords: 'secondary_assignment_records',
    SecondaryAssignmentRecords2: 'secondary_assignment_records.*',
    ServiceRecords: 'service_records',
    ServiceRecords2: 'service_records.*',
    Specialty: 'specialty',
    Status: 'status',
    Unit: 'unit',
    Unit2: 'unit.*'
} as const;
export type VersionUsersUserPatchIncludeEnum = typeof VersionUsersUserPatchIncludeEnum[keyof typeof VersionUsersUserPatchIncludeEnum];
