/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  QualificationRecord,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
  VersionQualificationRecordsBatchPatchRequest,
  VersionQualificationRecordsBatchPost200Response,
  VersionQualificationRecordsBatchPostRequest,
  VersionQualificationRecordsGet200Response,
  VersionQualificationRecordsPost201Response,
} from '../models/index';
import {
    QualificationRecordFromJSON,
    QualificationRecordToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
    VersionQualificationRecordsBatchPatchRequestFromJSON,
    VersionQualificationRecordsBatchPatchRequestToJSON,
    VersionQualificationRecordsBatchPost200ResponseFromJSON,
    VersionQualificationRecordsBatchPost200ResponseToJSON,
    VersionQualificationRecordsBatchPostRequestFromJSON,
    VersionQualificationRecordsBatchPostRequestToJSON,
    VersionQualificationRecordsGet200ResponseFromJSON,
    VersionQualificationRecordsGet200ResponseToJSON,
    VersionQualificationRecordsPost201ResponseFromJSON,
    VersionQualificationRecordsPost201ResponseToJSON,
} from '../models/index';

export interface VersionQualificationRecordsBatchDeleteRequest {
    version: VersionQualificationRecordsBatchDeleteVersionEnum;
    include?: VersionQualificationRecordsBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionQualificationRecordsBatchPatchOperationRequest {
    version: VersionQualificationRecordsBatchPatchOperationVersionEnum;
    include?: VersionQualificationRecordsBatchPatchOperationIncludeEnum;
    versionQualificationRecordsBatchPatchRequest?: VersionQualificationRecordsBatchPatchRequest;
}

export interface VersionQualificationRecordsBatchPostOperationRequest {
    version: VersionQualificationRecordsBatchPostOperationVersionEnum;
    include?: VersionQualificationRecordsBatchPostOperationIncludeEnum;
    versionQualificationRecordsBatchPostRequest?: VersionQualificationRecordsBatchPostRequest;
}

export interface VersionQualificationRecordsGetRequest {
    version: VersionQualificationRecordsGetVersionEnum;
    include?: VersionQualificationRecordsGetIncludeEnum;
}

export interface VersionQualificationRecordsPostRequest {
    version: VersionQualificationRecordsPostVersionEnum;
    include?: VersionQualificationRecordsPostIncludeEnum;
    qualificationRecord?: QualificationRecord;
}

export interface VersionQualificationRecordsQualificationRecordDeleteRequest {
    version: VersionQualificationRecordsQualificationRecordDeleteVersionEnum;
    qualificationRecord: number;
    include?: VersionQualificationRecordsQualificationRecordDeleteIncludeEnum;
}

export interface VersionQualificationRecordsQualificationRecordGetRequest {
    version: VersionQualificationRecordsQualificationRecordGetVersionEnum;
    qualificationRecord: number;
    include?: VersionQualificationRecordsQualificationRecordGetIncludeEnum;
}

export interface VersionQualificationRecordsQualificationRecordPatchRequest {
    version: VersionQualificationRecordsQualificationRecordPatchVersionEnum;
    qualificationRecord: number;
    include?: VersionQualificationRecordsQualificationRecordPatchIncludeEnum;
    qualificationRecord2?: QualificationRecord;
}

/**
 * 
 */
export class QualificationRecordsApi extends runtime.BaseAPI {

    /**
     * Delete a batch of qualification records
     */
    async versionQualificationRecordsBatchDeleteRaw(requestParameters: VersionQualificationRecordsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionQualificationRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionQualificationRecordsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/qualification-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionQualificationRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of qualification records
     */
    async versionQualificationRecordsBatchDelete(requestParameters: VersionQualificationRecordsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionQualificationRecordsBatchPost200Response> {
        const response = await this.versionQualificationRecordsBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of qualification records
     */
    async versionQualificationRecordsBatchPatchRaw(requestParameters: VersionQualificationRecordsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionQualificationRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionQualificationRecordsBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/qualification-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionQualificationRecordsBatchPatchRequestToJSON(requestParameters['versionQualificationRecordsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionQualificationRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of qualification records
     */
    async versionQualificationRecordsBatchPatch(requestParameters: VersionQualificationRecordsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionQualificationRecordsBatchPost200Response> {
        const response = await this.versionQualificationRecordsBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of qualification records
     */
    async versionQualificationRecordsBatchPostRaw(requestParameters: VersionQualificationRecordsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionQualificationRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionQualificationRecordsBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/qualification-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionQualificationRecordsBatchPostRequestToJSON(requestParameters['versionQualificationRecordsBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionQualificationRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of qualification records
     */
    async versionQualificationRecordsBatchPost(requestParameters: VersionQualificationRecordsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionQualificationRecordsBatchPost200Response> {
        const response = await this.versionQualificationRecordsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of qualification records
     */
    async versionQualificationRecordsGetRaw(requestParameters: VersionQualificationRecordsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionQualificationRecordsGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionQualificationRecordsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/qualification-records`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionQualificationRecordsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of qualification records
     */
    async versionQualificationRecordsGet(requestParameters: VersionQualificationRecordsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionQualificationRecordsGet200Response> {
        const response = await this.versionQualificationRecordsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create qualification record
     */
    async versionQualificationRecordsPostRaw(requestParameters: VersionQualificationRecordsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionQualificationRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionQualificationRecordsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/qualification-records`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QualificationRecordToJSON(requestParameters['qualificationRecord']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionQualificationRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create qualification record
     */
    async versionQualificationRecordsPost(requestParameters: VersionQualificationRecordsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionQualificationRecordsPost201Response> {
        const response = await this.versionQualificationRecordsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete qualification record
     */
    async versionQualificationRecordsQualificationRecordDeleteRaw(requestParameters: VersionQualificationRecordsQualificationRecordDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionQualificationRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionQualificationRecordsQualificationRecordDelete().'
            );
        }

        if (requestParameters['qualificationRecord'] == null) {
            throw new runtime.RequiredError(
                'qualificationRecord',
                'Required parameter "qualificationRecord" was null or undefined when calling versionQualificationRecordsQualificationRecordDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/qualification-records/{qualification_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"qualification_record"}}`, encodeURIComponent(String(requestParameters['qualificationRecord']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionQualificationRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete qualification record
     */
    async versionQualificationRecordsQualificationRecordDelete(requestParameters: VersionQualificationRecordsQualificationRecordDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionQualificationRecordsPost201Response> {
        const response = await this.versionQualificationRecordsQualificationRecordDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get qualification record
     */
    async versionQualificationRecordsQualificationRecordGetRaw(requestParameters: VersionQualificationRecordsQualificationRecordGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionQualificationRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionQualificationRecordsQualificationRecordGet().'
            );
        }

        if (requestParameters['qualificationRecord'] == null) {
            throw new runtime.RequiredError(
                'qualificationRecord',
                'Required parameter "qualificationRecord" was null or undefined when calling versionQualificationRecordsQualificationRecordGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/qualification-records/{qualification_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"qualification_record"}}`, encodeURIComponent(String(requestParameters['qualificationRecord']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionQualificationRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get qualification record
     */
    async versionQualificationRecordsQualificationRecordGet(requestParameters: VersionQualificationRecordsQualificationRecordGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionQualificationRecordsPost201Response> {
        const response = await this.versionQualificationRecordsQualificationRecordGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update qualification record
     */
    async versionQualificationRecordsQualificationRecordPatchRaw(requestParameters: VersionQualificationRecordsQualificationRecordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionQualificationRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionQualificationRecordsQualificationRecordPatch().'
            );
        }

        if (requestParameters['qualificationRecord'] == null) {
            throw new runtime.RequiredError(
                'qualificationRecord',
                'Required parameter "qualificationRecord" was null or undefined when calling versionQualificationRecordsQualificationRecordPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/qualification-records/{qualification_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"qualification_record"}}`, encodeURIComponent(String(requestParameters['qualificationRecord']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: QualificationRecordToJSON(requestParameters['qualificationRecord2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionQualificationRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update qualification record
     */
    async versionQualificationRecordsQualificationRecordPatch(requestParameters: VersionQualificationRecordsQualificationRecordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionQualificationRecordsPost201Response> {
        const response = await this.versionQualificationRecordsQualificationRecordPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionQualificationRecordsBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionQualificationRecordsBatchDeleteVersionEnum = typeof VersionQualificationRecordsBatchDeleteVersionEnum[keyof typeof VersionQualificationRecordsBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionQualificationRecordsBatchDeleteIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Document: 'document',
    Comments: 'comments',
    Comments2: 'comments.*',
    Qualification: 'qualification',
    QualificationImage: 'qualification.image',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionQualificationRecordsBatchDeleteIncludeEnum = typeof VersionQualificationRecordsBatchDeleteIncludeEnum[keyof typeof VersionQualificationRecordsBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionQualificationRecordsBatchPatchOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionQualificationRecordsBatchPatchOperationVersionEnum = typeof VersionQualificationRecordsBatchPatchOperationVersionEnum[keyof typeof VersionQualificationRecordsBatchPatchOperationVersionEnum];
/**
 * @export
 */
export const VersionQualificationRecordsBatchPatchOperationIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Document: 'document',
    Comments: 'comments',
    Comments2: 'comments.*',
    Qualification: 'qualification',
    QualificationImage: 'qualification.image',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionQualificationRecordsBatchPatchOperationIncludeEnum = typeof VersionQualificationRecordsBatchPatchOperationIncludeEnum[keyof typeof VersionQualificationRecordsBatchPatchOperationIncludeEnum];
/**
 * @export
 */
export const VersionQualificationRecordsBatchPostOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionQualificationRecordsBatchPostOperationVersionEnum = typeof VersionQualificationRecordsBatchPostOperationVersionEnum[keyof typeof VersionQualificationRecordsBatchPostOperationVersionEnum];
/**
 * @export
 */
export const VersionQualificationRecordsBatchPostOperationIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Document: 'document',
    Comments: 'comments',
    Comments2: 'comments.*',
    Qualification: 'qualification',
    QualificationImage: 'qualification.image',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionQualificationRecordsBatchPostOperationIncludeEnum = typeof VersionQualificationRecordsBatchPostOperationIncludeEnum[keyof typeof VersionQualificationRecordsBatchPostOperationIncludeEnum];
/**
 * @export
 */
export const VersionQualificationRecordsGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionQualificationRecordsGetVersionEnum = typeof VersionQualificationRecordsGetVersionEnum[keyof typeof VersionQualificationRecordsGetVersionEnum];
/**
 * @export
 */
export const VersionQualificationRecordsGetIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Document: 'document',
    Comments: 'comments',
    Comments2: 'comments.*',
    Qualification: 'qualification',
    QualificationImage: 'qualification.image',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionQualificationRecordsGetIncludeEnum = typeof VersionQualificationRecordsGetIncludeEnum[keyof typeof VersionQualificationRecordsGetIncludeEnum];
/**
 * @export
 */
export const VersionQualificationRecordsPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionQualificationRecordsPostVersionEnum = typeof VersionQualificationRecordsPostVersionEnum[keyof typeof VersionQualificationRecordsPostVersionEnum];
/**
 * @export
 */
export const VersionQualificationRecordsPostIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Document: 'document',
    Comments: 'comments',
    Comments2: 'comments.*',
    Qualification: 'qualification',
    QualificationImage: 'qualification.image',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionQualificationRecordsPostIncludeEnum = typeof VersionQualificationRecordsPostIncludeEnum[keyof typeof VersionQualificationRecordsPostIncludeEnum];
/**
 * @export
 */
export const VersionQualificationRecordsQualificationRecordDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionQualificationRecordsQualificationRecordDeleteVersionEnum = typeof VersionQualificationRecordsQualificationRecordDeleteVersionEnum[keyof typeof VersionQualificationRecordsQualificationRecordDeleteVersionEnum];
/**
 * @export
 */
export const VersionQualificationRecordsQualificationRecordDeleteIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Document: 'document',
    Comments: 'comments',
    Comments2: 'comments.*',
    Qualification: 'qualification',
    QualificationImage: 'qualification.image',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionQualificationRecordsQualificationRecordDeleteIncludeEnum = typeof VersionQualificationRecordsQualificationRecordDeleteIncludeEnum[keyof typeof VersionQualificationRecordsQualificationRecordDeleteIncludeEnum];
/**
 * @export
 */
export const VersionQualificationRecordsQualificationRecordGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionQualificationRecordsQualificationRecordGetVersionEnum = typeof VersionQualificationRecordsQualificationRecordGetVersionEnum[keyof typeof VersionQualificationRecordsQualificationRecordGetVersionEnum];
/**
 * @export
 */
export const VersionQualificationRecordsQualificationRecordGetIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Document: 'document',
    Comments: 'comments',
    Comments2: 'comments.*',
    Qualification: 'qualification',
    QualificationImage: 'qualification.image',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionQualificationRecordsQualificationRecordGetIncludeEnum = typeof VersionQualificationRecordsQualificationRecordGetIncludeEnum[keyof typeof VersionQualificationRecordsQualificationRecordGetIncludeEnum];
/**
 * @export
 */
export const VersionQualificationRecordsQualificationRecordPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionQualificationRecordsQualificationRecordPatchVersionEnum = typeof VersionQualificationRecordsQualificationRecordPatchVersionEnum[keyof typeof VersionQualificationRecordsQualificationRecordPatchVersionEnum];
/**
 * @export
 */
export const VersionQualificationRecordsQualificationRecordPatchIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Document: 'document',
    Comments: 'comments',
    Comments2: 'comments.*',
    Qualification: 'qualification',
    QualificationImage: 'qualification.image',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionQualificationRecordsQualificationRecordPatchIncludeEnum = typeof VersionQualificationRecordsQualificationRecordPatchIncludeEnum[keyof typeof VersionQualificationRecordsQualificationRecordPatchIncludeEnum];
