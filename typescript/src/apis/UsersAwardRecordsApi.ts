/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AwardRecord,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionAwardRecordsBatchPatchRequest,
  VersionAwardRecordsBatchPost200Response,
  VersionAwardRecordsBatchPostRequest,
  VersionAwardRecordsGet200Response,
  VersionAwardRecordsPost201Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
} from '../models/index';
import {
    AwardRecordFromJSON,
    AwardRecordToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionAwardRecordsBatchPatchRequestFromJSON,
    VersionAwardRecordsBatchPatchRequestToJSON,
    VersionAwardRecordsBatchPost200ResponseFromJSON,
    VersionAwardRecordsBatchPost200ResponseToJSON,
    VersionAwardRecordsBatchPostRequestFromJSON,
    VersionAwardRecordsBatchPostRequestToJSON,
    VersionAwardRecordsGet200ResponseFromJSON,
    VersionAwardRecordsGet200ResponseToJSON,
    VersionAwardRecordsPost201ResponseFromJSON,
    VersionAwardRecordsPost201ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
} from '../models/index';

export interface VersionUsersUserAwardRecordsAssociatePostRequest {
    version: VersionUsersUserAwardRecordsAssociatePostVersionEnum;
    user: number;
    include?: VersionUsersUserAwardRecordsAssociatePostIncludeEnum;
}

export interface VersionUsersUserAwardRecordsAwardRecordDeleteRequest {
    version: VersionUsersUserAwardRecordsAwardRecordDeleteVersionEnum;
    user: number;
    awardRecord: number;
    include?: VersionUsersUserAwardRecordsAwardRecordDeleteIncludeEnum;
}

export interface VersionUsersUserAwardRecordsAwardRecordDissociateDeleteRequest {
    version: VersionUsersUserAwardRecordsAwardRecordDissociateDeleteVersionEnum;
    user: number;
    awardRecord: number;
    include?: VersionUsersUserAwardRecordsAwardRecordDissociateDeleteIncludeEnum;
}

export interface VersionUsersUserAwardRecordsAwardRecordGetRequest {
    version: VersionUsersUserAwardRecordsAwardRecordGetVersionEnum;
    user: number;
    awardRecord: number;
    include?: VersionUsersUserAwardRecordsAwardRecordGetIncludeEnum;
}

export interface VersionUsersUserAwardRecordsAwardRecordPatchRequest {
    version: VersionUsersUserAwardRecordsAwardRecordPatchVersionEnum;
    user: number;
    awardRecord: number;
    include?: VersionUsersUserAwardRecordsAwardRecordPatchIncludeEnum;
    awardRecord2?: AwardRecord;
}

export interface VersionUsersUserAwardRecordsBatchDeleteRequest {
    version: VersionUsersUserAwardRecordsBatchDeleteVersionEnum;
    user: number;
    include?: VersionUsersUserAwardRecordsBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionUsersUserAwardRecordsBatchPatchRequest {
    version: VersionUsersUserAwardRecordsBatchPatchVersionEnum;
    user: number;
    include?: VersionUsersUserAwardRecordsBatchPatchIncludeEnum;
    versionAwardRecordsBatchPatchRequest?: VersionAwardRecordsBatchPatchRequest;
}

export interface VersionUsersUserAwardRecordsBatchPostRequest {
    version: VersionUsersUserAwardRecordsBatchPostVersionEnum;
    user: number;
    include?: VersionUsersUserAwardRecordsBatchPostIncludeEnum;
    versionAwardRecordsBatchPostRequest?: VersionAwardRecordsBatchPostRequest;
}

export interface VersionUsersUserAwardRecordsGetRequest {
    version: VersionUsersUserAwardRecordsGetVersionEnum;
    user: number;
    include?: VersionUsersUserAwardRecordsGetIncludeEnum;
}

export interface VersionUsersUserAwardRecordsPostRequest {
    version: VersionUsersUserAwardRecordsPostVersionEnum;
    user: number;
    include?: VersionUsersUserAwardRecordsPostIncludeEnum;
    awardRecord?: AwardRecord;
}

/**
 * 
 */
export class UsersAwardRecordsApi extends runtime.BaseAPI {

    /**
     * Associate award record with user
     */
    async versionUsersUserAwardRecordsAssociatePostRaw(requestParameters: VersionUsersUserAwardRecordsAssociatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserAwardRecordsAssociatePost().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserAwardRecordsAssociatePost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/award-records/associate`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Associate award record with user
     */
    async versionUsersUserAwardRecordsAssociatePost(requestParameters: VersionUsersUserAwardRecordsAssociatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardRecordsPost201Response> {
        const response = await this.versionUsersUserAwardRecordsAssociatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete award record
     */
    async versionUsersUserAwardRecordsAwardRecordDeleteRaw(requestParameters: VersionUsersUserAwardRecordsAwardRecordDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserAwardRecordsAwardRecordDelete().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserAwardRecordsAwardRecordDelete().'
            );
        }

        if (requestParameters['awardRecord'] == null) {
            throw new runtime.RequiredError(
                'awardRecord',
                'Required parameter "awardRecord" was null or undefined when calling versionUsersUserAwardRecordsAwardRecordDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/award-records/{award_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"award_record"}}`, encodeURIComponent(String(requestParameters['awardRecord']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete award record
     */
    async versionUsersUserAwardRecordsAwardRecordDelete(requestParameters: VersionUsersUserAwardRecordsAwardRecordDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardRecordsPost201Response> {
        const response = await this.versionUsersUserAwardRecordsAwardRecordDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Dissociate award record from user
     */
    async versionUsersUserAwardRecordsAwardRecordDissociateDeleteRaw(requestParameters: VersionUsersUserAwardRecordsAwardRecordDissociateDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserAwardRecordsAwardRecordDissociateDelete().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserAwardRecordsAwardRecordDissociateDelete().'
            );
        }

        if (requestParameters['awardRecord'] == null) {
            throw new runtime.RequiredError(
                'awardRecord',
                'Required parameter "awardRecord" was null or undefined when calling versionUsersUserAwardRecordsAwardRecordDissociateDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/award-records/{award_record}/dissociate`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"award_record"}}`, encodeURIComponent(String(requestParameters['awardRecord']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Dissociate award record from user
     */
    async versionUsersUserAwardRecordsAwardRecordDissociateDelete(requestParameters: VersionUsersUserAwardRecordsAwardRecordDissociateDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardRecordsPost201Response> {
        const response = await this.versionUsersUserAwardRecordsAwardRecordDissociateDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get award record
     */
    async versionUsersUserAwardRecordsAwardRecordGetRaw(requestParameters: VersionUsersUserAwardRecordsAwardRecordGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserAwardRecordsAwardRecordGet().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserAwardRecordsAwardRecordGet().'
            );
        }

        if (requestParameters['awardRecord'] == null) {
            throw new runtime.RequiredError(
                'awardRecord',
                'Required parameter "awardRecord" was null or undefined when calling versionUsersUserAwardRecordsAwardRecordGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/award-records/{award_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"award_record"}}`, encodeURIComponent(String(requestParameters['awardRecord']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get award record
     */
    async versionUsersUserAwardRecordsAwardRecordGet(requestParameters: VersionUsersUserAwardRecordsAwardRecordGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardRecordsPost201Response> {
        const response = await this.versionUsersUserAwardRecordsAwardRecordGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update award record
     */
    async versionUsersUserAwardRecordsAwardRecordPatchRaw(requestParameters: VersionUsersUserAwardRecordsAwardRecordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserAwardRecordsAwardRecordPatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserAwardRecordsAwardRecordPatch().'
            );
        }

        if (requestParameters['awardRecord'] == null) {
            throw new runtime.RequiredError(
                'awardRecord',
                'Required parameter "awardRecord" was null or undefined when calling versionUsersUserAwardRecordsAwardRecordPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/award-records/{award_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"award_record"}}`, encodeURIComponent(String(requestParameters['awardRecord']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AwardRecordToJSON(requestParameters['awardRecord2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update award record
     */
    async versionUsersUserAwardRecordsAwardRecordPatch(requestParameters: VersionUsersUserAwardRecordsAwardRecordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardRecordsPost201Response> {
        const response = await this.versionUsersUserAwardRecordsAwardRecordPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a batch of award records
     */
    async versionUsersUserAwardRecordsBatchDeleteRaw(requestParameters: VersionUsersUserAwardRecordsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserAwardRecordsBatchDelete().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserAwardRecordsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/award-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of award records
     */
    async versionUsersUserAwardRecordsBatchDelete(requestParameters: VersionUsersUserAwardRecordsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardRecordsBatchPost200Response> {
        const response = await this.versionUsersUserAwardRecordsBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of award records
     */
    async versionUsersUserAwardRecordsBatchPatchRaw(requestParameters: VersionUsersUserAwardRecordsBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserAwardRecordsBatchPatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserAwardRecordsBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/award-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAwardRecordsBatchPatchRequestToJSON(requestParameters['versionAwardRecordsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of award records
     */
    async versionUsersUserAwardRecordsBatchPatch(requestParameters: VersionUsersUserAwardRecordsBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardRecordsBatchPost200Response> {
        const response = await this.versionUsersUserAwardRecordsBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of award records
     */
    async versionUsersUserAwardRecordsBatchPostRaw(requestParameters: VersionUsersUserAwardRecordsBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserAwardRecordsBatchPost().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserAwardRecordsBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/award-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAwardRecordsBatchPostRequestToJSON(requestParameters['versionAwardRecordsBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of award records
     */
    async versionUsersUserAwardRecordsBatchPost(requestParameters: VersionUsersUserAwardRecordsBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardRecordsBatchPost200Response> {
        const response = await this.versionUsersUserAwardRecordsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of award records
     */
    async versionUsersUserAwardRecordsGetRaw(requestParameters: VersionUsersUserAwardRecordsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardRecordsGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserAwardRecordsGet().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserAwardRecordsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/award-records`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardRecordsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of award records
     */
    async versionUsersUserAwardRecordsGet(requestParameters: VersionUsersUserAwardRecordsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardRecordsGet200Response> {
        const response = await this.versionUsersUserAwardRecordsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create award record
     */
    async versionUsersUserAwardRecordsPostRaw(requestParameters: VersionUsersUserAwardRecordsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserAwardRecordsPost().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserAwardRecordsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/award-records`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwardRecordToJSON(requestParameters['awardRecord']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create award record
     */
    async versionUsersUserAwardRecordsPost(requestParameters: VersionUsersUserAwardRecordsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardRecordsPost201Response> {
        const response = await this.versionUsersUserAwardRecordsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionUsersUserAwardRecordsAssociatePostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserAwardRecordsAssociatePostVersionEnum = typeof VersionUsersUserAwardRecordsAssociatePostVersionEnum[keyof typeof VersionUsersUserAwardRecordsAssociatePostVersionEnum];
/**
 * @export
 */
export const VersionUsersUserAwardRecordsAssociatePostIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Award: 'award',
    AwardImage: 'award.image',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document'
} as const;
export type VersionUsersUserAwardRecordsAssociatePostIncludeEnum = typeof VersionUsersUserAwardRecordsAssociatePostIncludeEnum[keyof typeof VersionUsersUserAwardRecordsAssociatePostIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserAwardRecordsAwardRecordDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserAwardRecordsAwardRecordDeleteVersionEnum = typeof VersionUsersUserAwardRecordsAwardRecordDeleteVersionEnum[keyof typeof VersionUsersUserAwardRecordsAwardRecordDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersUserAwardRecordsAwardRecordDeleteIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Award: 'award',
    AwardImage: 'award.image',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document'
} as const;
export type VersionUsersUserAwardRecordsAwardRecordDeleteIncludeEnum = typeof VersionUsersUserAwardRecordsAwardRecordDeleteIncludeEnum[keyof typeof VersionUsersUserAwardRecordsAwardRecordDeleteIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserAwardRecordsAwardRecordDissociateDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserAwardRecordsAwardRecordDissociateDeleteVersionEnum = typeof VersionUsersUserAwardRecordsAwardRecordDissociateDeleteVersionEnum[keyof typeof VersionUsersUserAwardRecordsAwardRecordDissociateDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersUserAwardRecordsAwardRecordDissociateDeleteIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Award: 'award',
    AwardImage: 'award.image',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document'
} as const;
export type VersionUsersUserAwardRecordsAwardRecordDissociateDeleteIncludeEnum = typeof VersionUsersUserAwardRecordsAwardRecordDissociateDeleteIncludeEnum[keyof typeof VersionUsersUserAwardRecordsAwardRecordDissociateDeleteIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserAwardRecordsAwardRecordGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserAwardRecordsAwardRecordGetVersionEnum = typeof VersionUsersUserAwardRecordsAwardRecordGetVersionEnum[keyof typeof VersionUsersUserAwardRecordsAwardRecordGetVersionEnum];
/**
 * @export
 */
export const VersionUsersUserAwardRecordsAwardRecordGetIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Award: 'award',
    AwardImage: 'award.image',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document'
} as const;
export type VersionUsersUserAwardRecordsAwardRecordGetIncludeEnum = typeof VersionUsersUserAwardRecordsAwardRecordGetIncludeEnum[keyof typeof VersionUsersUserAwardRecordsAwardRecordGetIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserAwardRecordsAwardRecordPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserAwardRecordsAwardRecordPatchVersionEnum = typeof VersionUsersUserAwardRecordsAwardRecordPatchVersionEnum[keyof typeof VersionUsersUserAwardRecordsAwardRecordPatchVersionEnum];
/**
 * @export
 */
export const VersionUsersUserAwardRecordsAwardRecordPatchIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Award: 'award',
    AwardImage: 'award.image',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document'
} as const;
export type VersionUsersUserAwardRecordsAwardRecordPatchIncludeEnum = typeof VersionUsersUserAwardRecordsAwardRecordPatchIncludeEnum[keyof typeof VersionUsersUserAwardRecordsAwardRecordPatchIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserAwardRecordsBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserAwardRecordsBatchDeleteVersionEnum = typeof VersionUsersUserAwardRecordsBatchDeleteVersionEnum[keyof typeof VersionUsersUserAwardRecordsBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersUserAwardRecordsBatchDeleteIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Award: 'award',
    AwardImage: 'award.image',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document'
} as const;
export type VersionUsersUserAwardRecordsBatchDeleteIncludeEnum = typeof VersionUsersUserAwardRecordsBatchDeleteIncludeEnum[keyof typeof VersionUsersUserAwardRecordsBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserAwardRecordsBatchPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserAwardRecordsBatchPatchVersionEnum = typeof VersionUsersUserAwardRecordsBatchPatchVersionEnum[keyof typeof VersionUsersUserAwardRecordsBatchPatchVersionEnum];
/**
 * @export
 */
export const VersionUsersUserAwardRecordsBatchPatchIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Award: 'award',
    AwardImage: 'award.image',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document'
} as const;
export type VersionUsersUserAwardRecordsBatchPatchIncludeEnum = typeof VersionUsersUserAwardRecordsBatchPatchIncludeEnum[keyof typeof VersionUsersUserAwardRecordsBatchPatchIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserAwardRecordsBatchPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserAwardRecordsBatchPostVersionEnum = typeof VersionUsersUserAwardRecordsBatchPostVersionEnum[keyof typeof VersionUsersUserAwardRecordsBatchPostVersionEnum];
/**
 * @export
 */
export const VersionUsersUserAwardRecordsBatchPostIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Award: 'award',
    AwardImage: 'award.image',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document'
} as const;
export type VersionUsersUserAwardRecordsBatchPostIncludeEnum = typeof VersionUsersUserAwardRecordsBatchPostIncludeEnum[keyof typeof VersionUsersUserAwardRecordsBatchPostIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserAwardRecordsGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserAwardRecordsGetVersionEnum = typeof VersionUsersUserAwardRecordsGetVersionEnum[keyof typeof VersionUsersUserAwardRecordsGetVersionEnum];
/**
 * @export
 */
export const VersionUsersUserAwardRecordsGetIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Award: 'award',
    AwardImage: 'award.image',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document'
} as const;
export type VersionUsersUserAwardRecordsGetIncludeEnum = typeof VersionUsersUserAwardRecordsGetIncludeEnum[keyof typeof VersionUsersUserAwardRecordsGetIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserAwardRecordsPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserAwardRecordsPostVersionEnum = typeof VersionUsersUserAwardRecordsPostVersionEnum[keyof typeof VersionUsersUserAwardRecordsPostVersionEnum];
/**
 * @export
 */
export const VersionUsersUserAwardRecordsPostIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Award: 'award',
    AwardImage: 'award.image',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document'
} as const;
export type VersionUsersUserAwardRecordsPostIncludeEnum = typeof VersionUsersUserAwardRecordsPostIncludeEnum[keyof typeof VersionUsersUserAwardRecordsPostIncludeEnum];
