/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Calendar,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionCalendarsBatchPatchRequest,
  VersionCalendarsBatchPost200Response,
  VersionCalendarsBatchPostRequest,
  VersionCalendarsGet200Response,
  VersionCalendarsPost201Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
} from '../models/index';
import {
    CalendarFromJSON,
    CalendarToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionCalendarsBatchPatchRequestFromJSON,
    VersionCalendarsBatchPatchRequestToJSON,
    VersionCalendarsBatchPost200ResponseFromJSON,
    VersionCalendarsBatchPost200ResponseToJSON,
    VersionCalendarsBatchPostRequestFromJSON,
    VersionCalendarsBatchPostRequestToJSON,
    VersionCalendarsGet200ResponseFromJSON,
    VersionCalendarsGet200ResponseToJSON,
    VersionCalendarsPost201ResponseFromJSON,
    VersionCalendarsPost201ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
} from '../models/index';

export interface VersionCalendarsBatchDeleteRequest {
    version: VersionCalendarsBatchDeleteVersionEnum;
    include?: VersionCalendarsBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionCalendarsBatchPatchOperationRequest {
    version: VersionCalendarsBatchPatchOperationVersionEnum;
    include?: VersionCalendarsBatchPatchOperationIncludeEnum;
    versionCalendarsBatchPatchRequest?: VersionCalendarsBatchPatchRequest;
}

export interface VersionCalendarsBatchPostOperationRequest {
    version: VersionCalendarsBatchPostOperationVersionEnum;
    include?: VersionCalendarsBatchPostOperationIncludeEnum;
    versionCalendarsBatchPostRequest?: VersionCalendarsBatchPostRequest;
}

export interface VersionCalendarsCalendarDeleteRequest {
    version: VersionCalendarsCalendarDeleteVersionEnum;
    calendar: number;
    include?: VersionCalendarsCalendarDeleteIncludeEnum;
}

export interface VersionCalendarsCalendarGetRequest {
    version: VersionCalendarsCalendarGetVersionEnum;
    calendar: number;
    include?: VersionCalendarsCalendarGetIncludeEnum;
}

export interface VersionCalendarsCalendarPatchRequest {
    version: VersionCalendarsCalendarPatchVersionEnum;
    calendar: number;
    include?: VersionCalendarsCalendarPatchIncludeEnum;
    calendar2?: Calendar;
}

export interface VersionCalendarsGetRequest {
    version: VersionCalendarsGetVersionEnum;
    include?: VersionCalendarsGetIncludeEnum;
}

export interface VersionCalendarsPostRequest {
    version: VersionCalendarsPostVersionEnum;
    include?: VersionCalendarsPostIncludeEnum;
    calendar?: Calendar;
}

/**
 * 
 */
export class CalendarsApi extends runtime.BaseAPI {

    /**
     * Delete a batch of calendars
     */
    async versionCalendarsBatchDeleteRaw(requestParameters: VersionCalendarsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCalendarsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCalendarsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/calendars/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCalendarsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of calendars
     */
    async versionCalendarsBatchDelete(requestParameters: VersionCalendarsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCalendarsBatchPost200Response> {
        const response = await this.versionCalendarsBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of calendars
     */
    async versionCalendarsBatchPatchRaw(requestParameters: VersionCalendarsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCalendarsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCalendarsBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/calendars/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCalendarsBatchPatchRequestToJSON(requestParameters['versionCalendarsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCalendarsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of calendars
     */
    async versionCalendarsBatchPatch(requestParameters: VersionCalendarsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCalendarsBatchPost200Response> {
        const response = await this.versionCalendarsBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of calendars
     */
    async versionCalendarsBatchPostRaw(requestParameters: VersionCalendarsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCalendarsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCalendarsBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/calendars/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCalendarsBatchPostRequestToJSON(requestParameters['versionCalendarsBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCalendarsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of calendars
     */
    async versionCalendarsBatchPost(requestParameters: VersionCalendarsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCalendarsBatchPost200Response> {
        const response = await this.versionCalendarsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete calendar
     */
    async versionCalendarsCalendarDeleteRaw(requestParameters: VersionCalendarsCalendarDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCalendarsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCalendarsCalendarDelete().'
            );
        }

        if (requestParameters['calendar'] == null) {
            throw new runtime.RequiredError(
                'calendar',
                'Required parameter "calendar" was null or undefined when calling versionCalendarsCalendarDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/calendars/{calendar}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"calendar"}}`, encodeURIComponent(String(requestParameters['calendar']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCalendarsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete calendar
     */
    async versionCalendarsCalendarDelete(requestParameters: VersionCalendarsCalendarDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCalendarsPost201Response> {
        const response = await this.versionCalendarsCalendarDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get calendar
     */
    async versionCalendarsCalendarGetRaw(requestParameters: VersionCalendarsCalendarGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCalendarsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCalendarsCalendarGet().'
            );
        }

        if (requestParameters['calendar'] == null) {
            throw new runtime.RequiredError(
                'calendar',
                'Required parameter "calendar" was null or undefined when calling versionCalendarsCalendarGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/calendars/{calendar}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"calendar"}}`, encodeURIComponent(String(requestParameters['calendar']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCalendarsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get calendar
     */
    async versionCalendarsCalendarGet(requestParameters: VersionCalendarsCalendarGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCalendarsPost201Response> {
        const response = await this.versionCalendarsCalendarGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update calendar
     */
    async versionCalendarsCalendarPatchRaw(requestParameters: VersionCalendarsCalendarPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCalendarsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCalendarsCalendarPatch().'
            );
        }

        if (requestParameters['calendar'] == null) {
            throw new runtime.RequiredError(
                'calendar',
                'Required parameter "calendar" was null or undefined when calling versionCalendarsCalendarPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/calendars/{calendar}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"calendar"}}`, encodeURIComponent(String(requestParameters['calendar']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CalendarToJSON(requestParameters['calendar2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCalendarsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update calendar
     */
    async versionCalendarsCalendarPatch(requestParameters: VersionCalendarsCalendarPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCalendarsPost201Response> {
        const response = await this.versionCalendarsCalendarPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of calendars
     */
    async versionCalendarsGetRaw(requestParameters: VersionCalendarsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCalendarsGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCalendarsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/calendars`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCalendarsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of calendars
     */
    async versionCalendarsGet(requestParameters: VersionCalendarsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCalendarsGet200Response> {
        const response = await this.versionCalendarsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create calendar
     */
    async versionCalendarsPostRaw(requestParameters: VersionCalendarsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCalendarsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCalendarsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/calendars`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CalendarToJSON(requestParameters['calendar']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCalendarsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create calendar
     */
    async versionCalendarsPost(requestParameters: VersionCalendarsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCalendarsPost201Response> {
        const response = await this.versionCalendarsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionCalendarsBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCalendarsBatchDeleteVersionEnum = typeof VersionCalendarsBatchDeleteVersionEnum[keyof typeof VersionCalendarsBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionCalendarsBatchDeleteIncludeEnum = {
    Events: 'events',
    EventsAuthor: 'events.author',
    Tags: 'tags'
} as const;
export type VersionCalendarsBatchDeleteIncludeEnum = typeof VersionCalendarsBatchDeleteIncludeEnum[keyof typeof VersionCalendarsBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionCalendarsBatchPatchOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCalendarsBatchPatchOperationVersionEnum = typeof VersionCalendarsBatchPatchOperationVersionEnum[keyof typeof VersionCalendarsBatchPatchOperationVersionEnum];
/**
 * @export
 */
export const VersionCalendarsBatchPatchOperationIncludeEnum = {
    Events: 'events',
    EventsAuthor: 'events.author',
    Tags: 'tags'
} as const;
export type VersionCalendarsBatchPatchOperationIncludeEnum = typeof VersionCalendarsBatchPatchOperationIncludeEnum[keyof typeof VersionCalendarsBatchPatchOperationIncludeEnum];
/**
 * @export
 */
export const VersionCalendarsBatchPostOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCalendarsBatchPostOperationVersionEnum = typeof VersionCalendarsBatchPostOperationVersionEnum[keyof typeof VersionCalendarsBatchPostOperationVersionEnum];
/**
 * @export
 */
export const VersionCalendarsBatchPostOperationIncludeEnum = {
    Events: 'events',
    EventsAuthor: 'events.author',
    Tags: 'tags'
} as const;
export type VersionCalendarsBatchPostOperationIncludeEnum = typeof VersionCalendarsBatchPostOperationIncludeEnum[keyof typeof VersionCalendarsBatchPostOperationIncludeEnum];
/**
 * @export
 */
export const VersionCalendarsCalendarDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCalendarsCalendarDeleteVersionEnum = typeof VersionCalendarsCalendarDeleteVersionEnum[keyof typeof VersionCalendarsCalendarDeleteVersionEnum];
/**
 * @export
 */
export const VersionCalendarsCalendarDeleteIncludeEnum = {
    Events: 'events',
    EventsAuthor: 'events.author',
    Tags: 'tags'
} as const;
export type VersionCalendarsCalendarDeleteIncludeEnum = typeof VersionCalendarsCalendarDeleteIncludeEnum[keyof typeof VersionCalendarsCalendarDeleteIncludeEnum];
/**
 * @export
 */
export const VersionCalendarsCalendarGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCalendarsCalendarGetVersionEnum = typeof VersionCalendarsCalendarGetVersionEnum[keyof typeof VersionCalendarsCalendarGetVersionEnum];
/**
 * @export
 */
export const VersionCalendarsCalendarGetIncludeEnum = {
    Events: 'events',
    EventsAuthor: 'events.author',
    Tags: 'tags'
} as const;
export type VersionCalendarsCalendarGetIncludeEnum = typeof VersionCalendarsCalendarGetIncludeEnum[keyof typeof VersionCalendarsCalendarGetIncludeEnum];
/**
 * @export
 */
export const VersionCalendarsCalendarPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCalendarsCalendarPatchVersionEnum = typeof VersionCalendarsCalendarPatchVersionEnum[keyof typeof VersionCalendarsCalendarPatchVersionEnum];
/**
 * @export
 */
export const VersionCalendarsCalendarPatchIncludeEnum = {
    Events: 'events',
    EventsAuthor: 'events.author',
    Tags: 'tags'
} as const;
export type VersionCalendarsCalendarPatchIncludeEnum = typeof VersionCalendarsCalendarPatchIncludeEnum[keyof typeof VersionCalendarsCalendarPatchIncludeEnum];
/**
 * @export
 */
export const VersionCalendarsGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCalendarsGetVersionEnum = typeof VersionCalendarsGetVersionEnum[keyof typeof VersionCalendarsGetVersionEnum];
/**
 * @export
 */
export const VersionCalendarsGetIncludeEnum = {
    Events: 'events',
    EventsAuthor: 'events.author',
    Tags: 'tags'
} as const;
export type VersionCalendarsGetIncludeEnum = typeof VersionCalendarsGetIncludeEnum[keyof typeof VersionCalendarsGetIncludeEnum];
/**
 * @export
 */
export const VersionCalendarsPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCalendarsPostVersionEnum = typeof VersionCalendarsPostVersionEnum[keyof typeof VersionCalendarsPostVersionEnum];
/**
 * @export
 */
export const VersionCalendarsPostIncludeEnum = {
    Events: 'events',
    EventsAuthor: 'events.author',
    Tags: 'tags'
} as const;
export type VersionCalendarsPostIncludeEnum = typeof VersionCalendarsPostIncludeEnum[keyof typeof VersionCalendarsPostIncludeEnum];
