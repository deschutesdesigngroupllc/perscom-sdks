/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Image,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionAwardsAwardImagePost201Response,
  VersionEventsEventImageBatchPatchRequest,
  VersionEventsEventImageBatchPost200Response,
  VersionEventsEventImageBatchPostRequest,
  VersionEventsEventImageGet200Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
} from '../models/index';
import {
    ImageFromJSON,
    ImageToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionAwardsAwardImagePost201ResponseFromJSON,
    VersionAwardsAwardImagePost201ResponseToJSON,
    VersionEventsEventImageBatchPatchRequestFromJSON,
    VersionEventsEventImageBatchPatchRequestToJSON,
    VersionEventsEventImageBatchPost200ResponseFromJSON,
    VersionEventsEventImageBatchPost200ResponseToJSON,
    VersionEventsEventImageBatchPostRequestFromJSON,
    VersionEventsEventImageBatchPostRequestToJSON,
    VersionEventsEventImageGet200ResponseFromJSON,
    VersionEventsEventImageGet200ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
} from '../models/index';

export interface VersionImagesBatchDeleteRequest {
    version: VersionImagesBatchDeleteVersionEnum;
    include?: VersionImagesBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionImagesBatchPatchRequest {
    version: VersionImagesBatchPatchVersionEnum;
    include?: VersionImagesBatchPatchIncludeEnum;
    versionEventsEventImageBatchPatchRequest?: VersionEventsEventImageBatchPatchRequest;
}

export interface VersionImagesBatchPostRequest {
    version: VersionImagesBatchPostVersionEnum;
    include?: VersionImagesBatchPostIncludeEnum;
    versionEventsEventImageBatchPostRequest?: VersionEventsEventImageBatchPostRequest;
}

export interface VersionImagesGetRequest {
    version: VersionImagesGetVersionEnum;
    include?: VersionImagesGetIncludeEnum;
}

export interface VersionImagesImageDeleteRequest {
    version: VersionImagesImageDeleteVersionEnum;
    image: number;
    include?: VersionImagesImageDeleteIncludeEnum;
}

export interface VersionImagesImageGetRequest {
    version: VersionImagesImageGetVersionEnum;
    image: number;
    include?: VersionImagesImageGetIncludeEnum;
}

export interface VersionImagesImagePatchRequest {
    version: VersionImagesImagePatchVersionEnum;
    image: number;
    include?: VersionImagesImagePatchIncludeEnum;
    image2?: Omit<Image, 'filename'|'path'|'image_url'>;
}

export interface VersionImagesPostRequest {
    version: VersionImagesPostVersionEnum;
    include?: VersionImagesPostIncludeEnum;
    image?: Omit<Image, 'filename'|'path'|'image_url'>;
}

/**
 * 
 */
export class ImagesApi extends runtime.BaseAPI {

    /**
     * Delete a batch of images
     */
    async versionImagesBatchDeleteRaw(requestParameters: VersionImagesBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionEventsEventImageBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionImagesBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/images/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionEventsEventImageBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of images
     */
    async versionImagesBatchDelete(requestParameters: VersionImagesBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionEventsEventImageBatchPost200Response> {
        const response = await this.versionImagesBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of images
     */
    async versionImagesBatchPatchRaw(requestParameters: VersionImagesBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionEventsEventImageBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionImagesBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/images/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionEventsEventImageBatchPatchRequestToJSON(requestParameters['versionEventsEventImageBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionEventsEventImageBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of images
     */
    async versionImagesBatchPatch(requestParameters: VersionImagesBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionEventsEventImageBatchPost200Response> {
        const response = await this.versionImagesBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of images
     */
    async versionImagesBatchPostRaw(requestParameters: VersionImagesBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionEventsEventImageBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionImagesBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/images/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionEventsEventImageBatchPostRequestToJSON(requestParameters['versionEventsEventImageBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionEventsEventImageBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of images
     */
    async versionImagesBatchPost(requestParameters: VersionImagesBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionEventsEventImageBatchPost200Response> {
        const response = await this.versionImagesBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of images
     */
    async versionImagesGetRaw(requestParameters: VersionImagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionEventsEventImageGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionImagesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/images`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionEventsEventImageGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of images
     */
    async versionImagesGet(requestParameters: VersionImagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionEventsEventImageGet200Response> {
        const response = await this.versionImagesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete image
     */
    async versionImagesImageDeleteRaw(requestParameters: VersionImagesImageDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardsAwardImagePost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionImagesImageDelete().'
            );
        }

        if (requestParameters['image'] == null) {
            throw new runtime.RequiredError(
                'image',
                'Required parameter "image" was null or undefined when calling versionImagesImageDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/images/{image}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"image"}}`, encodeURIComponent(String(requestParameters['image']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardsAwardImagePost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete image
     */
    async versionImagesImageDelete(requestParameters: VersionImagesImageDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardsAwardImagePost201Response> {
        const response = await this.versionImagesImageDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get image
     */
    async versionImagesImageGetRaw(requestParameters: VersionImagesImageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardsAwardImagePost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionImagesImageGet().'
            );
        }

        if (requestParameters['image'] == null) {
            throw new runtime.RequiredError(
                'image',
                'Required parameter "image" was null or undefined when calling versionImagesImageGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/images/{image}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"image"}}`, encodeURIComponent(String(requestParameters['image']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardsAwardImagePost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get image
     */
    async versionImagesImageGet(requestParameters: VersionImagesImageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardsAwardImagePost201Response> {
        const response = await this.versionImagesImageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update image
     */
    async versionImagesImagePatchRaw(requestParameters: VersionImagesImagePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardsAwardImagePost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionImagesImagePatch().'
            );
        }

        if (requestParameters['image'] == null) {
            throw new runtime.RequiredError(
                'image',
                'Required parameter "image" was null or undefined when calling versionImagesImagePatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/images/{image}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"image"}}`, encodeURIComponent(String(requestParameters['image']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ImageToJSON(requestParameters['image2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardsAwardImagePost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update image
     */
    async versionImagesImagePatch(requestParameters: VersionImagesImagePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardsAwardImagePost201Response> {
        const response = await this.versionImagesImagePatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create image
     */
    async versionImagesPostRaw(requestParameters: VersionImagesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardsAwardImagePost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionImagesPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/images`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImageToJSON(requestParameters['image']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardsAwardImagePost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create image
     */
    async versionImagesPost(requestParameters: VersionImagesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardsAwardImagePost201Response> {
        const response = await this.versionImagesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionImagesBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionImagesBatchDeleteVersionEnum = typeof VersionImagesBatchDeleteVersionEnum[keyof typeof VersionImagesBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionImagesBatchDeleteIncludeEnum = {
    Model: 'model'
} as const;
export type VersionImagesBatchDeleteIncludeEnum = typeof VersionImagesBatchDeleteIncludeEnum[keyof typeof VersionImagesBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionImagesBatchPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionImagesBatchPatchVersionEnum = typeof VersionImagesBatchPatchVersionEnum[keyof typeof VersionImagesBatchPatchVersionEnum];
/**
 * @export
 */
export const VersionImagesBatchPatchIncludeEnum = {
    Model: 'model'
} as const;
export type VersionImagesBatchPatchIncludeEnum = typeof VersionImagesBatchPatchIncludeEnum[keyof typeof VersionImagesBatchPatchIncludeEnum];
/**
 * @export
 */
export const VersionImagesBatchPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionImagesBatchPostVersionEnum = typeof VersionImagesBatchPostVersionEnum[keyof typeof VersionImagesBatchPostVersionEnum];
/**
 * @export
 */
export const VersionImagesBatchPostIncludeEnum = {
    Model: 'model'
} as const;
export type VersionImagesBatchPostIncludeEnum = typeof VersionImagesBatchPostIncludeEnum[keyof typeof VersionImagesBatchPostIncludeEnum];
/**
 * @export
 */
export const VersionImagesGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionImagesGetVersionEnum = typeof VersionImagesGetVersionEnum[keyof typeof VersionImagesGetVersionEnum];
/**
 * @export
 */
export const VersionImagesGetIncludeEnum = {
    Model: 'model'
} as const;
export type VersionImagesGetIncludeEnum = typeof VersionImagesGetIncludeEnum[keyof typeof VersionImagesGetIncludeEnum];
/**
 * @export
 */
export const VersionImagesImageDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionImagesImageDeleteVersionEnum = typeof VersionImagesImageDeleteVersionEnum[keyof typeof VersionImagesImageDeleteVersionEnum];
/**
 * @export
 */
export const VersionImagesImageDeleteIncludeEnum = {
    Model: 'model'
} as const;
export type VersionImagesImageDeleteIncludeEnum = typeof VersionImagesImageDeleteIncludeEnum[keyof typeof VersionImagesImageDeleteIncludeEnum];
/**
 * @export
 */
export const VersionImagesImageGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionImagesImageGetVersionEnum = typeof VersionImagesImageGetVersionEnum[keyof typeof VersionImagesImageGetVersionEnum];
/**
 * @export
 */
export const VersionImagesImageGetIncludeEnum = {
    Model: 'model'
} as const;
export type VersionImagesImageGetIncludeEnum = typeof VersionImagesImageGetIncludeEnum[keyof typeof VersionImagesImageGetIncludeEnum];
/**
 * @export
 */
export const VersionImagesImagePatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionImagesImagePatchVersionEnum = typeof VersionImagesImagePatchVersionEnum[keyof typeof VersionImagesImagePatchVersionEnum];
/**
 * @export
 */
export const VersionImagesImagePatchIncludeEnum = {
    Model: 'model'
} as const;
export type VersionImagesImagePatchIncludeEnum = typeof VersionImagesImagePatchIncludeEnum[keyof typeof VersionImagesImagePatchIncludeEnum];
/**
 * @export
 */
export const VersionImagesPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionImagesPostVersionEnum = typeof VersionImagesPostVersionEnum[keyof typeof VersionImagesPostVersionEnum];
/**
 * @export
 */
export const VersionImagesPostIncludeEnum = {
    Model: 'model'
} as const;
export type VersionImagesPostIncludeEnum = typeof VersionImagesPostIncludeEnum[keyof typeof VersionImagesPostIncludeEnum];
