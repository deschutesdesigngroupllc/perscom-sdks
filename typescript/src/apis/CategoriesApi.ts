/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Category,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionCategoriesBatchPatchRequest,
  VersionCategoriesBatchPost200Response,
  VersionCategoriesBatchPostRequest,
  VersionCategoriesGet200Response,
  VersionCategoriesPost201Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
} from '../models/index';
import {
    CategoryFromJSON,
    CategoryToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionCategoriesBatchPatchRequestFromJSON,
    VersionCategoriesBatchPatchRequestToJSON,
    VersionCategoriesBatchPost200ResponseFromJSON,
    VersionCategoriesBatchPost200ResponseToJSON,
    VersionCategoriesBatchPostRequestFromJSON,
    VersionCategoriesBatchPostRequestToJSON,
    VersionCategoriesGet200ResponseFromJSON,
    VersionCategoriesGet200ResponseToJSON,
    VersionCategoriesPost201ResponseFromJSON,
    VersionCategoriesPost201ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
} from '../models/index';

export interface VersionCategoriesBatchDeleteRequest {
    version: VersionCategoriesBatchDeleteVersionEnum;
    include?: VersionCategoriesBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionCategoriesBatchPatchOperationRequest {
    version: VersionCategoriesBatchPatchOperationVersionEnum;
    include?: VersionCategoriesBatchPatchOperationIncludeEnum;
    versionCategoriesBatchPatchRequest?: VersionCategoriesBatchPatchRequest;
}

export interface VersionCategoriesBatchPostOperationRequest {
    version: VersionCategoriesBatchPostOperationVersionEnum;
    include?: VersionCategoriesBatchPostOperationIncludeEnum;
    versionCategoriesBatchPostRequest?: VersionCategoriesBatchPostRequest;
}

export interface VersionCategoriesCategoryDeleteRequest {
    version: VersionCategoriesCategoryDeleteVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryDeleteIncludeEnum;
}

export interface VersionCategoriesCategoryGetRequest {
    version: VersionCategoriesCategoryGetVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryGetIncludeEnum;
}

export interface VersionCategoriesCategoryPatchRequest {
    version: VersionCategoriesCategoryPatchVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryPatchIncludeEnum;
    category2?: Category;
}

export interface VersionCategoriesGetRequest {
    version: VersionCategoriesGetVersionEnum;
    include?: VersionCategoriesGetIncludeEnum;
}

export interface VersionCategoriesPostRequest {
    version: VersionCategoriesPostVersionEnum;
    include?: VersionCategoriesPostIncludeEnum;
    category?: Category;
}

/**
 * 
 */
export class CategoriesApi extends runtime.BaseAPI {

    /**
     * Delete a batch of categories
     */
    async versionCategoriesBatchDeleteRaw(requestParameters: VersionCategoriesBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of categories
     */
    async versionCategoriesBatchDelete(requestParameters: VersionCategoriesBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesBatchPost200Response> {
        const response = await this.versionCategoriesBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of categories
     */
    async versionCategoriesBatchPatchRaw(requestParameters: VersionCategoriesBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesBatchPatchRequestToJSON(requestParameters['versionCategoriesBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of categories
     */
    async versionCategoriesBatchPatch(requestParameters: VersionCategoriesBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesBatchPost200Response> {
        const response = await this.versionCategoriesBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of categories
     */
    async versionCategoriesBatchPostRaw(requestParameters: VersionCategoriesBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesBatchPostRequestToJSON(requestParameters['versionCategoriesBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of categories
     */
    async versionCategoriesBatchPost(requestParameters: VersionCategoriesBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesBatchPost200Response> {
        const response = await this.versionCategoriesBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete category
     */
    async versionCategoriesCategoryDeleteRaw(requestParameters: VersionCategoriesCategoryDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryDelete().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete category
     */
    async versionCategoriesCategoryDelete(requestParameters: VersionCategoriesCategoryDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesPost201Response> {
        const response = await this.versionCategoriesCategoryDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get category
     */
    async versionCategoriesCategoryGetRaw(requestParameters: VersionCategoriesCategoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryGet().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get category
     */
    async versionCategoriesCategoryGet(requestParameters: VersionCategoriesCategoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesPost201Response> {
        const response = await this.versionCategoriesCategoryGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update category
     */
    async versionCategoriesCategoryPatchRaw(requestParameters: VersionCategoriesCategoryPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryPatch().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CategoryToJSON(requestParameters['category2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update category
     */
    async versionCategoriesCategoryPatch(requestParameters: VersionCategoriesCategoryPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesPost201Response> {
        const response = await this.versionCategoriesCategoryPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of categories
     */
    async versionCategoriesGetRaw(requestParameters: VersionCategoriesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of categories
     */
    async versionCategoriesGet(requestParameters: VersionCategoriesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesGet200Response> {
        const response = await this.versionCategoriesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create category
     */
    async versionCategoriesPostRaw(requestParameters: VersionCategoriesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CategoryToJSON(requestParameters['category']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create category
     */
    async versionCategoriesPost(requestParameters: VersionCategoriesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesPost201Response> {
        const response = await this.versionCategoriesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionCategoriesBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesBatchDeleteVersionEnum = typeof VersionCategoriesBatchDeleteVersionEnum[keyof typeof VersionCategoriesBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionCategoriesBatchDeleteIncludeEnum = {
    Awards: 'awards',
    Documents: 'documents',
    Forms: 'forms',
    Qualifications: 'qualifications',
    Ranks: 'ranks'
} as const;
export type VersionCategoriesBatchDeleteIncludeEnum = typeof VersionCategoriesBatchDeleteIncludeEnum[keyof typeof VersionCategoriesBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesBatchPatchOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesBatchPatchOperationVersionEnum = typeof VersionCategoriesBatchPatchOperationVersionEnum[keyof typeof VersionCategoriesBatchPatchOperationVersionEnum];
/**
 * @export
 */
export const VersionCategoriesBatchPatchOperationIncludeEnum = {
    Awards: 'awards',
    Documents: 'documents',
    Forms: 'forms',
    Qualifications: 'qualifications',
    Ranks: 'ranks'
} as const;
export type VersionCategoriesBatchPatchOperationIncludeEnum = typeof VersionCategoriesBatchPatchOperationIncludeEnum[keyof typeof VersionCategoriesBatchPatchOperationIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesBatchPostOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesBatchPostOperationVersionEnum = typeof VersionCategoriesBatchPostOperationVersionEnum[keyof typeof VersionCategoriesBatchPostOperationVersionEnum];
/**
 * @export
 */
export const VersionCategoriesBatchPostOperationIncludeEnum = {
    Awards: 'awards',
    Documents: 'documents',
    Forms: 'forms',
    Qualifications: 'qualifications',
    Ranks: 'ranks'
} as const;
export type VersionCategoriesBatchPostOperationIncludeEnum = typeof VersionCategoriesBatchPostOperationIncludeEnum[keyof typeof VersionCategoriesBatchPostOperationIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryDeleteVersionEnum = typeof VersionCategoriesCategoryDeleteVersionEnum[keyof typeof VersionCategoriesCategoryDeleteVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryDeleteIncludeEnum = {
    Awards: 'awards',
    Documents: 'documents',
    Forms: 'forms',
    Qualifications: 'qualifications',
    Ranks: 'ranks'
} as const;
export type VersionCategoriesCategoryDeleteIncludeEnum = typeof VersionCategoriesCategoryDeleteIncludeEnum[keyof typeof VersionCategoriesCategoryDeleteIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryGetVersionEnum = typeof VersionCategoriesCategoryGetVersionEnum[keyof typeof VersionCategoriesCategoryGetVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryGetIncludeEnum = {
    Awards: 'awards',
    Documents: 'documents',
    Forms: 'forms',
    Qualifications: 'qualifications',
    Ranks: 'ranks'
} as const;
export type VersionCategoriesCategoryGetIncludeEnum = typeof VersionCategoriesCategoryGetIncludeEnum[keyof typeof VersionCategoriesCategoryGetIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryPatchVersionEnum = typeof VersionCategoriesCategoryPatchVersionEnum[keyof typeof VersionCategoriesCategoryPatchVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryPatchIncludeEnum = {
    Awards: 'awards',
    Documents: 'documents',
    Forms: 'forms',
    Qualifications: 'qualifications',
    Ranks: 'ranks'
} as const;
export type VersionCategoriesCategoryPatchIncludeEnum = typeof VersionCategoriesCategoryPatchIncludeEnum[keyof typeof VersionCategoriesCategoryPatchIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesGetVersionEnum = typeof VersionCategoriesGetVersionEnum[keyof typeof VersionCategoriesGetVersionEnum];
/**
 * @export
 */
export const VersionCategoriesGetIncludeEnum = {
    Awards: 'awards',
    Documents: 'documents',
    Forms: 'forms',
    Qualifications: 'qualifications',
    Ranks: 'ranks'
} as const;
export type VersionCategoriesGetIncludeEnum = typeof VersionCategoriesGetIncludeEnum[keyof typeof VersionCategoriesGetIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesPostVersionEnum = typeof VersionCategoriesPostVersionEnum[keyof typeof VersionCategoriesPostVersionEnum];
/**
 * @export
 */
export const VersionCategoriesPostIncludeEnum = {
    Awards: 'awards',
    Documents: 'documents',
    Forms: 'forms',
    Qualifications: 'qualifications',
    Ranks: 'ranks'
} as const;
export type VersionCategoriesPostIncludeEnum = typeof VersionCategoriesPostIncludeEnum[keyof typeof VersionCategoriesPostIncludeEnum];
