/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Qualification,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionCategoriesCategoryQualificationsBatchPatchRequest,
  VersionCategoriesCategoryQualificationsBatchPost200Response,
  VersionCategoriesCategoryQualificationsBatchPostRequest,
  VersionCategoriesCategoryQualificationsGet200Response,
  VersionCategoriesCategoryQualificationsPost201Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
} from '../models/index';
import {
    QualificationFromJSON,
    QualificationToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionCategoriesCategoryQualificationsBatchPatchRequestFromJSON,
    VersionCategoriesCategoryQualificationsBatchPatchRequestToJSON,
    VersionCategoriesCategoryQualificationsBatchPost200ResponseFromJSON,
    VersionCategoriesCategoryQualificationsBatchPost200ResponseToJSON,
    VersionCategoriesCategoryQualificationsBatchPostRequestFromJSON,
    VersionCategoriesCategoryQualificationsBatchPostRequestToJSON,
    VersionCategoriesCategoryQualificationsGet200ResponseFromJSON,
    VersionCategoriesCategoryQualificationsGet200ResponseToJSON,
    VersionCategoriesCategoryQualificationsPost201ResponseFromJSON,
    VersionCategoriesCategoryQualificationsPost201ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
} from '../models/index';

export interface VersionQualificationsBatchDeleteRequest {
    version: VersionQualificationsBatchDeleteVersionEnum;
    include?: VersionQualificationsBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionQualificationsBatchPatchRequest {
    version: VersionQualificationsBatchPatchVersionEnum;
    include?: VersionQualificationsBatchPatchIncludeEnum;
    versionCategoriesCategoryQualificationsBatchPatchRequest?: VersionCategoriesCategoryQualificationsBatchPatchRequest;
}

export interface VersionQualificationsBatchPostRequest {
    version: VersionQualificationsBatchPostVersionEnum;
    include?: VersionQualificationsBatchPostIncludeEnum;
    versionCategoriesCategoryQualificationsBatchPostRequest?: VersionCategoriesCategoryQualificationsBatchPostRequest;
}

export interface VersionQualificationsGetRequest {
    version: VersionQualificationsGetVersionEnum;
    include?: VersionQualificationsGetIncludeEnum;
}

export interface VersionQualificationsPostRequest {
    version: VersionQualificationsPostVersionEnum;
    include?: VersionQualificationsPostIncludeEnum;
    qualification?: Qualification;
}

export interface VersionQualificationsQualificationDeleteRequest {
    version: VersionQualificationsQualificationDeleteVersionEnum;
    qualification: number;
    include?: VersionQualificationsQualificationDeleteIncludeEnum;
}

export interface VersionQualificationsQualificationGetRequest {
    version: VersionQualificationsQualificationGetVersionEnum;
    qualification: number;
    include?: VersionQualificationsQualificationGetIncludeEnum;
}

export interface VersionQualificationsQualificationPatchRequest {
    version: VersionQualificationsQualificationPatchVersionEnum;
    qualification: number;
    include?: VersionQualificationsQualificationPatchIncludeEnum;
    qualification2?: Qualification;
}

/**
 * 
 */
export class QualificationsApi extends runtime.BaseAPI {

    /**
     * Delete a batch of qualifications
     */
    async versionQualificationsBatchDeleteRaw(requestParameters: VersionQualificationsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryQualificationsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionQualificationsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/qualifications/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryQualificationsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of qualifications
     */
    async versionQualificationsBatchDelete(requestParameters: VersionQualificationsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryQualificationsBatchPost200Response> {
        const response = await this.versionQualificationsBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of qualifications
     */
    async versionQualificationsBatchPatchRaw(requestParameters: VersionQualificationsBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryQualificationsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionQualificationsBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/qualifications/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryQualificationsBatchPatchRequestToJSON(requestParameters['versionCategoriesCategoryQualificationsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryQualificationsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of qualifications
     */
    async versionQualificationsBatchPatch(requestParameters: VersionQualificationsBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryQualificationsBatchPost200Response> {
        const response = await this.versionQualificationsBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of qualifications
     */
    async versionQualificationsBatchPostRaw(requestParameters: VersionQualificationsBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryQualificationsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionQualificationsBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/qualifications/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryQualificationsBatchPostRequestToJSON(requestParameters['versionCategoriesCategoryQualificationsBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryQualificationsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of qualifications
     */
    async versionQualificationsBatchPost(requestParameters: VersionQualificationsBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryQualificationsBatchPost200Response> {
        const response = await this.versionQualificationsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of qualifications
     */
    async versionQualificationsGetRaw(requestParameters: VersionQualificationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryQualificationsGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionQualificationsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/qualifications`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryQualificationsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of qualifications
     */
    async versionQualificationsGet(requestParameters: VersionQualificationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryQualificationsGet200Response> {
        const response = await this.versionQualificationsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create qualification
     */
    async versionQualificationsPostRaw(requestParameters: VersionQualificationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryQualificationsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionQualificationsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/qualifications`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QualificationToJSON(requestParameters['qualification']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryQualificationsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create qualification
     */
    async versionQualificationsPost(requestParameters: VersionQualificationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryQualificationsPost201Response> {
        const response = await this.versionQualificationsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete qualification
     */
    async versionQualificationsQualificationDeleteRaw(requestParameters: VersionQualificationsQualificationDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryQualificationsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionQualificationsQualificationDelete().'
            );
        }

        if (requestParameters['qualification'] == null) {
            throw new runtime.RequiredError(
                'qualification',
                'Required parameter "qualification" was null or undefined when calling versionQualificationsQualificationDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/qualifications/{qualification}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"qualification"}}`, encodeURIComponent(String(requestParameters['qualification']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryQualificationsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete qualification
     */
    async versionQualificationsQualificationDelete(requestParameters: VersionQualificationsQualificationDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryQualificationsPost201Response> {
        const response = await this.versionQualificationsQualificationDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get qualification
     */
    async versionQualificationsQualificationGetRaw(requestParameters: VersionQualificationsQualificationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryQualificationsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionQualificationsQualificationGet().'
            );
        }

        if (requestParameters['qualification'] == null) {
            throw new runtime.RequiredError(
                'qualification',
                'Required parameter "qualification" was null or undefined when calling versionQualificationsQualificationGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/qualifications/{qualification}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"qualification"}}`, encodeURIComponent(String(requestParameters['qualification']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryQualificationsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get qualification
     */
    async versionQualificationsQualificationGet(requestParameters: VersionQualificationsQualificationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryQualificationsPost201Response> {
        const response = await this.versionQualificationsQualificationGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update qualification
     */
    async versionQualificationsQualificationPatchRaw(requestParameters: VersionQualificationsQualificationPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryQualificationsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionQualificationsQualificationPatch().'
            );
        }

        if (requestParameters['qualification'] == null) {
            throw new runtime.RequiredError(
                'qualification',
                'Required parameter "qualification" was null or undefined when calling versionQualificationsQualificationPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/qualifications/{qualification}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"qualification"}}`, encodeURIComponent(String(requestParameters['qualification']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: QualificationToJSON(requestParameters['qualification2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryQualificationsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update qualification
     */
    async versionQualificationsQualificationPatch(requestParameters: VersionQualificationsQualificationPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryQualificationsPost201Response> {
        const response = await this.versionQualificationsQualificationPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionQualificationsBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionQualificationsBatchDeleteVersionEnum = typeof VersionQualificationsBatchDeleteVersionEnum[keyof typeof VersionQualificationsBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionQualificationsBatchDeleteIncludeEnum = {
    Image: 'image'
} as const;
export type VersionQualificationsBatchDeleteIncludeEnum = typeof VersionQualificationsBatchDeleteIncludeEnum[keyof typeof VersionQualificationsBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionQualificationsBatchPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionQualificationsBatchPatchVersionEnum = typeof VersionQualificationsBatchPatchVersionEnum[keyof typeof VersionQualificationsBatchPatchVersionEnum];
/**
 * @export
 */
export const VersionQualificationsBatchPatchIncludeEnum = {
    Image: 'image'
} as const;
export type VersionQualificationsBatchPatchIncludeEnum = typeof VersionQualificationsBatchPatchIncludeEnum[keyof typeof VersionQualificationsBatchPatchIncludeEnum];
/**
 * @export
 */
export const VersionQualificationsBatchPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionQualificationsBatchPostVersionEnum = typeof VersionQualificationsBatchPostVersionEnum[keyof typeof VersionQualificationsBatchPostVersionEnum];
/**
 * @export
 */
export const VersionQualificationsBatchPostIncludeEnum = {
    Image: 'image'
} as const;
export type VersionQualificationsBatchPostIncludeEnum = typeof VersionQualificationsBatchPostIncludeEnum[keyof typeof VersionQualificationsBatchPostIncludeEnum];
/**
 * @export
 */
export const VersionQualificationsGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionQualificationsGetVersionEnum = typeof VersionQualificationsGetVersionEnum[keyof typeof VersionQualificationsGetVersionEnum];
/**
 * @export
 */
export const VersionQualificationsGetIncludeEnum = {
    Image: 'image'
} as const;
export type VersionQualificationsGetIncludeEnum = typeof VersionQualificationsGetIncludeEnum[keyof typeof VersionQualificationsGetIncludeEnum];
/**
 * @export
 */
export const VersionQualificationsPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionQualificationsPostVersionEnum = typeof VersionQualificationsPostVersionEnum[keyof typeof VersionQualificationsPostVersionEnum];
/**
 * @export
 */
export const VersionQualificationsPostIncludeEnum = {
    Image: 'image'
} as const;
export type VersionQualificationsPostIncludeEnum = typeof VersionQualificationsPostIncludeEnum[keyof typeof VersionQualificationsPostIncludeEnum];
/**
 * @export
 */
export const VersionQualificationsQualificationDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionQualificationsQualificationDeleteVersionEnum = typeof VersionQualificationsQualificationDeleteVersionEnum[keyof typeof VersionQualificationsQualificationDeleteVersionEnum];
/**
 * @export
 */
export const VersionQualificationsQualificationDeleteIncludeEnum = {
    Image: 'image'
} as const;
export type VersionQualificationsQualificationDeleteIncludeEnum = typeof VersionQualificationsQualificationDeleteIncludeEnum[keyof typeof VersionQualificationsQualificationDeleteIncludeEnum];
/**
 * @export
 */
export const VersionQualificationsQualificationGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionQualificationsQualificationGetVersionEnum = typeof VersionQualificationsQualificationGetVersionEnum[keyof typeof VersionQualificationsQualificationGetVersionEnum];
/**
 * @export
 */
export const VersionQualificationsQualificationGetIncludeEnum = {
    Image: 'image'
} as const;
export type VersionQualificationsQualificationGetIncludeEnum = typeof VersionQualificationsQualificationGetIncludeEnum[keyof typeof VersionQualificationsQualificationGetIncludeEnum];
/**
 * @export
 */
export const VersionQualificationsQualificationPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionQualificationsQualificationPatchVersionEnum = typeof VersionQualificationsQualificationPatchVersionEnum[keyof typeof VersionQualificationsQualificationPatchVersionEnum];
/**
 * @export
 */
export const VersionQualificationsQualificationPatchIncludeEnum = {
    Image: 'image'
} as const;
export type VersionQualificationsQualificationPatchIncludeEnum = typeof VersionQualificationsQualificationPatchIncludeEnum[keyof typeof VersionQualificationsQualificationPatchIncludeEnum];
