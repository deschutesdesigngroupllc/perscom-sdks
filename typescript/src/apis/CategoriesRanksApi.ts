/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Rank,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionCategoriesCategoryAwardsAttachPost200Response,
  VersionCategoriesCategoryAwardsAttachPostRequest,
  VersionCategoriesCategoryAwardsAwardPivotPatch200Response,
  VersionCategoriesCategoryAwardsAwardPivotPatchRequest,
  VersionCategoriesCategoryAwardsDetachDelete200Response,
  VersionCategoriesCategoryAwardsSyncPatch200Response,
  VersionCategoriesCategoryAwardsTogglePatch200Response,
  VersionCategoriesCategoryRanksBatchPatchRequest,
  VersionCategoriesCategoryRanksBatchPost200Response,
  VersionCategoriesCategoryRanksBatchPostRequest,
  VersionCategoriesCategoryRanksGet200Response,
  VersionCategoriesCategoryRanksPost201Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
} from '../models/index';
import {
    RankFromJSON,
    RankToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionCategoriesCategoryAwardsAttachPost200ResponseFromJSON,
    VersionCategoriesCategoryAwardsAttachPost200ResponseToJSON,
    VersionCategoriesCategoryAwardsAttachPostRequestFromJSON,
    VersionCategoriesCategoryAwardsAttachPostRequestToJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatch200ResponseFromJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatch200ResponseToJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatchRequestFromJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatchRequestToJSON,
    VersionCategoriesCategoryAwardsDetachDelete200ResponseFromJSON,
    VersionCategoriesCategoryAwardsDetachDelete200ResponseToJSON,
    VersionCategoriesCategoryAwardsSyncPatch200ResponseFromJSON,
    VersionCategoriesCategoryAwardsSyncPatch200ResponseToJSON,
    VersionCategoriesCategoryAwardsTogglePatch200ResponseFromJSON,
    VersionCategoriesCategoryAwardsTogglePatch200ResponseToJSON,
    VersionCategoriesCategoryRanksBatchPatchRequestFromJSON,
    VersionCategoriesCategoryRanksBatchPatchRequestToJSON,
    VersionCategoriesCategoryRanksBatchPost200ResponseFromJSON,
    VersionCategoriesCategoryRanksBatchPost200ResponseToJSON,
    VersionCategoriesCategoryRanksBatchPostRequestFromJSON,
    VersionCategoriesCategoryRanksBatchPostRequestToJSON,
    VersionCategoriesCategoryRanksGet200ResponseFromJSON,
    VersionCategoriesCategoryRanksGet200ResponseToJSON,
    VersionCategoriesCategoryRanksPost201ResponseFromJSON,
    VersionCategoriesCategoryRanksPost201ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
} from '../models/index';

export interface VersionCategoriesCategoryRanksAttachPostRequest {
    version: VersionCategoriesCategoryRanksAttachPostVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryRanksAttachPostIncludeEnum;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

export interface VersionCategoriesCategoryRanksBatchDeleteRequest {
    version: VersionCategoriesCategoryRanksBatchDeleteVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryRanksBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionCategoriesCategoryRanksBatchPatchOperationRequest {
    version: VersionCategoriesCategoryRanksBatchPatchOperationVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryRanksBatchPatchOperationIncludeEnum;
    versionCategoriesCategoryRanksBatchPatchRequest?: VersionCategoriesCategoryRanksBatchPatchRequest;
}

export interface VersionCategoriesCategoryRanksBatchPostOperationRequest {
    version: VersionCategoriesCategoryRanksBatchPostOperationVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryRanksBatchPostOperationIncludeEnum;
    versionCategoriesCategoryRanksBatchPostRequest?: VersionCategoriesCategoryRanksBatchPostRequest;
}

export interface VersionCategoriesCategoryRanksDetachDeleteRequest {
    version: VersionCategoriesCategoryRanksDetachDeleteVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryRanksDetachDeleteIncludeEnum;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

export interface VersionCategoriesCategoryRanksGetRequest {
    version: VersionCategoriesCategoryRanksGetVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryRanksGetIncludeEnum;
}

export interface VersionCategoriesCategoryRanksPostRequest {
    version: VersionCategoriesCategoryRanksPostVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryRanksPostIncludeEnum;
    rank?: Rank;
}

export interface VersionCategoriesCategoryRanksRankDeleteRequest {
    version: VersionCategoriesCategoryRanksRankDeleteVersionEnum;
    category: number;
    rank: number;
    include?: VersionCategoriesCategoryRanksRankDeleteIncludeEnum;
}

export interface VersionCategoriesCategoryRanksRankGetRequest {
    version: VersionCategoriesCategoryRanksRankGetVersionEnum;
    category: number;
    rank: number;
    include?: VersionCategoriesCategoryRanksRankGetIncludeEnum;
}

export interface VersionCategoriesCategoryRanksRankPatchRequest {
    version: VersionCategoriesCategoryRanksRankPatchVersionEnum;
    category: number;
    rank: number;
    include?: VersionCategoriesCategoryRanksRankPatchIncludeEnum;
    rank2?: Rank;
}

export interface VersionCategoriesCategoryRanksRankPivotPatchRequest {
    version: VersionCategoriesCategoryRanksRankPivotPatchVersionEnum;
    category: number;
    rank: number;
    include?: VersionCategoriesCategoryRanksRankPivotPatchIncludeEnum;
    versionCategoriesCategoryAwardsAwardPivotPatchRequest?: VersionCategoriesCategoryAwardsAwardPivotPatchRequest;
}

export interface VersionCategoriesCategoryRanksSyncPatchRequest {
    version: VersionCategoriesCategoryRanksSyncPatchVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryRanksSyncPatchIncludeEnum;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

export interface VersionCategoriesCategoryRanksTogglePatchRequest {
    version: VersionCategoriesCategoryRanksTogglePatchVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryRanksTogglePatchIncludeEnum;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

/**
 * 
 */
export class CategoriesRanksApi extends runtime.BaseAPI {

    /**
     * Attach ranks
     */
    async versionCategoriesCategoryRanksAttachPostRaw(requestParameters: VersionCategoriesCategoryRanksAttachPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsAttachPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryRanksAttachPost().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryRanksAttachPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/ranks/attach`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsAttachPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Attach ranks
     */
    async versionCategoriesCategoryRanksAttachPost(requestParameters: VersionCategoriesCategoryRanksAttachPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsAttachPost200Response> {
        const response = await this.versionCategoriesCategoryRanksAttachPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a batch of ranks
     */
    async versionCategoriesCategoryRanksBatchDeleteRaw(requestParameters: VersionCategoriesCategoryRanksBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryRanksBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryRanksBatchDelete().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryRanksBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/ranks/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryRanksBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of ranks
     */
    async versionCategoriesCategoryRanksBatchDelete(requestParameters: VersionCategoriesCategoryRanksBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryRanksBatchPost200Response> {
        const response = await this.versionCategoriesCategoryRanksBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of ranks
     */
    async versionCategoriesCategoryRanksBatchPatchRaw(requestParameters: VersionCategoriesCategoryRanksBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryRanksBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryRanksBatchPatch().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryRanksBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/ranks/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryRanksBatchPatchRequestToJSON(requestParameters['versionCategoriesCategoryRanksBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryRanksBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of ranks
     */
    async versionCategoriesCategoryRanksBatchPatch(requestParameters: VersionCategoriesCategoryRanksBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryRanksBatchPost200Response> {
        const response = await this.versionCategoriesCategoryRanksBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of ranks
     */
    async versionCategoriesCategoryRanksBatchPostRaw(requestParameters: VersionCategoriesCategoryRanksBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryRanksBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryRanksBatchPost().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryRanksBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/ranks/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryRanksBatchPostRequestToJSON(requestParameters['versionCategoriesCategoryRanksBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryRanksBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of ranks
     */
    async versionCategoriesCategoryRanksBatchPost(requestParameters: VersionCategoriesCategoryRanksBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryRanksBatchPost200Response> {
        const response = await this.versionCategoriesCategoryRanksBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Detach ranks
     */
    async versionCategoriesCategoryRanksDetachDeleteRaw(requestParameters: VersionCategoriesCategoryRanksDetachDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsDetachDelete200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryRanksDetachDelete().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryRanksDetachDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/ranks/detach`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsDetachDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Detach ranks
     */
    async versionCategoriesCategoryRanksDetachDelete(requestParameters: VersionCategoriesCategoryRanksDetachDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsDetachDelete200Response> {
        const response = await this.versionCategoriesCategoryRanksDetachDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of ranks
     */
    async versionCategoriesCategoryRanksGetRaw(requestParameters: VersionCategoriesCategoryRanksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryRanksGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryRanksGet().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryRanksGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/ranks`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryRanksGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of ranks
     */
    async versionCategoriesCategoryRanksGet(requestParameters: VersionCategoriesCategoryRanksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryRanksGet200Response> {
        const response = await this.versionCategoriesCategoryRanksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create rank
     */
    async versionCategoriesCategoryRanksPostRaw(requestParameters: VersionCategoriesCategoryRanksPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryRanksPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryRanksPost().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryRanksPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/ranks`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RankToJSON(requestParameters['rank']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryRanksPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create rank
     */
    async versionCategoriesCategoryRanksPost(requestParameters: VersionCategoriesCategoryRanksPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryRanksPost201Response> {
        const response = await this.versionCategoriesCategoryRanksPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete rank
     */
    async versionCategoriesCategoryRanksRankDeleteRaw(requestParameters: VersionCategoriesCategoryRanksRankDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryRanksPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryRanksRankDelete().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryRanksRankDelete().'
            );
        }

        if (requestParameters['rank'] == null) {
            throw new runtime.RequiredError(
                'rank',
                'Required parameter "rank" was null or undefined when calling versionCategoriesCategoryRanksRankDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/ranks/{rank}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))).replace(`{${"rank"}}`, encodeURIComponent(String(requestParameters['rank']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryRanksPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete rank
     */
    async versionCategoriesCategoryRanksRankDelete(requestParameters: VersionCategoriesCategoryRanksRankDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryRanksPost201Response> {
        const response = await this.versionCategoriesCategoryRanksRankDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get rank
     */
    async versionCategoriesCategoryRanksRankGetRaw(requestParameters: VersionCategoriesCategoryRanksRankGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryRanksPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryRanksRankGet().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryRanksRankGet().'
            );
        }

        if (requestParameters['rank'] == null) {
            throw new runtime.RequiredError(
                'rank',
                'Required parameter "rank" was null or undefined when calling versionCategoriesCategoryRanksRankGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/ranks/{rank}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))).replace(`{${"rank"}}`, encodeURIComponent(String(requestParameters['rank']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryRanksPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get rank
     */
    async versionCategoriesCategoryRanksRankGet(requestParameters: VersionCategoriesCategoryRanksRankGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryRanksPost201Response> {
        const response = await this.versionCategoriesCategoryRanksRankGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update rank
     */
    async versionCategoriesCategoryRanksRankPatchRaw(requestParameters: VersionCategoriesCategoryRanksRankPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryRanksPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryRanksRankPatch().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryRanksRankPatch().'
            );
        }

        if (requestParameters['rank'] == null) {
            throw new runtime.RequiredError(
                'rank',
                'Required parameter "rank" was null or undefined when calling versionCategoriesCategoryRanksRankPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/ranks/{rank}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))).replace(`{${"rank"}}`, encodeURIComponent(String(requestParameters['rank']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RankToJSON(requestParameters['rank2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryRanksPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update rank
     */
    async versionCategoriesCategoryRanksRankPatch(requestParameters: VersionCategoriesCategoryRanksRankPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryRanksPost201Response> {
        const response = await this.versionCategoriesCategoryRanksRankPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update pivot
     */
    async versionCategoriesCategoryRanksRankPivotPatchRaw(requestParameters: VersionCategoriesCategoryRanksRankPivotPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsAwardPivotPatch200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryRanksRankPivotPatch().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryRanksRankPivotPatch().'
            );
        }

        if (requestParameters['rank'] == null) {
            throw new runtime.RequiredError(
                'rank',
                'Required parameter "rank" was null or undefined when calling versionCategoriesCategoryRanksRankPivotPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/ranks/{rank}/pivot`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))).replace(`{${"rank"}}`, encodeURIComponent(String(requestParameters['rank']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAwardPivotPatchRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAwardPivotPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsAwardPivotPatch200ResponseFromJSON(jsonValue));
    }

    /**
     * Update pivot
     */
    async versionCategoriesCategoryRanksRankPivotPatch(requestParameters: VersionCategoriesCategoryRanksRankPivotPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsAwardPivotPatch200Response> {
        const response = await this.versionCategoriesCategoryRanksRankPivotPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sync ranks
     */
    async versionCategoriesCategoryRanksSyncPatchRaw(requestParameters: VersionCategoriesCategoryRanksSyncPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsSyncPatch200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryRanksSyncPatch().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryRanksSyncPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/ranks/sync`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsSyncPatch200ResponseFromJSON(jsonValue));
    }

    /**
     * Sync ranks
     */
    async versionCategoriesCategoryRanksSyncPatch(requestParameters: VersionCategoriesCategoryRanksSyncPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsSyncPatch200Response> {
        const response = await this.versionCategoriesCategoryRanksSyncPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Toggle ranks
     */
    async versionCategoriesCategoryRanksTogglePatchRaw(requestParameters: VersionCategoriesCategoryRanksTogglePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsTogglePatch200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryRanksTogglePatch().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryRanksTogglePatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/ranks/toggle`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsTogglePatch200ResponseFromJSON(jsonValue));
    }

    /**
     * Toggle ranks
     */
    async versionCategoriesCategoryRanksTogglePatch(requestParameters: VersionCategoriesCategoryRanksTogglePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsTogglePatch200Response> {
        const response = await this.versionCategoriesCategoryRanksTogglePatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionCategoriesCategoryRanksAttachPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryRanksAttachPostVersionEnum = typeof VersionCategoriesCategoryRanksAttachPostVersionEnum[keyof typeof VersionCategoriesCategoryRanksAttachPostVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryRanksAttachPostIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryRanksAttachPostIncludeEnum = typeof VersionCategoriesCategoryRanksAttachPostIncludeEnum[keyof typeof VersionCategoriesCategoryRanksAttachPostIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryRanksBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryRanksBatchDeleteVersionEnum = typeof VersionCategoriesCategoryRanksBatchDeleteVersionEnum[keyof typeof VersionCategoriesCategoryRanksBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryRanksBatchDeleteIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryRanksBatchDeleteIncludeEnum = typeof VersionCategoriesCategoryRanksBatchDeleteIncludeEnum[keyof typeof VersionCategoriesCategoryRanksBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryRanksBatchPatchOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryRanksBatchPatchOperationVersionEnum = typeof VersionCategoriesCategoryRanksBatchPatchOperationVersionEnum[keyof typeof VersionCategoriesCategoryRanksBatchPatchOperationVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryRanksBatchPatchOperationIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryRanksBatchPatchOperationIncludeEnum = typeof VersionCategoriesCategoryRanksBatchPatchOperationIncludeEnum[keyof typeof VersionCategoriesCategoryRanksBatchPatchOperationIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryRanksBatchPostOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryRanksBatchPostOperationVersionEnum = typeof VersionCategoriesCategoryRanksBatchPostOperationVersionEnum[keyof typeof VersionCategoriesCategoryRanksBatchPostOperationVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryRanksBatchPostOperationIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryRanksBatchPostOperationIncludeEnum = typeof VersionCategoriesCategoryRanksBatchPostOperationIncludeEnum[keyof typeof VersionCategoriesCategoryRanksBatchPostOperationIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryRanksDetachDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryRanksDetachDeleteVersionEnum = typeof VersionCategoriesCategoryRanksDetachDeleteVersionEnum[keyof typeof VersionCategoriesCategoryRanksDetachDeleteVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryRanksDetachDeleteIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryRanksDetachDeleteIncludeEnum = typeof VersionCategoriesCategoryRanksDetachDeleteIncludeEnum[keyof typeof VersionCategoriesCategoryRanksDetachDeleteIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryRanksGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryRanksGetVersionEnum = typeof VersionCategoriesCategoryRanksGetVersionEnum[keyof typeof VersionCategoriesCategoryRanksGetVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryRanksGetIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryRanksGetIncludeEnum = typeof VersionCategoriesCategoryRanksGetIncludeEnum[keyof typeof VersionCategoriesCategoryRanksGetIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryRanksPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryRanksPostVersionEnum = typeof VersionCategoriesCategoryRanksPostVersionEnum[keyof typeof VersionCategoriesCategoryRanksPostVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryRanksPostIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryRanksPostIncludeEnum = typeof VersionCategoriesCategoryRanksPostIncludeEnum[keyof typeof VersionCategoriesCategoryRanksPostIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryRanksRankDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryRanksRankDeleteVersionEnum = typeof VersionCategoriesCategoryRanksRankDeleteVersionEnum[keyof typeof VersionCategoriesCategoryRanksRankDeleteVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryRanksRankDeleteIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryRanksRankDeleteIncludeEnum = typeof VersionCategoriesCategoryRanksRankDeleteIncludeEnum[keyof typeof VersionCategoriesCategoryRanksRankDeleteIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryRanksRankGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryRanksRankGetVersionEnum = typeof VersionCategoriesCategoryRanksRankGetVersionEnum[keyof typeof VersionCategoriesCategoryRanksRankGetVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryRanksRankGetIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryRanksRankGetIncludeEnum = typeof VersionCategoriesCategoryRanksRankGetIncludeEnum[keyof typeof VersionCategoriesCategoryRanksRankGetIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryRanksRankPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryRanksRankPatchVersionEnum = typeof VersionCategoriesCategoryRanksRankPatchVersionEnum[keyof typeof VersionCategoriesCategoryRanksRankPatchVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryRanksRankPatchIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryRanksRankPatchIncludeEnum = typeof VersionCategoriesCategoryRanksRankPatchIncludeEnum[keyof typeof VersionCategoriesCategoryRanksRankPatchIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryRanksRankPivotPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryRanksRankPivotPatchVersionEnum = typeof VersionCategoriesCategoryRanksRankPivotPatchVersionEnum[keyof typeof VersionCategoriesCategoryRanksRankPivotPatchVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryRanksRankPivotPatchIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryRanksRankPivotPatchIncludeEnum = typeof VersionCategoriesCategoryRanksRankPivotPatchIncludeEnum[keyof typeof VersionCategoriesCategoryRanksRankPivotPatchIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryRanksSyncPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryRanksSyncPatchVersionEnum = typeof VersionCategoriesCategoryRanksSyncPatchVersionEnum[keyof typeof VersionCategoriesCategoryRanksSyncPatchVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryRanksSyncPatchIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryRanksSyncPatchIncludeEnum = typeof VersionCategoriesCategoryRanksSyncPatchIncludeEnum[keyof typeof VersionCategoriesCategoryRanksSyncPatchIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryRanksTogglePatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryRanksTogglePatchVersionEnum = typeof VersionCategoriesCategoryRanksTogglePatchVersionEnum[keyof typeof VersionCategoriesCategoryRanksTogglePatchVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryRanksTogglePatchIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryRanksTogglePatchIncludeEnum = typeof VersionCategoriesCategoryRanksTogglePatchIncludeEnum[keyof typeof VersionCategoriesCategoryRanksTogglePatchIncludeEnum];
