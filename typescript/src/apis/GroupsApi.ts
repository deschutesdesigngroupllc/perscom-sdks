/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Group,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionGroupsBatchPatchRequest,
  VersionGroupsBatchPost200Response,
  VersionGroupsBatchPostRequest,
  VersionGroupsGet200Response,
  VersionGroupsPost201Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
} from '../models/index';
import {
    GroupFromJSON,
    GroupToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionGroupsBatchPatchRequestFromJSON,
    VersionGroupsBatchPatchRequestToJSON,
    VersionGroupsBatchPost200ResponseFromJSON,
    VersionGroupsBatchPost200ResponseToJSON,
    VersionGroupsBatchPostRequestFromJSON,
    VersionGroupsBatchPostRequestToJSON,
    VersionGroupsGet200ResponseFromJSON,
    VersionGroupsGet200ResponseToJSON,
    VersionGroupsPost201ResponseFromJSON,
    VersionGroupsPost201ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
} from '../models/index';

export interface VersionGroupsBatchDeleteRequest {
    version: VersionGroupsBatchDeleteVersionEnum;
    include?: VersionGroupsBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionGroupsBatchPatchOperationRequest {
    version: VersionGroupsBatchPatchOperationVersionEnum;
    include?: VersionGroupsBatchPatchOperationIncludeEnum;
    versionGroupsBatchPatchRequest?: VersionGroupsBatchPatchRequest;
}

export interface VersionGroupsBatchPostOperationRequest {
    version: VersionGroupsBatchPostOperationVersionEnum;
    include?: VersionGroupsBatchPostOperationIncludeEnum;
    versionGroupsBatchPostRequest?: VersionGroupsBatchPostRequest;
}

export interface VersionGroupsGetRequest {
    version: VersionGroupsGetVersionEnum;
    include?: VersionGroupsGetIncludeEnum;
}

export interface VersionGroupsGroupDeleteRequest {
    version: VersionGroupsGroupDeleteVersionEnum;
    group: number;
    include?: VersionGroupsGroupDeleteIncludeEnum;
}

export interface VersionGroupsGroupGetRequest {
    version: VersionGroupsGroupGetVersionEnum;
    group: number;
    include?: VersionGroupsGroupGetIncludeEnum;
}

export interface VersionGroupsGroupPatchRequest {
    version: VersionGroupsGroupPatchVersionEnum;
    group: number;
    include?: VersionGroupsGroupPatchIncludeEnum;
    group2?: Group;
}

export interface VersionGroupsPostRequest {
    version: VersionGroupsPostVersionEnum;
    include?: VersionGroupsPostIncludeEnum;
    group?: Group;
}

/**
 * 
 */
export class GroupsApi extends runtime.BaseAPI {

    /**
     * Delete a batch of groups
     */
    async versionGroupsBatchDeleteRaw(requestParameters: VersionGroupsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionGroupsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionGroupsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/groups/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionGroupsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of groups
     */
    async versionGroupsBatchDelete(requestParameters: VersionGroupsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionGroupsBatchPost200Response> {
        const response = await this.versionGroupsBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of groups
     */
    async versionGroupsBatchPatchRaw(requestParameters: VersionGroupsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionGroupsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionGroupsBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/groups/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionGroupsBatchPatchRequestToJSON(requestParameters['versionGroupsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionGroupsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of groups
     */
    async versionGroupsBatchPatch(requestParameters: VersionGroupsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionGroupsBatchPost200Response> {
        const response = await this.versionGroupsBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of groups
     */
    async versionGroupsBatchPostRaw(requestParameters: VersionGroupsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionGroupsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionGroupsBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/groups/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionGroupsBatchPostRequestToJSON(requestParameters['versionGroupsBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionGroupsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of groups
     */
    async versionGroupsBatchPost(requestParameters: VersionGroupsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionGroupsBatchPost200Response> {
        const response = await this.versionGroupsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of groups
     */
    async versionGroupsGetRaw(requestParameters: VersionGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionGroupsGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionGroupsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/groups`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionGroupsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of groups
     */
    async versionGroupsGet(requestParameters: VersionGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionGroupsGet200Response> {
        const response = await this.versionGroupsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete group
     */
    async versionGroupsGroupDeleteRaw(requestParameters: VersionGroupsGroupDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionGroupsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionGroupsGroupDelete().'
            );
        }

        if (requestParameters['group'] == null) {
            throw new runtime.RequiredError(
                'group',
                'Required parameter "group" was null or undefined when calling versionGroupsGroupDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/groups/{group}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"group"}}`, encodeURIComponent(String(requestParameters['group']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionGroupsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete group
     */
    async versionGroupsGroupDelete(requestParameters: VersionGroupsGroupDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionGroupsPost201Response> {
        const response = await this.versionGroupsGroupDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get group
     */
    async versionGroupsGroupGetRaw(requestParameters: VersionGroupsGroupGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionGroupsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionGroupsGroupGet().'
            );
        }

        if (requestParameters['group'] == null) {
            throw new runtime.RequiredError(
                'group',
                'Required parameter "group" was null or undefined when calling versionGroupsGroupGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/groups/{group}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"group"}}`, encodeURIComponent(String(requestParameters['group']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionGroupsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get group
     */
    async versionGroupsGroupGet(requestParameters: VersionGroupsGroupGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionGroupsPost201Response> {
        const response = await this.versionGroupsGroupGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update group
     */
    async versionGroupsGroupPatchRaw(requestParameters: VersionGroupsGroupPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionGroupsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionGroupsGroupPatch().'
            );
        }

        if (requestParameters['group'] == null) {
            throw new runtime.RequiredError(
                'group',
                'Required parameter "group" was null or undefined when calling versionGroupsGroupPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/groups/{group}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"group"}}`, encodeURIComponent(String(requestParameters['group']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GroupToJSON(requestParameters['group2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionGroupsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update group
     */
    async versionGroupsGroupPatch(requestParameters: VersionGroupsGroupPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionGroupsPost201Response> {
        const response = await this.versionGroupsGroupPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create group
     */
    async versionGroupsPostRaw(requestParameters: VersionGroupsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionGroupsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionGroupsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/groups`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupToJSON(requestParameters['group']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionGroupsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create group
     */
    async versionGroupsPost(requestParameters: VersionGroupsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionGroupsPost201Response> {
        const response = await this.versionGroupsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionGroupsBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionGroupsBatchDeleteVersionEnum = typeof VersionGroupsBatchDeleteVersionEnum[keyof typeof VersionGroupsBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionGroupsBatchDeleteIncludeEnum = {
    Image: 'image',
    Units: 'units',
    Units2: 'units.*'
} as const;
export type VersionGroupsBatchDeleteIncludeEnum = typeof VersionGroupsBatchDeleteIncludeEnum[keyof typeof VersionGroupsBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionGroupsBatchPatchOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionGroupsBatchPatchOperationVersionEnum = typeof VersionGroupsBatchPatchOperationVersionEnum[keyof typeof VersionGroupsBatchPatchOperationVersionEnum];
/**
 * @export
 */
export const VersionGroupsBatchPatchOperationIncludeEnum = {
    Image: 'image',
    Units: 'units',
    Units2: 'units.*'
} as const;
export type VersionGroupsBatchPatchOperationIncludeEnum = typeof VersionGroupsBatchPatchOperationIncludeEnum[keyof typeof VersionGroupsBatchPatchOperationIncludeEnum];
/**
 * @export
 */
export const VersionGroupsBatchPostOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionGroupsBatchPostOperationVersionEnum = typeof VersionGroupsBatchPostOperationVersionEnum[keyof typeof VersionGroupsBatchPostOperationVersionEnum];
/**
 * @export
 */
export const VersionGroupsBatchPostOperationIncludeEnum = {
    Image: 'image',
    Units: 'units',
    Units2: 'units.*'
} as const;
export type VersionGroupsBatchPostOperationIncludeEnum = typeof VersionGroupsBatchPostOperationIncludeEnum[keyof typeof VersionGroupsBatchPostOperationIncludeEnum];
/**
 * @export
 */
export const VersionGroupsGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionGroupsGetVersionEnum = typeof VersionGroupsGetVersionEnum[keyof typeof VersionGroupsGetVersionEnum];
/**
 * @export
 */
export const VersionGroupsGetIncludeEnum = {
    Image: 'image',
    Units: 'units',
    Units2: 'units.*'
} as const;
export type VersionGroupsGetIncludeEnum = typeof VersionGroupsGetIncludeEnum[keyof typeof VersionGroupsGetIncludeEnum];
/**
 * @export
 */
export const VersionGroupsGroupDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionGroupsGroupDeleteVersionEnum = typeof VersionGroupsGroupDeleteVersionEnum[keyof typeof VersionGroupsGroupDeleteVersionEnum];
/**
 * @export
 */
export const VersionGroupsGroupDeleteIncludeEnum = {
    Image: 'image',
    Units: 'units',
    Units2: 'units.*'
} as const;
export type VersionGroupsGroupDeleteIncludeEnum = typeof VersionGroupsGroupDeleteIncludeEnum[keyof typeof VersionGroupsGroupDeleteIncludeEnum];
/**
 * @export
 */
export const VersionGroupsGroupGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionGroupsGroupGetVersionEnum = typeof VersionGroupsGroupGetVersionEnum[keyof typeof VersionGroupsGroupGetVersionEnum];
/**
 * @export
 */
export const VersionGroupsGroupGetIncludeEnum = {
    Image: 'image',
    Units: 'units',
    Units2: 'units.*'
} as const;
export type VersionGroupsGroupGetIncludeEnum = typeof VersionGroupsGroupGetIncludeEnum[keyof typeof VersionGroupsGroupGetIncludeEnum];
/**
 * @export
 */
export const VersionGroupsGroupPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionGroupsGroupPatchVersionEnum = typeof VersionGroupsGroupPatchVersionEnum[keyof typeof VersionGroupsGroupPatchVersionEnum];
/**
 * @export
 */
export const VersionGroupsGroupPatchIncludeEnum = {
    Image: 'image',
    Units: 'units',
    Units2: 'units.*'
} as const;
export type VersionGroupsGroupPatchIncludeEnum = typeof VersionGroupsGroupPatchIncludeEnum[keyof typeof VersionGroupsGroupPatchIncludeEnum];
/**
 * @export
 */
export const VersionGroupsPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionGroupsPostVersionEnum = typeof VersionGroupsPostVersionEnum[keyof typeof VersionGroupsPostVersionEnum];
/**
 * @export
 */
export const VersionGroupsPostIncludeEnum = {
    Image: 'image',
    Units: 'units',
    Units2: 'units.*'
} as const;
export type VersionGroupsPostIncludeEnum = typeof VersionGroupsPostIncludeEnum[keyof typeof VersionGroupsPostIncludeEnum];
