/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Submission,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionFormsFormSubmissionsBatchPatchRequest,
  VersionFormsFormSubmissionsBatchPost200Response,
  VersionFormsFormSubmissionsBatchPostRequest,
  VersionFormsFormSubmissionsGet200Response,
  VersionFormsFormSubmissionsPost201Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
} from '../models/index';
import {
    SubmissionFromJSON,
    SubmissionToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionFormsFormSubmissionsBatchPatchRequestFromJSON,
    VersionFormsFormSubmissionsBatchPatchRequestToJSON,
    VersionFormsFormSubmissionsBatchPost200ResponseFromJSON,
    VersionFormsFormSubmissionsBatchPost200ResponseToJSON,
    VersionFormsFormSubmissionsBatchPostRequestFromJSON,
    VersionFormsFormSubmissionsBatchPostRequestToJSON,
    VersionFormsFormSubmissionsGet200ResponseFromJSON,
    VersionFormsFormSubmissionsGet200ResponseToJSON,
    VersionFormsFormSubmissionsPost201ResponseFromJSON,
    VersionFormsFormSubmissionsPost201ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
} from '../models/index';

export interface VersionFormsFormSubmissionsAssociatePostRequest {
    version: VersionFormsFormSubmissionsAssociatePostVersionEnum;
    form: number;
    include?: VersionFormsFormSubmissionsAssociatePostIncludeEnum;
}

export interface VersionFormsFormSubmissionsBatchDeleteRequest {
    version: VersionFormsFormSubmissionsBatchDeleteVersionEnum;
    form: number;
    include?: VersionFormsFormSubmissionsBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionFormsFormSubmissionsBatchPatchOperationRequest {
    version: VersionFormsFormSubmissionsBatchPatchOperationVersionEnum;
    form: number;
    include?: VersionFormsFormSubmissionsBatchPatchOperationIncludeEnum;
    versionFormsFormSubmissionsBatchPatchRequest?: VersionFormsFormSubmissionsBatchPatchRequest;
}

export interface VersionFormsFormSubmissionsBatchPostOperationRequest {
    version: VersionFormsFormSubmissionsBatchPostOperationVersionEnum;
    form: number;
    include?: VersionFormsFormSubmissionsBatchPostOperationIncludeEnum;
    versionFormsFormSubmissionsBatchPostRequest?: VersionFormsFormSubmissionsBatchPostRequest;
}

export interface VersionFormsFormSubmissionsGetRequest {
    version: VersionFormsFormSubmissionsGetVersionEnum;
    form: number;
    include?: VersionFormsFormSubmissionsGetIncludeEnum;
}

export interface VersionFormsFormSubmissionsPostRequest {
    version: VersionFormsFormSubmissionsPostVersionEnum;
    form: number;
    include?: VersionFormsFormSubmissionsPostIncludeEnum;
    submission?: Submission;
}

export interface VersionFormsFormSubmissionsSubmissionDeleteRequest {
    version: VersionFormsFormSubmissionsSubmissionDeleteVersionEnum;
    form: number;
    submission: number;
    include?: VersionFormsFormSubmissionsSubmissionDeleteIncludeEnum;
}

export interface VersionFormsFormSubmissionsSubmissionDissociateDeleteRequest {
    version: VersionFormsFormSubmissionsSubmissionDissociateDeleteVersionEnum;
    form: number;
    submission: number;
    include?: VersionFormsFormSubmissionsSubmissionDissociateDeleteIncludeEnum;
}

export interface VersionFormsFormSubmissionsSubmissionGetRequest {
    version: VersionFormsFormSubmissionsSubmissionGetVersionEnum;
    form: number;
    submission: number;
    include?: VersionFormsFormSubmissionsSubmissionGetIncludeEnum;
}

export interface VersionFormsFormSubmissionsSubmissionPatchRequest {
    version: VersionFormsFormSubmissionsSubmissionPatchVersionEnum;
    form: number;
    submission: number;
    include?: VersionFormsFormSubmissionsSubmissionPatchIncludeEnum;
    submission2?: Submission;
}

/**
 * 
 */
export class FormsSubmissionsApi extends runtime.BaseAPI {

    /**
     * Associate submission with form
     */
    async versionFormsFormSubmissionsAssociatePostRaw(requestParameters: VersionFormsFormSubmissionsAssociatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionFormsFormSubmissionsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionFormsFormSubmissionsAssociatePost().'
            );
        }

        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling versionFormsFormSubmissionsAssociatePost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/forms/{form}/submissions/associate`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters['form']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionFormsFormSubmissionsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Associate submission with form
     */
    async versionFormsFormSubmissionsAssociatePost(requestParameters: VersionFormsFormSubmissionsAssociatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionFormsFormSubmissionsPost201Response> {
        const response = await this.versionFormsFormSubmissionsAssociatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a batch of submissions
     */
    async versionFormsFormSubmissionsBatchDeleteRaw(requestParameters: VersionFormsFormSubmissionsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionFormsFormSubmissionsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionFormsFormSubmissionsBatchDelete().'
            );
        }

        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling versionFormsFormSubmissionsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/forms/{form}/submissions/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters['form']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionFormsFormSubmissionsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of submissions
     */
    async versionFormsFormSubmissionsBatchDelete(requestParameters: VersionFormsFormSubmissionsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionFormsFormSubmissionsBatchPost200Response> {
        const response = await this.versionFormsFormSubmissionsBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of submissions
     */
    async versionFormsFormSubmissionsBatchPatchRaw(requestParameters: VersionFormsFormSubmissionsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionFormsFormSubmissionsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionFormsFormSubmissionsBatchPatch().'
            );
        }

        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling versionFormsFormSubmissionsBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/forms/{form}/submissions/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters['form']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionFormsFormSubmissionsBatchPatchRequestToJSON(requestParameters['versionFormsFormSubmissionsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionFormsFormSubmissionsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of submissions
     */
    async versionFormsFormSubmissionsBatchPatch(requestParameters: VersionFormsFormSubmissionsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionFormsFormSubmissionsBatchPost200Response> {
        const response = await this.versionFormsFormSubmissionsBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of submissions
     */
    async versionFormsFormSubmissionsBatchPostRaw(requestParameters: VersionFormsFormSubmissionsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionFormsFormSubmissionsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionFormsFormSubmissionsBatchPost().'
            );
        }

        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling versionFormsFormSubmissionsBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/forms/{form}/submissions/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters['form']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionFormsFormSubmissionsBatchPostRequestToJSON(requestParameters['versionFormsFormSubmissionsBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionFormsFormSubmissionsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of submissions
     */
    async versionFormsFormSubmissionsBatchPost(requestParameters: VersionFormsFormSubmissionsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionFormsFormSubmissionsBatchPost200Response> {
        const response = await this.versionFormsFormSubmissionsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of submissions
     */
    async versionFormsFormSubmissionsGetRaw(requestParameters: VersionFormsFormSubmissionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionFormsFormSubmissionsGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionFormsFormSubmissionsGet().'
            );
        }

        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling versionFormsFormSubmissionsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/forms/{form}/submissions`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters['form']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionFormsFormSubmissionsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of submissions
     */
    async versionFormsFormSubmissionsGet(requestParameters: VersionFormsFormSubmissionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionFormsFormSubmissionsGet200Response> {
        const response = await this.versionFormsFormSubmissionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create submission
     */
    async versionFormsFormSubmissionsPostRaw(requestParameters: VersionFormsFormSubmissionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionFormsFormSubmissionsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionFormsFormSubmissionsPost().'
            );
        }

        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling versionFormsFormSubmissionsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/forms/{form}/submissions`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters['form']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubmissionToJSON(requestParameters['submission']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionFormsFormSubmissionsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create submission
     */
    async versionFormsFormSubmissionsPost(requestParameters: VersionFormsFormSubmissionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionFormsFormSubmissionsPost201Response> {
        const response = await this.versionFormsFormSubmissionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete submission
     */
    async versionFormsFormSubmissionsSubmissionDeleteRaw(requestParameters: VersionFormsFormSubmissionsSubmissionDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionFormsFormSubmissionsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionFormsFormSubmissionsSubmissionDelete().'
            );
        }

        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling versionFormsFormSubmissionsSubmissionDelete().'
            );
        }

        if (requestParameters['submission'] == null) {
            throw new runtime.RequiredError(
                'submission',
                'Required parameter "submission" was null or undefined when calling versionFormsFormSubmissionsSubmissionDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/forms/{form}/submissions/{submission}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters['form']))).replace(`{${"submission"}}`, encodeURIComponent(String(requestParameters['submission']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionFormsFormSubmissionsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete submission
     */
    async versionFormsFormSubmissionsSubmissionDelete(requestParameters: VersionFormsFormSubmissionsSubmissionDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionFormsFormSubmissionsPost201Response> {
        const response = await this.versionFormsFormSubmissionsSubmissionDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Dissociate submission from form
     */
    async versionFormsFormSubmissionsSubmissionDissociateDeleteRaw(requestParameters: VersionFormsFormSubmissionsSubmissionDissociateDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionFormsFormSubmissionsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionFormsFormSubmissionsSubmissionDissociateDelete().'
            );
        }

        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling versionFormsFormSubmissionsSubmissionDissociateDelete().'
            );
        }

        if (requestParameters['submission'] == null) {
            throw new runtime.RequiredError(
                'submission',
                'Required parameter "submission" was null or undefined when calling versionFormsFormSubmissionsSubmissionDissociateDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/forms/{form}/submissions/{submission}/dissociate`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters['form']))).replace(`{${"submission"}}`, encodeURIComponent(String(requestParameters['submission']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionFormsFormSubmissionsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Dissociate submission from form
     */
    async versionFormsFormSubmissionsSubmissionDissociateDelete(requestParameters: VersionFormsFormSubmissionsSubmissionDissociateDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionFormsFormSubmissionsPost201Response> {
        const response = await this.versionFormsFormSubmissionsSubmissionDissociateDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get submission
     */
    async versionFormsFormSubmissionsSubmissionGetRaw(requestParameters: VersionFormsFormSubmissionsSubmissionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionFormsFormSubmissionsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionFormsFormSubmissionsSubmissionGet().'
            );
        }

        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling versionFormsFormSubmissionsSubmissionGet().'
            );
        }

        if (requestParameters['submission'] == null) {
            throw new runtime.RequiredError(
                'submission',
                'Required parameter "submission" was null or undefined when calling versionFormsFormSubmissionsSubmissionGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/forms/{form}/submissions/{submission}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters['form']))).replace(`{${"submission"}}`, encodeURIComponent(String(requestParameters['submission']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionFormsFormSubmissionsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get submission
     */
    async versionFormsFormSubmissionsSubmissionGet(requestParameters: VersionFormsFormSubmissionsSubmissionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionFormsFormSubmissionsPost201Response> {
        const response = await this.versionFormsFormSubmissionsSubmissionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update submission
     */
    async versionFormsFormSubmissionsSubmissionPatchRaw(requestParameters: VersionFormsFormSubmissionsSubmissionPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionFormsFormSubmissionsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionFormsFormSubmissionsSubmissionPatch().'
            );
        }

        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling versionFormsFormSubmissionsSubmissionPatch().'
            );
        }

        if (requestParameters['submission'] == null) {
            throw new runtime.RequiredError(
                'submission',
                'Required parameter "submission" was null or undefined when calling versionFormsFormSubmissionsSubmissionPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/forms/{form}/submissions/{submission}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters['form']))).replace(`{${"submission"}}`, encodeURIComponent(String(requestParameters['submission']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SubmissionToJSON(requestParameters['submission2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionFormsFormSubmissionsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update submission
     */
    async versionFormsFormSubmissionsSubmissionPatch(requestParameters: VersionFormsFormSubmissionsSubmissionPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionFormsFormSubmissionsPost201Response> {
        const response = await this.versionFormsFormSubmissionsSubmissionPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionFormsFormSubmissionsAssociatePostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionFormsFormSubmissionsAssociatePostVersionEnum = typeof VersionFormsFormSubmissionsAssociatePostVersionEnum[keyof typeof VersionFormsFormSubmissionsAssociatePostVersionEnum];
/**
 * @export
 */
export const VersionFormsFormSubmissionsAssociatePostIncludeEnum = {
    Form: 'form',
    User: 'user',
    Statuses: 'statuses',
    StatusesRecord: 'statuses.record'
} as const;
export type VersionFormsFormSubmissionsAssociatePostIncludeEnum = typeof VersionFormsFormSubmissionsAssociatePostIncludeEnum[keyof typeof VersionFormsFormSubmissionsAssociatePostIncludeEnum];
/**
 * @export
 */
export const VersionFormsFormSubmissionsBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionFormsFormSubmissionsBatchDeleteVersionEnum = typeof VersionFormsFormSubmissionsBatchDeleteVersionEnum[keyof typeof VersionFormsFormSubmissionsBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionFormsFormSubmissionsBatchDeleteIncludeEnum = {
    Form: 'form',
    User: 'user',
    Statuses: 'statuses',
    StatusesRecord: 'statuses.record'
} as const;
export type VersionFormsFormSubmissionsBatchDeleteIncludeEnum = typeof VersionFormsFormSubmissionsBatchDeleteIncludeEnum[keyof typeof VersionFormsFormSubmissionsBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionFormsFormSubmissionsBatchPatchOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionFormsFormSubmissionsBatchPatchOperationVersionEnum = typeof VersionFormsFormSubmissionsBatchPatchOperationVersionEnum[keyof typeof VersionFormsFormSubmissionsBatchPatchOperationVersionEnum];
/**
 * @export
 */
export const VersionFormsFormSubmissionsBatchPatchOperationIncludeEnum = {
    Form: 'form',
    User: 'user',
    Statuses: 'statuses',
    StatusesRecord: 'statuses.record'
} as const;
export type VersionFormsFormSubmissionsBatchPatchOperationIncludeEnum = typeof VersionFormsFormSubmissionsBatchPatchOperationIncludeEnum[keyof typeof VersionFormsFormSubmissionsBatchPatchOperationIncludeEnum];
/**
 * @export
 */
export const VersionFormsFormSubmissionsBatchPostOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionFormsFormSubmissionsBatchPostOperationVersionEnum = typeof VersionFormsFormSubmissionsBatchPostOperationVersionEnum[keyof typeof VersionFormsFormSubmissionsBatchPostOperationVersionEnum];
/**
 * @export
 */
export const VersionFormsFormSubmissionsBatchPostOperationIncludeEnum = {
    Form: 'form',
    User: 'user',
    Statuses: 'statuses',
    StatusesRecord: 'statuses.record'
} as const;
export type VersionFormsFormSubmissionsBatchPostOperationIncludeEnum = typeof VersionFormsFormSubmissionsBatchPostOperationIncludeEnum[keyof typeof VersionFormsFormSubmissionsBatchPostOperationIncludeEnum];
/**
 * @export
 */
export const VersionFormsFormSubmissionsGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionFormsFormSubmissionsGetVersionEnum = typeof VersionFormsFormSubmissionsGetVersionEnum[keyof typeof VersionFormsFormSubmissionsGetVersionEnum];
/**
 * @export
 */
export const VersionFormsFormSubmissionsGetIncludeEnum = {
    Form: 'form',
    User: 'user',
    Statuses: 'statuses',
    StatusesRecord: 'statuses.record'
} as const;
export type VersionFormsFormSubmissionsGetIncludeEnum = typeof VersionFormsFormSubmissionsGetIncludeEnum[keyof typeof VersionFormsFormSubmissionsGetIncludeEnum];
/**
 * @export
 */
export const VersionFormsFormSubmissionsPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionFormsFormSubmissionsPostVersionEnum = typeof VersionFormsFormSubmissionsPostVersionEnum[keyof typeof VersionFormsFormSubmissionsPostVersionEnum];
/**
 * @export
 */
export const VersionFormsFormSubmissionsPostIncludeEnum = {
    Form: 'form',
    User: 'user',
    Statuses: 'statuses',
    StatusesRecord: 'statuses.record'
} as const;
export type VersionFormsFormSubmissionsPostIncludeEnum = typeof VersionFormsFormSubmissionsPostIncludeEnum[keyof typeof VersionFormsFormSubmissionsPostIncludeEnum];
/**
 * @export
 */
export const VersionFormsFormSubmissionsSubmissionDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionFormsFormSubmissionsSubmissionDeleteVersionEnum = typeof VersionFormsFormSubmissionsSubmissionDeleteVersionEnum[keyof typeof VersionFormsFormSubmissionsSubmissionDeleteVersionEnum];
/**
 * @export
 */
export const VersionFormsFormSubmissionsSubmissionDeleteIncludeEnum = {
    Form: 'form',
    User: 'user',
    Statuses: 'statuses',
    StatusesRecord: 'statuses.record'
} as const;
export type VersionFormsFormSubmissionsSubmissionDeleteIncludeEnum = typeof VersionFormsFormSubmissionsSubmissionDeleteIncludeEnum[keyof typeof VersionFormsFormSubmissionsSubmissionDeleteIncludeEnum];
/**
 * @export
 */
export const VersionFormsFormSubmissionsSubmissionDissociateDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionFormsFormSubmissionsSubmissionDissociateDeleteVersionEnum = typeof VersionFormsFormSubmissionsSubmissionDissociateDeleteVersionEnum[keyof typeof VersionFormsFormSubmissionsSubmissionDissociateDeleteVersionEnum];
/**
 * @export
 */
export const VersionFormsFormSubmissionsSubmissionDissociateDeleteIncludeEnum = {
    Form: 'form',
    User: 'user',
    Statuses: 'statuses',
    StatusesRecord: 'statuses.record'
} as const;
export type VersionFormsFormSubmissionsSubmissionDissociateDeleteIncludeEnum = typeof VersionFormsFormSubmissionsSubmissionDissociateDeleteIncludeEnum[keyof typeof VersionFormsFormSubmissionsSubmissionDissociateDeleteIncludeEnum];
/**
 * @export
 */
export const VersionFormsFormSubmissionsSubmissionGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionFormsFormSubmissionsSubmissionGetVersionEnum = typeof VersionFormsFormSubmissionsSubmissionGetVersionEnum[keyof typeof VersionFormsFormSubmissionsSubmissionGetVersionEnum];
/**
 * @export
 */
export const VersionFormsFormSubmissionsSubmissionGetIncludeEnum = {
    Form: 'form',
    User: 'user',
    Statuses: 'statuses',
    StatusesRecord: 'statuses.record'
} as const;
export type VersionFormsFormSubmissionsSubmissionGetIncludeEnum = typeof VersionFormsFormSubmissionsSubmissionGetIncludeEnum[keyof typeof VersionFormsFormSubmissionsSubmissionGetIncludeEnum];
/**
 * @export
 */
export const VersionFormsFormSubmissionsSubmissionPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionFormsFormSubmissionsSubmissionPatchVersionEnum = typeof VersionFormsFormSubmissionsSubmissionPatchVersionEnum[keyof typeof VersionFormsFormSubmissionsSubmissionPatchVersionEnum];
/**
 * @export
 */
export const VersionFormsFormSubmissionsSubmissionPatchIncludeEnum = {
    Form: 'form',
    User: 'user',
    Statuses: 'statuses',
    StatusesRecord: 'statuses.record'
} as const;
export type VersionFormsFormSubmissionsSubmissionPatchIncludeEnum = typeof VersionFormsFormSubmissionsSubmissionPatchIncludeEnum[keyof typeof VersionFormsFormSubmissionsSubmissionPatchIncludeEnum];
