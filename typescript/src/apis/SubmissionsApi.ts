/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Submission,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionFormsFormSubmissionsBatchPatchRequest,
  VersionFormsFormSubmissionsBatchPost200Response,
  VersionFormsFormSubmissionsBatchPostRequest,
  VersionFormsFormSubmissionsGet200Response,
  VersionFormsFormSubmissionsPost201Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
} from '../models/index';
import {
    SubmissionFromJSON,
    SubmissionToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionFormsFormSubmissionsBatchPatchRequestFromJSON,
    VersionFormsFormSubmissionsBatchPatchRequestToJSON,
    VersionFormsFormSubmissionsBatchPost200ResponseFromJSON,
    VersionFormsFormSubmissionsBatchPost200ResponseToJSON,
    VersionFormsFormSubmissionsBatchPostRequestFromJSON,
    VersionFormsFormSubmissionsBatchPostRequestToJSON,
    VersionFormsFormSubmissionsGet200ResponseFromJSON,
    VersionFormsFormSubmissionsGet200ResponseToJSON,
    VersionFormsFormSubmissionsPost201ResponseFromJSON,
    VersionFormsFormSubmissionsPost201ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
} from '../models/index';

export interface VersionSubmissionsBatchDeleteRequest {
    version: VersionSubmissionsBatchDeleteVersionEnum;
    include?: VersionSubmissionsBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionSubmissionsBatchPatchRequest {
    version: VersionSubmissionsBatchPatchVersionEnum;
    include?: VersionSubmissionsBatchPatchIncludeEnum;
    versionFormsFormSubmissionsBatchPatchRequest?: VersionFormsFormSubmissionsBatchPatchRequest;
}

export interface VersionSubmissionsBatchPostRequest {
    version: VersionSubmissionsBatchPostVersionEnum;
    include?: VersionSubmissionsBatchPostIncludeEnum;
    versionFormsFormSubmissionsBatchPostRequest?: VersionFormsFormSubmissionsBatchPostRequest;
}

export interface VersionSubmissionsGetRequest {
    version: VersionSubmissionsGetVersionEnum;
    include?: VersionSubmissionsGetIncludeEnum;
}

export interface VersionSubmissionsPostRequest {
    version: VersionSubmissionsPostVersionEnum;
    include?: VersionSubmissionsPostIncludeEnum;
    submission?: Submission;
}

export interface VersionSubmissionsSubmissionDeleteRequest {
    version: VersionSubmissionsSubmissionDeleteVersionEnum;
    submission: number;
    include?: VersionSubmissionsSubmissionDeleteIncludeEnum;
}

export interface VersionSubmissionsSubmissionGetRequest {
    version: VersionSubmissionsSubmissionGetVersionEnum;
    submission: number;
    include?: VersionSubmissionsSubmissionGetIncludeEnum;
}

export interface VersionSubmissionsSubmissionPatchRequest {
    version: VersionSubmissionsSubmissionPatchVersionEnum;
    submission: number;
    include?: VersionSubmissionsSubmissionPatchIncludeEnum;
    submission2?: Submission;
}

/**
 * 
 */
export class SubmissionsApi extends runtime.BaseAPI {

    /**
     * Delete a batch of submissions
     */
    async versionSubmissionsBatchDeleteRaw(requestParameters: VersionSubmissionsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionFormsFormSubmissionsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionSubmissionsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/submissions/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionFormsFormSubmissionsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of submissions
     */
    async versionSubmissionsBatchDelete(requestParameters: VersionSubmissionsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionFormsFormSubmissionsBatchPost200Response> {
        const response = await this.versionSubmissionsBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of submissions
     */
    async versionSubmissionsBatchPatchRaw(requestParameters: VersionSubmissionsBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionFormsFormSubmissionsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionSubmissionsBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/submissions/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionFormsFormSubmissionsBatchPatchRequestToJSON(requestParameters['versionFormsFormSubmissionsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionFormsFormSubmissionsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of submissions
     */
    async versionSubmissionsBatchPatch(requestParameters: VersionSubmissionsBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionFormsFormSubmissionsBatchPost200Response> {
        const response = await this.versionSubmissionsBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of submissions
     */
    async versionSubmissionsBatchPostRaw(requestParameters: VersionSubmissionsBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionFormsFormSubmissionsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionSubmissionsBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/submissions/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionFormsFormSubmissionsBatchPostRequestToJSON(requestParameters['versionFormsFormSubmissionsBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionFormsFormSubmissionsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of submissions
     */
    async versionSubmissionsBatchPost(requestParameters: VersionSubmissionsBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionFormsFormSubmissionsBatchPost200Response> {
        const response = await this.versionSubmissionsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of submissions
     */
    async versionSubmissionsGetRaw(requestParameters: VersionSubmissionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionFormsFormSubmissionsGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionSubmissionsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/submissions`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionFormsFormSubmissionsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of submissions
     */
    async versionSubmissionsGet(requestParameters: VersionSubmissionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionFormsFormSubmissionsGet200Response> {
        const response = await this.versionSubmissionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create submission
     */
    async versionSubmissionsPostRaw(requestParameters: VersionSubmissionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionFormsFormSubmissionsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionSubmissionsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/submissions`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubmissionToJSON(requestParameters['submission']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionFormsFormSubmissionsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create submission
     */
    async versionSubmissionsPost(requestParameters: VersionSubmissionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionFormsFormSubmissionsPost201Response> {
        const response = await this.versionSubmissionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete submission
     */
    async versionSubmissionsSubmissionDeleteRaw(requestParameters: VersionSubmissionsSubmissionDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionFormsFormSubmissionsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionSubmissionsSubmissionDelete().'
            );
        }

        if (requestParameters['submission'] == null) {
            throw new runtime.RequiredError(
                'submission',
                'Required parameter "submission" was null or undefined when calling versionSubmissionsSubmissionDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/submissions/{submission}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"submission"}}`, encodeURIComponent(String(requestParameters['submission']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionFormsFormSubmissionsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete submission
     */
    async versionSubmissionsSubmissionDelete(requestParameters: VersionSubmissionsSubmissionDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionFormsFormSubmissionsPost201Response> {
        const response = await this.versionSubmissionsSubmissionDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get submission
     */
    async versionSubmissionsSubmissionGetRaw(requestParameters: VersionSubmissionsSubmissionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionFormsFormSubmissionsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionSubmissionsSubmissionGet().'
            );
        }

        if (requestParameters['submission'] == null) {
            throw new runtime.RequiredError(
                'submission',
                'Required parameter "submission" was null or undefined when calling versionSubmissionsSubmissionGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/submissions/{submission}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"submission"}}`, encodeURIComponent(String(requestParameters['submission']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionFormsFormSubmissionsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get submission
     */
    async versionSubmissionsSubmissionGet(requestParameters: VersionSubmissionsSubmissionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionFormsFormSubmissionsPost201Response> {
        const response = await this.versionSubmissionsSubmissionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update submission
     */
    async versionSubmissionsSubmissionPatchRaw(requestParameters: VersionSubmissionsSubmissionPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionFormsFormSubmissionsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionSubmissionsSubmissionPatch().'
            );
        }

        if (requestParameters['submission'] == null) {
            throw new runtime.RequiredError(
                'submission',
                'Required parameter "submission" was null or undefined when calling versionSubmissionsSubmissionPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/submissions/{submission}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"submission"}}`, encodeURIComponent(String(requestParameters['submission']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SubmissionToJSON(requestParameters['submission2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionFormsFormSubmissionsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update submission
     */
    async versionSubmissionsSubmissionPatch(requestParameters: VersionSubmissionsSubmissionPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionFormsFormSubmissionsPost201Response> {
        const response = await this.versionSubmissionsSubmissionPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionSubmissionsBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionSubmissionsBatchDeleteVersionEnum = typeof VersionSubmissionsBatchDeleteVersionEnum[keyof typeof VersionSubmissionsBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionSubmissionsBatchDeleteIncludeEnum = {
    Comments: 'comments',
    Comments2: 'comments.*',
    Form: 'form',
    Form2: 'form.*',
    User: 'user',
    User2: 'user.*',
    Statuses: 'statuses',
    StatusesRecord: 'statuses.record'
} as const;
export type VersionSubmissionsBatchDeleteIncludeEnum = typeof VersionSubmissionsBatchDeleteIncludeEnum[keyof typeof VersionSubmissionsBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionSubmissionsBatchPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionSubmissionsBatchPatchVersionEnum = typeof VersionSubmissionsBatchPatchVersionEnum[keyof typeof VersionSubmissionsBatchPatchVersionEnum];
/**
 * @export
 */
export const VersionSubmissionsBatchPatchIncludeEnum = {
    Comments: 'comments',
    Comments2: 'comments.*',
    Form: 'form',
    Form2: 'form.*',
    User: 'user',
    User2: 'user.*',
    Statuses: 'statuses',
    StatusesRecord: 'statuses.record'
} as const;
export type VersionSubmissionsBatchPatchIncludeEnum = typeof VersionSubmissionsBatchPatchIncludeEnum[keyof typeof VersionSubmissionsBatchPatchIncludeEnum];
/**
 * @export
 */
export const VersionSubmissionsBatchPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionSubmissionsBatchPostVersionEnum = typeof VersionSubmissionsBatchPostVersionEnum[keyof typeof VersionSubmissionsBatchPostVersionEnum];
/**
 * @export
 */
export const VersionSubmissionsBatchPostIncludeEnum = {
    Comments: 'comments',
    Comments2: 'comments.*',
    Form: 'form',
    Form2: 'form.*',
    User: 'user',
    User2: 'user.*',
    Statuses: 'statuses',
    StatusesRecord: 'statuses.record'
} as const;
export type VersionSubmissionsBatchPostIncludeEnum = typeof VersionSubmissionsBatchPostIncludeEnum[keyof typeof VersionSubmissionsBatchPostIncludeEnum];
/**
 * @export
 */
export const VersionSubmissionsGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionSubmissionsGetVersionEnum = typeof VersionSubmissionsGetVersionEnum[keyof typeof VersionSubmissionsGetVersionEnum];
/**
 * @export
 */
export const VersionSubmissionsGetIncludeEnum = {
    Comments: 'comments',
    Comments2: 'comments.*',
    Form: 'form',
    Form2: 'form.*',
    User: 'user',
    User2: 'user.*',
    Statuses: 'statuses',
    StatusesRecord: 'statuses.record'
} as const;
export type VersionSubmissionsGetIncludeEnum = typeof VersionSubmissionsGetIncludeEnum[keyof typeof VersionSubmissionsGetIncludeEnum];
/**
 * @export
 */
export const VersionSubmissionsPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionSubmissionsPostVersionEnum = typeof VersionSubmissionsPostVersionEnum[keyof typeof VersionSubmissionsPostVersionEnum];
/**
 * @export
 */
export const VersionSubmissionsPostIncludeEnum = {
    Comments: 'comments',
    Comments2: 'comments.*',
    Form: 'form',
    Form2: 'form.*',
    User: 'user',
    User2: 'user.*',
    Statuses: 'statuses',
    StatusesRecord: 'statuses.record'
} as const;
export type VersionSubmissionsPostIncludeEnum = typeof VersionSubmissionsPostIncludeEnum[keyof typeof VersionSubmissionsPostIncludeEnum];
/**
 * @export
 */
export const VersionSubmissionsSubmissionDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionSubmissionsSubmissionDeleteVersionEnum = typeof VersionSubmissionsSubmissionDeleteVersionEnum[keyof typeof VersionSubmissionsSubmissionDeleteVersionEnum];
/**
 * @export
 */
export const VersionSubmissionsSubmissionDeleteIncludeEnum = {
    Comments: 'comments',
    Comments2: 'comments.*',
    Form: 'form',
    Form2: 'form.*',
    User: 'user',
    User2: 'user.*',
    Statuses: 'statuses',
    StatusesRecord: 'statuses.record'
} as const;
export type VersionSubmissionsSubmissionDeleteIncludeEnum = typeof VersionSubmissionsSubmissionDeleteIncludeEnum[keyof typeof VersionSubmissionsSubmissionDeleteIncludeEnum];
/**
 * @export
 */
export const VersionSubmissionsSubmissionGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionSubmissionsSubmissionGetVersionEnum = typeof VersionSubmissionsSubmissionGetVersionEnum[keyof typeof VersionSubmissionsSubmissionGetVersionEnum];
/**
 * @export
 */
export const VersionSubmissionsSubmissionGetIncludeEnum = {
    Comments: 'comments',
    Comments2: 'comments.*',
    Form: 'form',
    Form2: 'form.*',
    User: 'user',
    User2: 'user.*',
    Statuses: 'statuses',
    StatusesRecord: 'statuses.record'
} as const;
export type VersionSubmissionsSubmissionGetIncludeEnum = typeof VersionSubmissionsSubmissionGetIncludeEnum[keyof typeof VersionSubmissionsSubmissionGetIncludeEnum];
/**
 * @export
 */
export const VersionSubmissionsSubmissionPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionSubmissionsSubmissionPatchVersionEnum = typeof VersionSubmissionsSubmissionPatchVersionEnum[keyof typeof VersionSubmissionsSubmissionPatchVersionEnum];
/**
 * @export
 */
export const VersionSubmissionsSubmissionPatchIncludeEnum = {
    Comments: 'comments',
    Comments2: 'comments.*',
    Form: 'form',
    Form2: 'form.*',
    User: 'user',
    User2: 'user.*',
    Statuses: 'statuses',
    StatusesRecord: 'statuses.record'
} as const;
export type VersionSubmissionsSubmissionPatchIncludeEnum = typeof VersionSubmissionsSubmissionPatchIncludeEnum[keyof typeof VersionSubmissionsSubmissionPatchIncludeEnum];
