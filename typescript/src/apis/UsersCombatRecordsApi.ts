/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CombatRecord,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionCombatRecordsBatchPatchRequest,
  VersionCombatRecordsBatchPost200Response,
  VersionCombatRecordsBatchPostRequest,
  VersionCombatRecordsGet200Response,
  VersionCombatRecordsPost201Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
} from '../models/index';
import {
    CombatRecordFromJSON,
    CombatRecordToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionCombatRecordsBatchPatchRequestFromJSON,
    VersionCombatRecordsBatchPatchRequestToJSON,
    VersionCombatRecordsBatchPost200ResponseFromJSON,
    VersionCombatRecordsBatchPost200ResponseToJSON,
    VersionCombatRecordsBatchPostRequestFromJSON,
    VersionCombatRecordsBatchPostRequestToJSON,
    VersionCombatRecordsGet200ResponseFromJSON,
    VersionCombatRecordsGet200ResponseToJSON,
    VersionCombatRecordsPost201ResponseFromJSON,
    VersionCombatRecordsPost201ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
} from '../models/index';

export interface VersionUsersUserCombatRecordsAssociatePostRequest {
    version: VersionUsersUserCombatRecordsAssociatePostVersionEnum;
    user: number;
    include?: VersionUsersUserCombatRecordsAssociatePostIncludeEnum;
}

export interface VersionUsersUserCombatRecordsBatchDeleteRequest {
    version: VersionUsersUserCombatRecordsBatchDeleteVersionEnum;
    user: number;
    include?: VersionUsersUserCombatRecordsBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionUsersUserCombatRecordsBatchPatchRequest {
    version: VersionUsersUserCombatRecordsBatchPatchVersionEnum;
    user: number;
    include?: VersionUsersUserCombatRecordsBatchPatchIncludeEnum;
    versionCombatRecordsBatchPatchRequest?: VersionCombatRecordsBatchPatchRequest;
}

export interface VersionUsersUserCombatRecordsBatchPostRequest {
    version: VersionUsersUserCombatRecordsBatchPostVersionEnum;
    user: number;
    include?: VersionUsersUserCombatRecordsBatchPostIncludeEnum;
    versionCombatRecordsBatchPostRequest?: VersionCombatRecordsBatchPostRequest;
}

export interface VersionUsersUserCombatRecordsCombatRecordDeleteRequest {
    version: VersionUsersUserCombatRecordsCombatRecordDeleteVersionEnum;
    user: number;
    combatRecord: number;
    include?: VersionUsersUserCombatRecordsCombatRecordDeleteIncludeEnum;
}

export interface VersionUsersUserCombatRecordsCombatRecordDissociateDeleteRequest {
    version: VersionUsersUserCombatRecordsCombatRecordDissociateDeleteVersionEnum;
    user: number;
    combatRecord: number;
    include?: VersionUsersUserCombatRecordsCombatRecordDissociateDeleteIncludeEnum;
}

export interface VersionUsersUserCombatRecordsCombatRecordGetRequest {
    version: VersionUsersUserCombatRecordsCombatRecordGetVersionEnum;
    user: number;
    combatRecord: number;
    include?: VersionUsersUserCombatRecordsCombatRecordGetIncludeEnum;
}

export interface VersionUsersUserCombatRecordsCombatRecordPatchRequest {
    version: VersionUsersUserCombatRecordsCombatRecordPatchVersionEnum;
    user: number;
    combatRecord: number;
    include?: VersionUsersUserCombatRecordsCombatRecordPatchIncludeEnum;
    combatRecord2?: CombatRecord;
}

export interface VersionUsersUserCombatRecordsGetRequest {
    version: VersionUsersUserCombatRecordsGetVersionEnum;
    user: number;
    include?: VersionUsersUserCombatRecordsGetIncludeEnum;
}

export interface VersionUsersUserCombatRecordsPostRequest {
    version: VersionUsersUserCombatRecordsPostVersionEnum;
    user: number;
    include?: VersionUsersUserCombatRecordsPostIncludeEnum;
    combatRecord?: CombatRecord;
}

/**
 * 
 */
export class UsersCombatRecordsApi extends runtime.BaseAPI {

    /**
     * Associate combat record with user
     */
    async versionUsersUserCombatRecordsAssociatePostRaw(requestParameters: VersionUsersUserCombatRecordsAssociatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCombatRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserCombatRecordsAssociatePost().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserCombatRecordsAssociatePost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/combat-records/associate`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCombatRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Associate combat record with user
     */
    async versionUsersUserCombatRecordsAssociatePost(requestParameters: VersionUsersUserCombatRecordsAssociatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCombatRecordsPost201Response> {
        const response = await this.versionUsersUserCombatRecordsAssociatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a batch of combat records
     */
    async versionUsersUserCombatRecordsBatchDeleteRaw(requestParameters: VersionUsersUserCombatRecordsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCombatRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserCombatRecordsBatchDelete().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserCombatRecordsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/combat-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCombatRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of combat records
     */
    async versionUsersUserCombatRecordsBatchDelete(requestParameters: VersionUsersUserCombatRecordsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCombatRecordsBatchPost200Response> {
        const response = await this.versionUsersUserCombatRecordsBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of combat records
     */
    async versionUsersUserCombatRecordsBatchPatchRaw(requestParameters: VersionUsersUserCombatRecordsBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCombatRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserCombatRecordsBatchPatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserCombatRecordsBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/combat-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCombatRecordsBatchPatchRequestToJSON(requestParameters['versionCombatRecordsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCombatRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of combat records
     */
    async versionUsersUserCombatRecordsBatchPatch(requestParameters: VersionUsersUserCombatRecordsBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCombatRecordsBatchPost200Response> {
        const response = await this.versionUsersUserCombatRecordsBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of combat records
     */
    async versionUsersUserCombatRecordsBatchPostRaw(requestParameters: VersionUsersUserCombatRecordsBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCombatRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserCombatRecordsBatchPost().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserCombatRecordsBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/combat-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCombatRecordsBatchPostRequestToJSON(requestParameters['versionCombatRecordsBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCombatRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of combat records
     */
    async versionUsersUserCombatRecordsBatchPost(requestParameters: VersionUsersUserCombatRecordsBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCombatRecordsBatchPost200Response> {
        const response = await this.versionUsersUserCombatRecordsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete combat record
     */
    async versionUsersUserCombatRecordsCombatRecordDeleteRaw(requestParameters: VersionUsersUserCombatRecordsCombatRecordDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCombatRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserCombatRecordsCombatRecordDelete().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserCombatRecordsCombatRecordDelete().'
            );
        }

        if (requestParameters['combatRecord'] == null) {
            throw new runtime.RequiredError(
                'combatRecord',
                'Required parameter "combatRecord" was null or undefined when calling versionUsersUserCombatRecordsCombatRecordDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/combat-records/{combat_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"combat_record"}}`, encodeURIComponent(String(requestParameters['combatRecord']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCombatRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete combat record
     */
    async versionUsersUserCombatRecordsCombatRecordDelete(requestParameters: VersionUsersUserCombatRecordsCombatRecordDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCombatRecordsPost201Response> {
        const response = await this.versionUsersUserCombatRecordsCombatRecordDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Dissociate combat record from user
     */
    async versionUsersUserCombatRecordsCombatRecordDissociateDeleteRaw(requestParameters: VersionUsersUserCombatRecordsCombatRecordDissociateDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCombatRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserCombatRecordsCombatRecordDissociateDelete().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserCombatRecordsCombatRecordDissociateDelete().'
            );
        }

        if (requestParameters['combatRecord'] == null) {
            throw new runtime.RequiredError(
                'combatRecord',
                'Required parameter "combatRecord" was null or undefined when calling versionUsersUserCombatRecordsCombatRecordDissociateDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/combat-records/{combat_record}/dissociate`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"combat_record"}}`, encodeURIComponent(String(requestParameters['combatRecord']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCombatRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Dissociate combat record from user
     */
    async versionUsersUserCombatRecordsCombatRecordDissociateDelete(requestParameters: VersionUsersUserCombatRecordsCombatRecordDissociateDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCombatRecordsPost201Response> {
        const response = await this.versionUsersUserCombatRecordsCombatRecordDissociateDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get combat record
     */
    async versionUsersUserCombatRecordsCombatRecordGetRaw(requestParameters: VersionUsersUserCombatRecordsCombatRecordGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCombatRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserCombatRecordsCombatRecordGet().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserCombatRecordsCombatRecordGet().'
            );
        }

        if (requestParameters['combatRecord'] == null) {
            throw new runtime.RequiredError(
                'combatRecord',
                'Required parameter "combatRecord" was null or undefined when calling versionUsersUserCombatRecordsCombatRecordGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/combat-records/{combat_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"combat_record"}}`, encodeURIComponent(String(requestParameters['combatRecord']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCombatRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get combat record
     */
    async versionUsersUserCombatRecordsCombatRecordGet(requestParameters: VersionUsersUserCombatRecordsCombatRecordGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCombatRecordsPost201Response> {
        const response = await this.versionUsersUserCombatRecordsCombatRecordGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update combat record
     */
    async versionUsersUserCombatRecordsCombatRecordPatchRaw(requestParameters: VersionUsersUserCombatRecordsCombatRecordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCombatRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserCombatRecordsCombatRecordPatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserCombatRecordsCombatRecordPatch().'
            );
        }

        if (requestParameters['combatRecord'] == null) {
            throw new runtime.RequiredError(
                'combatRecord',
                'Required parameter "combatRecord" was null or undefined when calling versionUsersUserCombatRecordsCombatRecordPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/combat-records/{combat_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"combat_record"}}`, encodeURIComponent(String(requestParameters['combatRecord']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CombatRecordToJSON(requestParameters['combatRecord2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCombatRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update combat record
     */
    async versionUsersUserCombatRecordsCombatRecordPatch(requestParameters: VersionUsersUserCombatRecordsCombatRecordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCombatRecordsPost201Response> {
        const response = await this.versionUsersUserCombatRecordsCombatRecordPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of combat records
     */
    async versionUsersUserCombatRecordsGetRaw(requestParameters: VersionUsersUserCombatRecordsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCombatRecordsGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserCombatRecordsGet().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserCombatRecordsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/combat-records`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCombatRecordsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of combat records
     */
    async versionUsersUserCombatRecordsGet(requestParameters: VersionUsersUserCombatRecordsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCombatRecordsGet200Response> {
        const response = await this.versionUsersUserCombatRecordsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create combat record
     */
    async versionUsersUserCombatRecordsPostRaw(requestParameters: VersionUsersUserCombatRecordsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCombatRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserCombatRecordsPost().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserCombatRecordsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/combat-records`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CombatRecordToJSON(requestParameters['combatRecord']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCombatRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create combat record
     */
    async versionUsersUserCombatRecordsPost(requestParameters: VersionUsersUserCombatRecordsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCombatRecordsPost201Response> {
        const response = await this.versionUsersUserCombatRecordsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionUsersUserCombatRecordsAssociatePostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserCombatRecordsAssociatePostVersionEnum = typeof VersionUsersUserCombatRecordsAssociatePostVersionEnum[keyof typeof VersionUsersUserCombatRecordsAssociatePostVersionEnum];
/**
 * @export
 */
export const VersionUsersUserCombatRecordsAssociatePostIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document'
} as const;
export type VersionUsersUserCombatRecordsAssociatePostIncludeEnum = typeof VersionUsersUserCombatRecordsAssociatePostIncludeEnum[keyof typeof VersionUsersUserCombatRecordsAssociatePostIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserCombatRecordsBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserCombatRecordsBatchDeleteVersionEnum = typeof VersionUsersUserCombatRecordsBatchDeleteVersionEnum[keyof typeof VersionUsersUserCombatRecordsBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersUserCombatRecordsBatchDeleteIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document'
} as const;
export type VersionUsersUserCombatRecordsBatchDeleteIncludeEnum = typeof VersionUsersUserCombatRecordsBatchDeleteIncludeEnum[keyof typeof VersionUsersUserCombatRecordsBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserCombatRecordsBatchPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserCombatRecordsBatchPatchVersionEnum = typeof VersionUsersUserCombatRecordsBatchPatchVersionEnum[keyof typeof VersionUsersUserCombatRecordsBatchPatchVersionEnum];
/**
 * @export
 */
export const VersionUsersUserCombatRecordsBatchPatchIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document'
} as const;
export type VersionUsersUserCombatRecordsBatchPatchIncludeEnum = typeof VersionUsersUserCombatRecordsBatchPatchIncludeEnum[keyof typeof VersionUsersUserCombatRecordsBatchPatchIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserCombatRecordsBatchPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserCombatRecordsBatchPostVersionEnum = typeof VersionUsersUserCombatRecordsBatchPostVersionEnum[keyof typeof VersionUsersUserCombatRecordsBatchPostVersionEnum];
/**
 * @export
 */
export const VersionUsersUserCombatRecordsBatchPostIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document'
} as const;
export type VersionUsersUserCombatRecordsBatchPostIncludeEnum = typeof VersionUsersUserCombatRecordsBatchPostIncludeEnum[keyof typeof VersionUsersUserCombatRecordsBatchPostIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserCombatRecordsCombatRecordDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserCombatRecordsCombatRecordDeleteVersionEnum = typeof VersionUsersUserCombatRecordsCombatRecordDeleteVersionEnum[keyof typeof VersionUsersUserCombatRecordsCombatRecordDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersUserCombatRecordsCombatRecordDeleteIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document'
} as const;
export type VersionUsersUserCombatRecordsCombatRecordDeleteIncludeEnum = typeof VersionUsersUserCombatRecordsCombatRecordDeleteIncludeEnum[keyof typeof VersionUsersUserCombatRecordsCombatRecordDeleteIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserCombatRecordsCombatRecordDissociateDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserCombatRecordsCombatRecordDissociateDeleteVersionEnum = typeof VersionUsersUserCombatRecordsCombatRecordDissociateDeleteVersionEnum[keyof typeof VersionUsersUserCombatRecordsCombatRecordDissociateDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersUserCombatRecordsCombatRecordDissociateDeleteIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document'
} as const;
export type VersionUsersUserCombatRecordsCombatRecordDissociateDeleteIncludeEnum = typeof VersionUsersUserCombatRecordsCombatRecordDissociateDeleteIncludeEnum[keyof typeof VersionUsersUserCombatRecordsCombatRecordDissociateDeleteIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserCombatRecordsCombatRecordGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserCombatRecordsCombatRecordGetVersionEnum = typeof VersionUsersUserCombatRecordsCombatRecordGetVersionEnum[keyof typeof VersionUsersUserCombatRecordsCombatRecordGetVersionEnum];
/**
 * @export
 */
export const VersionUsersUserCombatRecordsCombatRecordGetIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document'
} as const;
export type VersionUsersUserCombatRecordsCombatRecordGetIncludeEnum = typeof VersionUsersUserCombatRecordsCombatRecordGetIncludeEnum[keyof typeof VersionUsersUserCombatRecordsCombatRecordGetIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserCombatRecordsCombatRecordPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserCombatRecordsCombatRecordPatchVersionEnum = typeof VersionUsersUserCombatRecordsCombatRecordPatchVersionEnum[keyof typeof VersionUsersUserCombatRecordsCombatRecordPatchVersionEnum];
/**
 * @export
 */
export const VersionUsersUserCombatRecordsCombatRecordPatchIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document'
} as const;
export type VersionUsersUserCombatRecordsCombatRecordPatchIncludeEnum = typeof VersionUsersUserCombatRecordsCombatRecordPatchIncludeEnum[keyof typeof VersionUsersUserCombatRecordsCombatRecordPatchIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserCombatRecordsGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserCombatRecordsGetVersionEnum = typeof VersionUsersUserCombatRecordsGetVersionEnum[keyof typeof VersionUsersUserCombatRecordsGetVersionEnum];
/**
 * @export
 */
export const VersionUsersUserCombatRecordsGetIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document'
} as const;
export type VersionUsersUserCombatRecordsGetIncludeEnum = typeof VersionUsersUserCombatRecordsGetIncludeEnum[keyof typeof VersionUsersUserCombatRecordsGetIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserCombatRecordsPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserCombatRecordsPostVersionEnum = typeof VersionUsersUserCombatRecordsPostVersionEnum[keyof typeof VersionUsersUserCombatRecordsPostVersionEnum];
/**
 * @export
 */
export const VersionUsersUserCombatRecordsPostIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document'
} as const;
export type VersionUsersUserCombatRecordsPostIncludeEnum = typeof VersionUsersUserCombatRecordsPostIncludeEnum[keyof typeof VersionUsersUserCombatRecordsPostIncludeEnum];
