/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsPost422Response,
  VersionCategoriesCategoryAwardsAttachPost200Response,
  VersionCategoriesCategoryAwardsAttachPostRequest,
  VersionCategoriesCategoryAwardsDetachDelete200Response,
  VersionCategoriesCategoryAwardsSyncPatch200Response,
  VersionMeGet200Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
} from '../models/index';
import {
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionCategoriesCategoryAwardsAttachPost200ResponseFromJSON,
    VersionCategoriesCategoryAwardsAttachPost200ResponseToJSON,
    VersionCategoriesCategoryAwardsAttachPostRequestFromJSON,
    VersionCategoriesCategoryAwardsAttachPostRequestToJSON,
    VersionCategoriesCategoryAwardsDetachDelete200ResponseFromJSON,
    VersionCategoriesCategoryAwardsDetachDelete200ResponseToJSON,
    VersionCategoriesCategoryAwardsSyncPatch200ResponseFromJSON,
    VersionCategoriesCategoryAwardsSyncPatch200ResponseToJSON,
    VersionMeGet200ResponseFromJSON,
    VersionMeGet200ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
} from '../models/index';

export interface VersionNewsfeedNewsfeedLikesAttachPostRequest {
    version: VersionNewsfeedNewsfeedLikesAttachPostVersionEnum;
    newsfeed: number;
    include?: VersionNewsfeedNewsfeedLikesAttachPostIncludeEnum;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

export interface VersionNewsfeedNewsfeedLikesDetachDeleteRequest {
    version: VersionNewsfeedNewsfeedLikesDetachDeleteVersionEnum;
    newsfeed: number;
    include?: VersionNewsfeedNewsfeedLikesDetachDeleteIncludeEnum;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

export interface VersionNewsfeedNewsfeedLikesGetRequest {
    version: VersionNewsfeedNewsfeedLikesGetVersionEnum;
    newsfeed: number;
    include?: VersionNewsfeedNewsfeedLikesGetIncludeEnum;
}

export interface VersionNewsfeedNewsfeedLikesSyncPatchRequest {
    version: VersionNewsfeedNewsfeedLikesSyncPatchVersionEnum;
    newsfeed: number;
    include?: VersionNewsfeedNewsfeedLikesSyncPatchIncludeEnum;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

/**
 * 
 */
export class NewsfeedLikesApi extends runtime.BaseAPI {

    /**
     * Attach users
     */
    async versionNewsfeedNewsfeedLikesAttachPostRaw(requestParameters: VersionNewsfeedNewsfeedLikesAttachPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsAttachPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionNewsfeedNewsfeedLikesAttachPost().'
            );
        }

        if (requestParameters['newsfeed'] == null) {
            throw new runtime.RequiredError(
                'newsfeed',
                'Required parameter "newsfeed" was null or undefined when calling versionNewsfeedNewsfeedLikesAttachPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/newsfeed/{newsfeed}/likes/attach`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"newsfeed"}}`, encodeURIComponent(String(requestParameters['newsfeed']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsAttachPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Attach users
     */
    async versionNewsfeedNewsfeedLikesAttachPost(requestParameters: VersionNewsfeedNewsfeedLikesAttachPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsAttachPost200Response> {
        const response = await this.versionNewsfeedNewsfeedLikesAttachPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Detach users
     */
    async versionNewsfeedNewsfeedLikesDetachDeleteRaw(requestParameters: VersionNewsfeedNewsfeedLikesDetachDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsDetachDelete200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionNewsfeedNewsfeedLikesDetachDelete().'
            );
        }

        if (requestParameters['newsfeed'] == null) {
            throw new runtime.RequiredError(
                'newsfeed',
                'Required parameter "newsfeed" was null or undefined when calling versionNewsfeedNewsfeedLikesDetachDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/newsfeed/{newsfeed}/likes/detach`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"newsfeed"}}`, encodeURIComponent(String(requestParameters['newsfeed']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsDetachDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Detach users
     */
    async versionNewsfeedNewsfeedLikesDetachDelete(requestParameters: VersionNewsfeedNewsfeedLikesDetachDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsDetachDelete200Response> {
        const response = await this.versionNewsfeedNewsfeedLikesDetachDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of users
     */
    async versionNewsfeedNewsfeedLikesGetRaw(requestParameters: VersionNewsfeedNewsfeedLikesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionMeGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionNewsfeedNewsfeedLikesGet().'
            );
        }

        if (requestParameters['newsfeed'] == null) {
            throw new runtime.RequiredError(
                'newsfeed',
                'Required parameter "newsfeed" was null or undefined when calling versionNewsfeedNewsfeedLikesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/newsfeed/{newsfeed}/likes`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"newsfeed"}}`, encodeURIComponent(String(requestParameters['newsfeed']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionMeGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of users
     */
    async versionNewsfeedNewsfeedLikesGet(requestParameters: VersionNewsfeedNewsfeedLikesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionMeGet200Response> {
        const response = await this.versionNewsfeedNewsfeedLikesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sync users
     */
    async versionNewsfeedNewsfeedLikesSyncPatchRaw(requestParameters: VersionNewsfeedNewsfeedLikesSyncPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsSyncPatch200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionNewsfeedNewsfeedLikesSyncPatch().'
            );
        }

        if (requestParameters['newsfeed'] == null) {
            throw new runtime.RequiredError(
                'newsfeed',
                'Required parameter "newsfeed" was null or undefined when calling versionNewsfeedNewsfeedLikesSyncPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/newsfeed/{newsfeed}/likes/sync`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"newsfeed"}}`, encodeURIComponent(String(requestParameters['newsfeed']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsSyncPatch200ResponseFromJSON(jsonValue));
    }

    /**
     * Sync users
     */
    async versionNewsfeedNewsfeedLikesSyncPatch(requestParameters: VersionNewsfeedNewsfeedLikesSyncPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsSyncPatch200Response> {
        const response = await this.versionNewsfeedNewsfeedLikesSyncPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionNewsfeedNewsfeedLikesAttachPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionNewsfeedNewsfeedLikesAttachPostVersionEnum = typeof VersionNewsfeedNewsfeedLikesAttachPostVersionEnum[keyof typeof VersionNewsfeedNewsfeedLikesAttachPostVersionEnum];
/**
 * @export
 */
export const VersionNewsfeedNewsfeedLikesAttachPostIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    AwardRecords: 'award_records',
    AwardRecords2: 'award_records.*',
    CombatRecords: 'combat_records',
    CombatRecords2: 'combat_records.*',
    Position: 'position',
    QualificationRecords: 'qualification_records',
    Rank: 'rank',
    RankRecords: 'rank_records',
    RankRecords2: 'rank_records.*',
    ServiceRecords: 'service_records',
    ServiceRecords2: 'service_records.*',
    Specialty: 'specialty',
    Status: 'status',
    Unit: 'unit',
    Unit2: 'unit.*'
} as const;
export type VersionNewsfeedNewsfeedLikesAttachPostIncludeEnum = typeof VersionNewsfeedNewsfeedLikesAttachPostIncludeEnum[keyof typeof VersionNewsfeedNewsfeedLikesAttachPostIncludeEnum];
/**
 * @export
 */
export const VersionNewsfeedNewsfeedLikesDetachDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionNewsfeedNewsfeedLikesDetachDeleteVersionEnum = typeof VersionNewsfeedNewsfeedLikesDetachDeleteVersionEnum[keyof typeof VersionNewsfeedNewsfeedLikesDetachDeleteVersionEnum];
/**
 * @export
 */
export const VersionNewsfeedNewsfeedLikesDetachDeleteIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    AwardRecords: 'award_records',
    AwardRecords2: 'award_records.*',
    CombatRecords: 'combat_records',
    CombatRecords2: 'combat_records.*',
    Position: 'position',
    QualificationRecords: 'qualification_records',
    Rank: 'rank',
    RankRecords: 'rank_records',
    RankRecords2: 'rank_records.*',
    ServiceRecords: 'service_records',
    ServiceRecords2: 'service_records.*',
    Specialty: 'specialty',
    Status: 'status',
    Unit: 'unit',
    Unit2: 'unit.*'
} as const;
export type VersionNewsfeedNewsfeedLikesDetachDeleteIncludeEnum = typeof VersionNewsfeedNewsfeedLikesDetachDeleteIncludeEnum[keyof typeof VersionNewsfeedNewsfeedLikesDetachDeleteIncludeEnum];
/**
 * @export
 */
export const VersionNewsfeedNewsfeedLikesGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionNewsfeedNewsfeedLikesGetVersionEnum = typeof VersionNewsfeedNewsfeedLikesGetVersionEnum[keyof typeof VersionNewsfeedNewsfeedLikesGetVersionEnum];
/**
 * @export
 */
export const VersionNewsfeedNewsfeedLikesGetIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    AwardRecords: 'award_records',
    AwardRecords2: 'award_records.*',
    CombatRecords: 'combat_records',
    CombatRecords2: 'combat_records.*',
    Position: 'position',
    QualificationRecords: 'qualification_records',
    Rank: 'rank',
    RankRecords: 'rank_records',
    RankRecords2: 'rank_records.*',
    ServiceRecords: 'service_records',
    ServiceRecords2: 'service_records.*',
    Specialty: 'specialty',
    Status: 'status',
    Unit: 'unit',
    Unit2: 'unit.*'
} as const;
export type VersionNewsfeedNewsfeedLikesGetIncludeEnum = typeof VersionNewsfeedNewsfeedLikesGetIncludeEnum[keyof typeof VersionNewsfeedNewsfeedLikesGetIncludeEnum];
/**
 * @export
 */
export const VersionNewsfeedNewsfeedLikesSyncPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionNewsfeedNewsfeedLikesSyncPatchVersionEnum = typeof VersionNewsfeedNewsfeedLikesSyncPatchVersionEnum[keyof typeof VersionNewsfeedNewsfeedLikesSyncPatchVersionEnum];
/**
 * @export
 */
export const VersionNewsfeedNewsfeedLikesSyncPatchIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    AwardRecords: 'award_records',
    AwardRecords2: 'award_records.*',
    CombatRecords: 'combat_records',
    CombatRecords2: 'combat_records.*',
    Position: 'position',
    QualificationRecords: 'qualification_records',
    Rank: 'rank',
    RankRecords: 'rank_records',
    RankRecords2: 'rank_records.*',
    ServiceRecords: 'service_records',
    ServiceRecords2: 'service_records.*',
    Specialty: 'specialty',
    Status: 'status',
    Unit: 'unit',
    Unit2: 'unit.*'
} as const;
export type VersionNewsfeedNewsfeedLikesSyncPatchIncludeEnum = typeof VersionNewsfeedNewsfeedLikesSyncPatchIncludeEnum[keyof typeof VersionNewsfeedNewsfeedLikesSyncPatchIncludeEnum];
