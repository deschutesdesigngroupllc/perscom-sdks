/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Event,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionEventsBatchPatchRequest,
  VersionEventsBatchPost200Response,
  VersionEventsBatchPostRequest,
  VersionEventsGet200Response,
  VersionEventsPost201Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
} from '../models/index';
import {
    EventFromJSON,
    EventToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionEventsBatchPatchRequestFromJSON,
    VersionEventsBatchPatchRequestToJSON,
    VersionEventsBatchPost200ResponseFromJSON,
    VersionEventsBatchPost200ResponseToJSON,
    VersionEventsBatchPostRequestFromJSON,
    VersionEventsBatchPostRequestToJSON,
    VersionEventsGet200ResponseFromJSON,
    VersionEventsGet200ResponseToJSON,
    VersionEventsPost201ResponseFromJSON,
    VersionEventsPost201ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
} from '../models/index';

export interface VersionEventsBatchDeleteRequest {
    version: VersionEventsBatchDeleteVersionEnum;
    include?: VersionEventsBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionEventsBatchPatchOperationRequest {
    version: VersionEventsBatchPatchOperationVersionEnum;
    include?: VersionEventsBatchPatchOperationIncludeEnum;
    versionEventsBatchPatchRequest?: VersionEventsBatchPatchRequest;
}

export interface VersionEventsBatchPostOperationRequest {
    version: VersionEventsBatchPostOperationVersionEnum;
    include?: VersionEventsBatchPostOperationIncludeEnum;
    versionEventsBatchPostRequest?: VersionEventsBatchPostRequest;
}

export interface VersionEventsEventDeleteRequest {
    version: VersionEventsEventDeleteVersionEnum;
    event: number;
    include?: VersionEventsEventDeleteIncludeEnum;
}

export interface VersionEventsEventGetRequest {
    version: VersionEventsEventGetVersionEnum;
    event: number;
    include?: VersionEventsEventGetIncludeEnum;
}

export interface VersionEventsEventPatchRequest {
    version: VersionEventsEventPatchVersionEnum;
    event: number;
    include?: VersionEventsEventPatchIncludeEnum;
    event2?: Event;
}

export interface VersionEventsGetRequest {
    version: VersionEventsGetVersionEnum;
    include?: VersionEventsGetIncludeEnum;
}

export interface VersionEventsPostRequest {
    version: VersionEventsPostVersionEnum;
    include?: VersionEventsPostIncludeEnum;
    event?: Event;
}

/**
 * 
 */
export class EventsApi extends runtime.BaseAPI {

    /**
     * Delete a batch of events
     */
    async versionEventsBatchDeleteRaw(requestParameters: VersionEventsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionEventsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionEventsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/events/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionEventsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of events
     */
    async versionEventsBatchDelete(requestParameters: VersionEventsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionEventsBatchPost200Response> {
        const response = await this.versionEventsBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of events
     */
    async versionEventsBatchPatchRaw(requestParameters: VersionEventsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionEventsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionEventsBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/events/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionEventsBatchPatchRequestToJSON(requestParameters['versionEventsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionEventsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of events
     */
    async versionEventsBatchPatch(requestParameters: VersionEventsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionEventsBatchPost200Response> {
        const response = await this.versionEventsBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of events
     */
    async versionEventsBatchPostRaw(requestParameters: VersionEventsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionEventsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionEventsBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/events/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionEventsBatchPostRequestToJSON(requestParameters['versionEventsBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionEventsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of events
     */
    async versionEventsBatchPost(requestParameters: VersionEventsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionEventsBatchPost200Response> {
        const response = await this.versionEventsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete event
     */
    async versionEventsEventDeleteRaw(requestParameters: VersionEventsEventDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionEventsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionEventsEventDelete().'
            );
        }

        if (requestParameters['event'] == null) {
            throw new runtime.RequiredError(
                'event',
                'Required parameter "event" was null or undefined when calling versionEventsEventDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/events/{event}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"event"}}`, encodeURIComponent(String(requestParameters['event']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionEventsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete event
     */
    async versionEventsEventDelete(requestParameters: VersionEventsEventDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionEventsPost201Response> {
        const response = await this.versionEventsEventDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get event
     */
    async versionEventsEventGetRaw(requestParameters: VersionEventsEventGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionEventsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionEventsEventGet().'
            );
        }

        if (requestParameters['event'] == null) {
            throw new runtime.RequiredError(
                'event',
                'Required parameter "event" was null or undefined when calling versionEventsEventGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/events/{event}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"event"}}`, encodeURIComponent(String(requestParameters['event']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionEventsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get event
     */
    async versionEventsEventGet(requestParameters: VersionEventsEventGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionEventsPost201Response> {
        const response = await this.versionEventsEventGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update event
     */
    async versionEventsEventPatchRaw(requestParameters: VersionEventsEventPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionEventsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionEventsEventPatch().'
            );
        }

        if (requestParameters['event'] == null) {
            throw new runtime.RequiredError(
                'event',
                'Required parameter "event" was null or undefined when calling versionEventsEventPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/events/{event}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"event"}}`, encodeURIComponent(String(requestParameters['event']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EventToJSON(requestParameters['event2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionEventsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update event
     */
    async versionEventsEventPatch(requestParameters: VersionEventsEventPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionEventsPost201Response> {
        const response = await this.versionEventsEventPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of events
     */
    async versionEventsGetRaw(requestParameters: VersionEventsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionEventsGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionEventsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/events`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionEventsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of events
     */
    async versionEventsGet(requestParameters: VersionEventsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionEventsGet200Response> {
        const response = await this.versionEventsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create event
     */
    async versionEventsPostRaw(requestParameters: VersionEventsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionEventsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionEventsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/events`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EventToJSON(requestParameters['event']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionEventsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create event
     */
    async versionEventsPost(requestParameters: VersionEventsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionEventsPost201Response> {
        const response = await this.versionEventsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionEventsBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionEventsBatchDeleteVersionEnum = typeof VersionEventsBatchDeleteVersionEnum[keyof typeof VersionEventsBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionEventsBatchDeleteIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Calendar: 'calendar',
    Calendar2: 'calendar.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Image: 'image',
    Schedule: 'schedule',
    Tags: 'tags'
} as const;
export type VersionEventsBatchDeleteIncludeEnum = typeof VersionEventsBatchDeleteIncludeEnum[keyof typeof VersionEventsBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionEventsBatchPatchOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionEventsBatchPatchOperationVersionEnum = typeof VersionEventsBatchPatchOperationVersionEnum[keyof typeof VersionEventsBatchPatchOperationVersionEnum];
/**
 * @export
 */
export const VersionEventsBatchPatchOperationIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Calendar: 'calendar',
    Calendar2: 'calendar.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Image: 'image',
    Schedule: 'schedule',
    Tags: 'tags'
} as const;
export type VersionEventsBatchPatchOperationIncludeEnum = typeof VersionEventsBatchPatchOperationIncludeEnum[keyof typeof VersionEventsBatchPatchOperationIncludeEnum];
/**
 * @export
 */
export const VersionEventsBatchPostOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionEventsBatchPostOperationVersionEnum = typeof VersionEventsBatchPostOperationVersionEnum[keyof typeof VersionEventsBatchPostOperationVersionEnum];
/**
 * @export
 */
export const VersionEventsBatchPostOperationIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Calendar: 'calendar',
    Calendar2: 'calendar.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Image: 'image',
    Schedule: 'schedule',
    Tags: 'tags'
} as const;
export type VersionEventsBatchPostOperationIncludeEnum = typeof VersionEventsBatchPostOperationIncludeEnum[keyof typeof VersionEventsBatchPostOperationIncludeEnum];
/**
 * @export
 */
export const VersionEventsEventDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionEventsEventDeleteVersionEnum = typeof VersionEventsEventDeleteVersionEnum[keyof typeof VersionEventsEventDeleteVersionEnum];
/**
 * @export
 */
export const VersionEventsEventDeleteIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Calendar: 'calendar',
    Calendar2: 'calendar.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Image: 'image',
    Schedule: 'schedule',
    Tags: 'tags'
} as const;
export type VersionEventsEventDeleteIncludeEnum = typeof VersionEventsEventDeleteIncludeEnum[keyof typeof VersionEventsEventDeleteIncludeEnum];
/**
 * @export
 */
export const VersionEventsEventGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionEventsEventGetVersionEnum = typeof VersionEventsEventGetVersionEnum[keyof typeof VersionEventsEventGetVersionEnum];
/**
 * @export
 */
export const VersionEventsEventGetIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Calendar: 'calendar',
    Calendar2: 'calendar.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Image: 'image',
    Schedule: 'schedule',
    Tags: 'tags'
} as const;
export type VersionEventsEventGetIncludeEnum = typeof VersionEventsEventGetIncludeEnum[keyof typeof VersionEventsEventGetIncludeEnum];
/**
 * @export
 */
export const VersionEventsEventPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionEventsEventPatchVersionEnum = typeof VersionEventsEventPatchVersionEnum[keyof typeof VersionEventsEventPatchVersionEnum];
/**
 * @export
 */
export const VersionEventsEventPatchIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Calendar: 'calendar',
    Calendar2: 'calendar.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Image: 'image',
    Schedule: 'schedule',
    Tags: 'tags'
} as const;
export type VersionEventsEventPatchIncludeEnum = typeof VersionEventsEventPatchIncludeEnum[keyof typeof VersionEventsEventPatchIncludeEnum];
/**
 * @export
 */
export const VersionEventsGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionEventsGetVersionEnum = typeof VersionEventsGetVersionEnum[keyof typeof VersionEventsGetVersionEnum];
/**
 * @export
 */
export const VersionEventsGetIncludeEnum = {
    Image: 'image'
} as const;
export type VersionEventsGetIncludeEnum = typeof VersionEventsGetIncludeEnum[keyof typeof VersionEventsGetIncludeEnum];
/**
 * @export
 */
export const VersionEventsPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionEventsPostVersionEnum = typeof VersionEventsPostVersionEnum[keyof typeof VersionEventsPostVersionEnum];
/**
 * @export
 */
export const VersionEventsPostIncludeEnum = {
    Image: 'image'
} as const;
export type VersionEventsPostIncludeEnum = typeof VersionEventsPostIncludeEnum[keyof typeof VersionEventsPostIncludeEnum];
