/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ServiceRecord,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
  VersionServiceRecordsBatchPatchRequest,
  VersionServiceRecordsBatchPost200Response,
  VersionServiceRecordsBatchPostRequest,
  VersionServiceRecordsGet200Response,
  VersionServiceRecordsPost201Response,
  VersionTrainingRecordsBatchPost200Response,
} from '../models/index';
import {
    ServiceRecordFromJSON,
    ServiceRecordToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
    VersionServiceRecordsBatchPatchRequestFromJSON,
    VersionServiceRecordsBatchPatchRequestToJSON,
    VersionServiceRecordsBatchPost200ResponseFromJSON,
    VersionServiceRecordsBatchPost200ResponseToJSON,
    VersionServiceRecordsBatchPostRequestFromJSON,
    VersionServiceRecordsBatchPostRequestToJSON,
    VersionServiceRecordsGet200ResponseFromJSON,
    VersionServiceRecordsGet200ResponseToJSON,
    VersionServiceRecordsPost201ResponseFromJSON,
    VersionServiceRecordsPost201ResponseToJSON,
    VersionTrainingRecordsBatchPost200ResponseFromJSON,
    VersionTrainingRecordsBatchPost200ResponseToJSON,
} from '../models/index';

export interface VersionServiceRecordsBatchDeleteRequest {
    version: VersionServiceRecordsBatchDeleteVersionEnum;
    include?: VersionServiceRecordsBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionServiceRecordsBatchPatchOperationRequest {
    version: VersionServiceRecordsBatchPatchOperationVersionEnum;
    include?: VersionServiceRecordsBatchPatchOperationIncludeEnum;
    versionServiceRecordsBatchPatchRequest?: VersionServiceRecordsBatchPatchRequest;
}

export interface VersionServiceRecordsBatchPostOperationRequest {
    version: VersionServiceRecordsBatchPostOperationVersionEnum;
    include?: VersionServiceRecordsBatchPostOperationIncludeEnum;
    versionServiceRecordsBatchPostRequest?: VersionServiceRecordsBatchPostRequest;
}

export interface VersionServiceRecordsGetRequest {
    version: VersionServiceRecordsGetVersionEnum;
    include?: VersionServiceRecordsGetIncludeEnum;
}

export interface VersionServiceRecordsPostRequest {
    version: VersionServiceRecordsPostVersionEnum;
    include?: VersionServiceRecordsPostIncludeEnum;
    serviceRecord?: ServiceRecord;
}

export interface VersionServiceRecordsServiceRecordDeleteRequest {
    version: VersionServiceRecordsServiceRecordDeleteVersionEnum;
    serviceRecord: number;
    include?: VersionServiceRecordsServiceRecordDeleteIncludeEnum;
}

export interface VersionServiceRecordsServiceRecordGetRequest {
    version: VersionServiceRecordsServiceRecordGetVersionEnum;
    serviceRecord: number;
    include?: VersionServiceRecordsServiceRecordGetIncludeEnum;
}

export interface VersionServiceRecordsServiceRecordPatchRequest {
    version: VersionServiceRecordsServiceRecordPatchVersionEnum;
    serviceRecord: number;
    include?: VersionServiceRecordsServiceRecordPatchIncludeEnum;
    serviceRecord2?: ServiceRecord;
}

export interface VersionTrainingRecordsBatchDeleteRequest {
    version: VersionTrainingRecordsBatchDeleteVersionEnum;
    include?: VersionTrainingRecordsBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

/**
 * 
 */
export class ServiceRecordsApi extends runtime.BaseAPI {

    /**
     * Delete a batch of service records
     */
    async versionServiceRecordsBatchDeleteRaw(requestParameters: VersionServiceRecordsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionServiceRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionServiceRecordsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/service-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionServiceRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of service records
     */
    async versionServiceRecordsBatchDelete(requestParameters: VersionServiceRecordsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionServiceRecordsBatchPost200Response> {
        const response = await this.versionServiceRecordsBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of service records
     */
    async versionServiceRecordsBatchPatchRaw(requestParameters: VersionServiceRecordsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionServiceRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionServiceRecordsBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/service-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionServiceRecordsBatchPatchRequestToJSON(requestParameters['versionServiceRecordsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionServiceRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of service records
     */
    async versionServiceRecordsBatchPatch(requestParameters: VersionServiceRecordsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionServiceRecordsBatchPost200Response> {
        const response = await this.versionServiceRecordsBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of service records
     */
    async versionServiceRecordsBatchPostRaw(requestParameters: VersionServiceRecordsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionServiceRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionServiceRecordsBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/service-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionServiceRecordsBatchPostRequestToJSON(requestParameters['versionServiceRecordsBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionServiceRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of service records
     */
    async versionServiceRecordsBatchPost(requestParameters: VersionServiceRecordsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionServiceRecordsBatchPost200Response> {
        const response = await this.versionServiceRecordsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of service records
     */
    async versionServiceRecordsGetRaw(requestParameters: VersionServiceRecordsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionServiceRecordsGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionServiceRecordsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/service-records`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionServiceRecordsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of service records
     */
    async versionServiceRecordsGet(requestParameters: VersionServiceRecordsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionServiceRecordsGet200Response> {
        const response = await this.versionServiceRecordsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create service record
     */
    async versionServiceRecordsPostRaw(requestParameters: VersionServiceRecordsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionServiceRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionServiceRecordsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/service-records`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceRecordToJSON(requestParameters['serviceRecord']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionServiceRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create service record
     */
    async versionServiceRecordsPost(requestParameters: VersionServiceRecordsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionServiceRecordsPost201Response> {
        const response = await this.versionServiceRecordsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete service record
     */
    async versionServiceRecordsServiceRecordDeleteRaw(requestParameters: VersionServiceRecordsServiceRecordDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionServiceRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionServiceRecordsServiceRecordDelete().'
            );
        }

        if (requestParameters['serviceRecord'] == null) {
            throw new runtime.RequiredError(
                'serviceRecord',
                'Required parameter "serviceRecord" was null or undefined when calling versionServiceRecordsServiceRecordDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/service-records/{service_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"service_record"}}`, encodeURIComponent(String(requestParameters['serviceRecord']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionServiceRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete service record
     */
    async versionServiceRecordsServiceRecordDelete(requestParameters: VersionServiceRecordsServiceRecordDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionServiceRecordsPost201Response> {
        const response = await this.versionServiceRecordsServiceRecordDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get service record
     */
    async versionServiceRecordsServiceRecordGetRaw(requestParameters: VersionServiceRecordsServiceRecordGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionServiceRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionServiceRecordsServiceRecordGet().'
            );
        }

        if (requestParameters['serviceRecord'] == null) {
            throw new runtime.RequiredError(
                'serviceRecord',
                'Required parameter "serviceRecord" was null or undefined when calling versionServiceRecordsServiceRecordGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/service-records/{service_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"service_record"}}`, encodeURIComponent(String(requestParameters['serviceRecord']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionServiceRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get service record
     */
    async versionServiceRecordsServiceRecordGet(requestParameters: VersionServiceRecordsServiceRecordGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionServiceRecordsPost201Response> {
        const response = await this.versionServiceRecordsServiceRecordGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update service record
     */
    async versionServiceRecordsServiceRecordPatchRaw(requestParameters: VersionServiceRecordsServiceRecordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionServiceRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionServiceRecordsServiceRecordPatch().'
            );
        }

        if (requestParameters['serviceRecord'] == null) {
            throw new runtime.RequiredError(
                'serviceRecord',
                'Required parameter "serviceRecord" was null or undefined when calling versionServiceRecordsServiceRecordPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/service-records/{service_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"service_record"}}`, encodeURIComponent(String(requestParameters['serviceRecord']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceRecordToJSON(requestParameters['serviceRecord2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionServiceRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update service record
     */
    async versionServiceRecordsServiceRecordPatch(requestParameters: VersionServiceRecordsServiceRecordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionServiceRecordsPost201Response> {
        const response = await this.versionServiceRecordsServiceRecordPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a batch of service records
     */
    async versionTrainingRecordsBatchDeleteRaw(requestParameters: VersionTrainingRecordsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionTrainingRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionTrainingRecordsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/training-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionTrainingRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of service records
     */
    async versionTrainingRecordsBatchDelete(requestParameters: VersionTrainingRecordsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionTrainingRecordsBatchPost200Response> {
        const response = await this.versionTrainingRecordsBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionServiceRecordsBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionServiceRecordsBatchDeleteVersionEnum = typeof VersionServiceRecordsBatchDeleteVersionEnum[keyof typeof VersionServiceRecordsBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionServiceRecordsBatchDeleteIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionServiceRecordsBatchDeleteIncludeEnum = typeof VersionServiceRecordsBatchDeleteIncludeEnum[keyof typeof VersionServiceRecordsBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionServiceRecordsBatchPatchOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionServiceRecordsBatchPatchOperationVersionEnum = typeof VersionServiceRecordsBatchPatchOperationVersionEnum[keyof typeof VersionServiceRecordsBatchPatchOperationVersionEnum];
/**
 * @export
 */
export const VersionServiceRecordsBatchPatchOperationIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionServiceRecordsBatchPatchOperationIncludeEnum = typeof VersionServiceRecordsBatchPatchOperationIncludeEnum[keyof typeof VersionServiceRecordsBatchPatchOperationIncludeEnum];
/**
 * @export
 */
export const VersionServiceRecordsBatchPostOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionServiceRecordsBatchPostOperationVersionEnum = typeof VersionServiceRecordsBatchPostOperationVersionEnum[keyof typeof VersionServiceRecordsBatchPostOperationVersionEnum];
/**
 * @export
 */
export const VersionServiceRecordsBatchPostOperationIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionServiceRecordsBatchPostOperationIncludeEnum = typeof VersionServiceRecordsBatchPostOperationIncludeEnum[keyof typeof VersionServiceRecordsBatchPostOperationIncludeEnum];
/**
 * @export
 */
export const VersionServiceRecordsGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionServiceRecordsGetVersionEnum = typeof VersionServiceRecordsGetVersionEnum[keyof typeof VersionServiceRecordsGetVersionEnum];
/**
 * @export
 */
export const VersionServiceRecordsGetIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionServiceRecordsGetIncludeEnum = typeof VersionServiceRecordsGetIncludeEnum[keyof typeof VersionServiceRecordsGetIncludeEnum];
/**
 * @export
 */
export const VersionServiceRecordsPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionServiceRecordsPostVersionEnum = typeof VersionServiceRecordsPostVersionEnum[keyof typeof VersionServiceRecordsPostVersionEnum];
/**
 * @export
 */
export const VersionServiceRecordsPostIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionServiceRecordsPostIncludeEnum = typeof VersionServiceRecordsPostIncludeEnum[keyof typeof VersionServiceRecordsPostIncludeEnum];
/**
 * @export
 */
export const VersionServiceRecordsServiceRecordDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionServiceRecordsServiceRecordDeleteVersionEnum = typeof VersionServiceRecordsServiceRecordDeleteVersionEnum[keyof typeof VersionServiceRecordsServiceRecordDeleteVersionEnum];
/**
 * @export
 */
export const VersionServiceRecordsServiceRecordDeleteIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionServiceRecordsServiceRecordDeleteIncludeEnum = typeof VersionServiceRecordsServiceRecordDeleteIncludeEnum[keyof typeof VersionServiceRecordsServiceRecordDeleteIncludeEnum];
/**
 * @export
 */
export const VersionServiceRecordsServiceRecordGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionServiceRecordsServiceRecordGetVersionEnum = typeof VersionServiceRecordsServiceRecordGetVersionEnum[keyof typeof VersionServiceRecordsServiceRecordGetVersionEnum];
/**
 * @export
 */
export const VersionServiceRecordsServiceRecordGetIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionServiceRecordsServiceRecordGetIncludeEnum = typeof VersionServiceRecordsServiceRecordGetIncludeEnum[keyof typeof VersionServiceRecordsServiceRecordGetIncludeEnum];
/**
 * @export
 */
export const VersionServiceRecordsServiceRecordPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionServiceRecordsServiceRecordPatchVersionEnum = typeof VersionServiceRecordsServiceRecordPatchVersionEnum[keyof typeof VersionServiceRecordsServiceRecordPatchVersionEnum];
/**
 * @export
 */
export const VersionServiceRecordsServiceRecordPatchIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionServiceRecordsServiceRecordPatchIncludeEnum = typeof VersionServiceRecordsServiceRecordPatchIncludeEnum[keyof typeof VersionServiceRecordsServiceRecordPatchIncludeEnum];
/**
 * @export
 */
export const VersionTrainingRecordsBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionTrainingRecordsBatchDeleteVersionEnum = typeof VersionTrainingRecordsBatchDeleteVersionEnum[keyof typeof VersionTrainingRecordsBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionTrainingRecordsBatchDeleteIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Competencies: 'competencies',
    Credentials: 'credentials',
    Credentials2: 'credentials.*',
    Document: 'document',
    Event: 'event',
    Event2: 'event.*',
    Instructor: 'instructor',
    Instructor2: 'instructor.*',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionTrainingRecordsBatchDeleteIncludeEnum = typeof VersionTrainingRecordsBatchDeleteIncludeEnum[keyof typeof VersionTrainingRecordsBatchDeleteIncludeEnum];
