/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Position,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
  VersionPositionsBatchPatchRequest,
  VersionPositionsBatchPost200Response,
  VersionPositionsPost201Response,
} from '../models/index';
import {
    PositionFromJSON,
    PositionToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
    VersionPositionsBatchPatchRequestFromJSON,
    VersionPositionsBatchPatchRequestToJSON,
    VersionPositionsBatchPost200ResponseFromJSON,
    VersionPositionsBatchPost200ResponseToJSON,
    VersionPositionsPost201ResponseFromJSON,
    VersionPositionsPost201ResponseToJSON,
} from '../models/index';

export interface VersionUsersUserPositionBatchDeleteRequest {
    version: VersionUsersUserPositionBatchDeleteVersionEnum;
    user: number;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionUsersUserPositionBatchPatchRequest {
    version: VersionUsersUserPositionBatchPatchVersionEnum;
    user: number;
    versionPositionsBatchPatchRequest?: VersionPositionsBatchPatchRequest;
}

export interface VersionUsersUserPositionPositionDeleteRequest {
    version: VersionUsersUserPositionPositionDeleteVersionEnum;
    user: number;
    position: number;
}

export interface VersionUsersUserPositionPositionGetRequest {
    version: VersionUsersUserPositionPositionGetVersionEnum;
    user: number;
    position: number;
}

export interface VersionUsersUserPositionPositionPatchRequest {
    version: VersionUsersUserPositionPositionPatchVersionEnum;
    user: number;
    position: number;
    position2?: Position;
}

/**
 * 
 */
export class UsersPositionApi extends runtime.BaseAPI {

    /**
     * Delete a batch of positions
     */
    async versionUsersUserPositionBatchDeleteRaw(requestParameters: VersionUsersUserPositionBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionPositionsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserPositionBatchDelete().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserPositionBatchDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/position/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionPositionsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of positions
     */
    async versionUsersUserPositionBatchDelete(requestParameters: VersionUsersUserPositionBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionPositionsBatchPost200Response> {
        const response = await this.versionUsersUserPositionBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of positions
     */
    async versionUsersUserPositionBatchPatchRaw(requestParameters: VersionUsersUserPositionBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionPositionsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserPositionBatchPatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserPositionBatchPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/position/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionPositionsBatchPatchRequestToJSON(requestParameters['versionPositionsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionPositionsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of positions
     */
    async versionUsersUserPositionBatchPatch(requestParameters: VersionUsersUserPositionBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionPositionsBatchPost200Response> {
        const response = await this.versionUsersUserPositionBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete position
     */
    async versionUsersUserPositionPositionDeleteRaw(requestParameters: VersionUsersUserPositionPositionDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionPositionsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserPositionPositionDelete().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserPositionPositionDelete().'
            );
        }

        if (requestParameters['position'] == null) {
            throw new runtime.RequiredError(
                'position',
                'Required parameter "position" was null or undefined when calling versionUsersUserPositionPositionDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/position/{position}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"position"}}`, encodeURIComponent(String(requestParameters['position']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionPositionsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete position
     */
    async versionUsersUserPositionPositionDelete(requestParameters: VersionUsersUserPositionPositionDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionPositionsPost201Response> {
        const response = await this.versionUsersUserPositionPositionDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get position
     */
    async versionUsersUserPositionPositionGetRaw(requestParameters: VersionUsersUserPositionPositionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionPositionsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserPositionPositionGet().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserPositionPositionGet().'
            );
        }

        if (requestParameters['position'] == null) {
            throw new runtime.RequiredError(
                'position',
                'Required parameter "position" was null or undefined when calling versionUsersUserPositionPositionGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/position/{position}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"position"}}`, encodeURIComponent(String(requestParameters['position']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionPositionsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get position
     */
    async versionUsersUserPositionPositionGet(requestParameters: VersionUsersUserPositionPositionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionPositionsPost201Response> {
        const response = await this.versionUsersUserPositionPositionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update position
     */
    async versionUsersUserPositionPositionPatchRaw(requestParameters: VersionUsersUserPositionPositionPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionPositionsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserPositionPositionPatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserPositionPositionPatch().'
            );
        }

        if (requestParameters['position'] == null) {
            throw new runtime.RequiredError(
                'position',
                'Required parameter "position" was null or undefined when calling versionUsersUserPositionPositionPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/position/{position}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"position"}}`, encodeURIComponent(String(requestParameters['position']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PositionToJSON(requestParameters['position2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionPositionsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update position
     */
    async versionUsersUserPositionPositionPatch(requestParameters: VersionUsersUserPositionPositionPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionPositionsPost201Response> {
        const response = await this.versionUsersUserPositionPositionPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionUsersUserPositionBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserPositionBatchDeleteVersionEnum = typeof VersionUsersUserPositionBatchDeleteVersionEnum[keyof typeof VersionUsersUserPositionBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersUserPositionBatchPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserPositionBatchPatchVersionEnum = typeof VersionUsersUserPositionBatchPatchVersionEnum[keyof typeof VersionUsersUserPositionBatchPatchVersionEnum];
/**
 * @export
 */
export const VersionUsersUserPositionPositionDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserPositionPositionDeleteVersionEnum = typeof VersionUsersUserPositionPositionDeleteVersionEnum[keyof typeof VersionUsersUserPositionPositionDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersUserPositionPositionGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserPositionPositionGetVersionEnum = typeof VersionUsersUserPositionPositionGetVersionEnum[keyof typeof VersionUsersUserPositionPositionGetVersionEnum];
/**
 * @export
 */
export const VersionUsersUserPositionPositionPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserPositionPositionPatchVersionEnum = typeof VersionUsersUserPositionPositionPatchVersionEnum[keyof typeof VersionUsersUserPositionPositionPatchVersionEnum];
