/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CombatRecord,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionCombatRecordsBatchPatchRequest,
  VersionCombatRecordsBatchPost200Response,
  VersionCombatRecordsBatchPostRequest,
  VersionCombatRecordsGet200Response,
  VersionCombatRecordsPost201Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
} from '../models/index';
import {
    CombatRecordFromJSON,
    CombatRecordToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionCombatRecordsBatchPatchRequestFromJSON,
    VersionCombatRecordsBatchPatchRequestToJSON,
    VersionCombatRecordsBatchPost200ResponseFromJSON,
    VersionCombatRecordsBatchPost200ResponseToJSON,
    VersionCombatRecordsBatchPostRequestFromJSON,
    VersionCombatRecordsBatchPostRequestToJSON,
    VersionCombatRecordsGet200ResponseFromJSON,
    VersionCombatRecordsGet200ResponseToJSON,
    VersionCombatRecordsPost201ResponseFromJSON,
    VersionCombatRecordsPost201ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
} from '../models/index';

export interface VersionCombatRecordsBatchDeleteRequest {
    version: VersionCombatRecordsBatchDeleteVersionEnum;
    include?: VersionCombatRecordsBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionCombatRecordsBatchPatchOperationRequest {
    version: VersionCombatRecordsBatchPatchOperationVersionEnum;
    include?: VersionCombatRecordsBatchPatchOperationIncludeEnum;
    versionCombatRecordsBatchPatchRequest?: VersionCombatRecordsBatchPatchRequest;
}

export interface VersionCombatRecordsBatchPostOperationRequest {
    version: VersionCombatRecordsBatchPostOperationVersionEnum;
    include?: VersionCombatRecordsBatchPostOperationIncludeEnum;
    versionCombatRecordsBatchPostRequest?: VersionCombatRecordsBatchPostRequest;
}

export interface VersionCombatRecordsCombatRecordDeleteRequest {
    version: VersionCombatRecordsCombatRecordDeleteVersionEnum;
    combatRecord: number;
    include?: VersionCombatRecordsCombatRecordDeleteIncludeEnum;
}

export interface VersionCombatRecordsCombatRecordGetRequest {
    version: VersionCombatRecordsCombatRecordGetVersionEnum;
    combatRecord: number;
    include?: VersionCombatRecordsCombatRecordGetIncludeEnum;
}

export interface VersionCombatRecordsCombatRecordPatchRequest {
    version: VersionCombatRecordsCombatRecordPatchVersionEnum;
    combatRecord: number;
    include?: VersionCombatRecordsCombatRecordPatchIncludeEnum;
    combatRecord2?: CombatRecord;
}

export interface VersionCombatRecordsGetRequest {
    version: VersionCombatRecordsGetVersionEnum;
    include?: VersionCombatRecordsGetIncludeEnum;
}

export interface VersionCombatRecordsPostRequest {
    version: VersionCombatRecordsPostVersionEnum;
    include?: VersionCombatRecordsPostIncludeEnum;
    combatRecord?: CombatRecord;
}

/**
 * 
 */
export class CombatRecordsApi extends runtime.BaseAPI {

    /**
     * Delete a batch of combat records
     */
    async versionCombatRecordsBatchDeleteRaw(requestParameters: VersionCombatRecordsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCombatRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCombatRecordsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/combat-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCombatRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of combat records
     */
    async versionCombatRecordsBatchDelete(requestParameters: VersionCombatRecordsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCombatRecordsBatchPost200Response> {
        const response = await this.versionCombatRecordsBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of combat records
     */
    async versionCombatRecordsBatchPatchRaw(requestParameters: VersionCombatRecordsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCombatRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCombatRecordsBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/combat-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCombatRecordsBatchPatchRequestToJSON(requestParameters['versionCombatRecordsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCombatRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of combat records
     */
    async versionCombatRecordsBatchPatch(requestParameters: VersionCombatRecordsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCombatRecordsBatchPost200Response> {
        const response = await this.versionCombatRecordsBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of combat records
     */
    async versionCombatRecordsBatchPostRaw(requestParameters: VersionCombatRecordsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCombatRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCombatRecordsBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/combat-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCombatRecordsBatchPostRequestToJSON(requestParameters['versionCombatRecordsBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCombatRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of combat records
     */
    async versionCombatRecordsBatchPost(requestParameters: VersionCombatRecordsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCombatRecordsBatchPost200Response> {
        const response = await this.versionCombatRecordsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete combat record
     */
    async versionCombatRecordsCombatRecordDeleteRaw(requestParameters: VersionCombatRecordsCombatRecordDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCombatRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCombatRecordsCombatRecordDelete().'
            );
        }

        if (requestParameters['combatRecord'] == null) {
            throw new runtime.RequiredError(
                'combatRecord',
                'Required parameter "combatRecord" was null or undefined when calling versionCombatRecordsCombatRecordDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/combat-records/{combat_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"combat_record"}}`, encodeURIComponent(String(requestParameters['combatRecord']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCombatRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete combat record
     */
    async versionCombatRecordsCombatRecordDelete(requestParameters: VersionCombatRecordsCombatRecordDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCombatRecordsPost201Response> {
        const response = await this.versionCombatRecordsCombatRecordDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get combat record
     */
    async versionCombatRecordsCombatRecordGetRaw(requestParameters: VersionCombatRecordsCombatRecordGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCombatRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCombatRecordsCombatRecordGet().'
            );
        }

        if (requestParameters['combatRecord'] == null) {
            throw new runtime.RequiredError(
                'combatRecord',
                'Required parameter "combatRecord" was null or undefined when calling versionCombatRecordsCombatRecordGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/combat-records/{combat_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"combat_record"}}`, encodeURIComponent(String(requestParameters['combatRecord']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCombatRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get combat record
     */
    async versionCombatRecordsCombatRecordGet(requestParameters: VersionCombatRecordsCombatRecordGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCombatRecordsPost201Response> {
        const response = await this.versionCombatRecordsCombatRecordGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update combat record
     */
    async versionCombatRecordsCombatRecordPatchRaw(requestParameters: VersionCombatRecordsCombatRecordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCombatRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCombatRecordsCombatRecordPatch().'
            );
        }

        if (requestParameters['combatRecord'] == null) {
            throw new runtime.RequiredError(
                'combatRecord',
                'Required parameter "combatRecord" was null or undefined when calling versionCombatRecordsCombatRecordPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/combat-records/{combat_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"combat_record"}}`, encodeURIComponent(String(requestParameters['combatRecord']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CombatRecordToJSON(requestParameters['combatRecord2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCombatRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update combat record
     */
    async versionCombatRecordsCombatRecordPatch(requestParameters: VersionCombatRecordsCombatRecordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCombatRecordsPost201Response> {
        const response = await this.versionCombatRecordsCombatRecordPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of combat records
     */
    async versionCombatRecordsGetRaw(requestParameters: VersionCombatRecordsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCombatRecordsGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCombatRecordsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/combat-records`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCombatRecordsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of combat records
     */
    async versionCombatRecordsGet(requestParameters: VersionCombatRecordsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCombatRecordsGet200Response> {
        const response = await this.versionCombatRecordsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create combat record
     */
    async versionCombatRecordsPostRaw(requestParameters: VersionCombatRecordsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCombatRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCombatRecordsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/combat-records`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CombatRecordToJSON(requestParameters['combatRecord']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCombatRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create combat record
     */
    async versionCombatRecordsPost(requestParameters: VersionCombatRecordsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCombatRecordsPost201Response> {
        const response = await this.versionCombatRecordsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionCombatRecordsBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCombatRecordsBatchDeleteVersionEnum = typeof VersionCombatRecordsBatchDeleteVersionEnum[keyof typeof VersionCombatRecordsBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionCombatRecordsBatchDeleteIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionCombatRecordsBatchDeleteIncludeEnum = typeof VersionCombatRecordsBatchDeleteIncludeEnum[keyof typeof VersionCombatRecordsBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionCombatRecordsBatchPatchOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCombatRecordsBatchPatchOperationVersionEnum = typeof VersionCombatRecordsBatchPatchOperationVersionEnum[keyof typeof VersionCombatRecordsBatchPatchOperationVersionEnum];
/**
 * @export
 */
export const VersionCombatRecordsBatchPatchOperationIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionCombatRecordsBatchPatchOperationIncludeEnum = typeof VersionCombatRecordsBatchPatchOperationIncludeEnum[keyof typeof VersionCombatRecordsBatchPatchOperationIncludeEnum];
/**
 * @export
 */
export const VersionCombatRecordsBatchPostOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCombatRecordsBatchPostOperationVersionEnum = typeof VersionCombatRecordsBatchPostOperationVersionEnum[keyof typeof VersionCombatRecordsBatchPostOperationVersionEnum];
/**
 * @export
 */
export const VersionCombatRecordsBatchPostOperationIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionCombatRecordsBatchPostOperationIncludeEnum = typeof VersionCombatRecordsBatchPostOperationIncludeEnum[keyof typeof VersionCombatRecordsBatchPostOperationIncludeEnum];
/**
 * @export
 */
export const VersionCombatRecordsCombatRecordDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCombatRecordsCombatRecordDeleteVersionEnum = typeof VersionCombatRecordsCombatRecordDeleteVersionEnum[keyof typeof VersionCombatRecordsCombatRecordDeleteVersionEnum];
/**
 * @export
 */
export const VersionCombatRecordsCombatRecordDeleteIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionCombatRecordsCombatRecordDeleteIncludeEnum = typeof VersionCombatRecordsCombatRecordDeleteIncludeEnum[keyof typeof VersionCombatRecordsCombatRecordDeleteIncludeEnum];
/**
 * @export
 */
export const VersionCombatRecordsCombatRecordGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCombatRecordsCombatRecordGetVersionEnum = typeof VersionCombatRecordsCombatRecordGetVersionEnum[keyof typeof VersionCombatRecordsCombatRecordGetVersionEnum];
/**
 * @export
 */
export const VersionCombatRecordsCombatRecordGetIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionCombatRecordsCombatRecordGetIncludeEnum = typeof VersionCombatRecordsCombatRecordGetIncludeEnum[keyof typeof VersionCombatRecordsCombatRecordGetIncludeEnum];
/**
 * @export
 */
export const VersionCombatRecordsCombatRecordPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCombatRecordsCombatRecordPatchVersionEnum = typeof VersionCombatRecordsCombatRecordPatchVersionEnum[keyof typeof VersionCombatRecordsCombatRecordPatchVersionEnum];
/**
 * @export
 */
export const VersionCombatRecordsCombatRecordPatchIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionCombatRecordsCombatRecordPatchIncludeEnum = typeof VersionCombatRecordsCombatRecordPatchIncludeEnum[keyof typeof VersionCombatRecordsCombatRecordPatchIncludeEnum];
/**
 * @export
 */
export const VersionCombatRecordsGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCombatRecordsGetVersionEnum = typeof VersionCombatRecordsGetVersionEnum[keyof typeof VersionCombatRecordsGetVersionEnum];
/**
 * @export
 */
export const VersionCombatRecordsGetIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionCombatRecordsGetIncludeEnum = typeof VersionCombatRecordsGetIncludeEnum[keyof typeof VersionCombatRecordsGetIncludeEnum];
/**
 * @export
 */
export const VersionCombatRecordsPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCombatRecordsPostVersionEnum = typeof VersionCombatRecordsPostVersionEnum[keyof typeof VersionCombatRecordsPostVersionEnum];
/**
 * @export
 */
export const VersionCombatRecordsPostIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionCombatRecordsPostIncludeEnum = typeof VersionCombatRecordsPostIncludeEnum[keyof typeof VersionCombatRecordsPostIncludeEnum];
