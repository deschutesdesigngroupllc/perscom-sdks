/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Announcement,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsBatchPatchRequest,
  VersionAnnouncementsBatchPost200Response,
  VersionAnnouncementsBatchPostRequest,
  VersionAnnouncementsGet200Response,
  VersionAnnouncementsPost201Response,
  VersionAnnouncementsPost422Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
} from '../models/index';
import {
    AnnouncementFromJSON,
    AnnouncementToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsBatchPatchRequestFromJSON,
    VersionAnnouncementsBatchPatchRequestToJSON,
    VersionAnnouncementsBatchPost200ResponseFromJSON,
    VersionAnnouncementsBatchPost200ResponseToJSON,
    VersionAnnouncementsBatchPostRequestFromJSON,
    VersionAnnouncementsBatchPostRequestToJSON,
    VersionAnnouncementsGet200ResponseFromJSON,
    VersionAnnouncementsGet200ResponseToJSON,
    VersionAnnouncementsPost201ResponseFromJSON,
    VersionAnnouncementsPost201ResponseToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
} from '../models/index';

export interface VersionAnnouncementsAnnouncementDeleteRequest {
    version: VersionAnnouncementsAnnouncementDeleteVersionEnum;
    announcement: number;
}

export interface VersionAnnouncementsAnnouncementGetRequest {
    version: VersionAnnouncementsAnnouncementGetVersionEnum;
    announcement: number;
}

export interface VersionAnnouncementsAnnouncementPatchRequest {
    version: VersionAnnouncementsAnnouncementPatchVersionEnum;
    announcement: number;
    announcement2?: Announcement;
}

export interface VersionAnnouncementsBatchDeleteOperationRequest {
    version: VersionAnnouncementsBatchDeleteOperationVersionEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionAnnouncementsBatchPatchOperationRequest {
    version: VersionAnnouncementsBatchPatchOperationVersionEnum;
    versionAnnouncementsBatchPatchRequest?: VersionAnnouncementsBatchPatchRequest;
}

export interface VersionAnnouncementsBatchPostOperationRequest {
    version: VersionAnnouncementsBatchPostOperationVersionEnum;
    versionAnnouncementsBatchPostRequest?: VersionAnnouncementsBatchPostRequest;
}

export interface VersionAnnouncementsGetRequest {
    version: VersionAnnouncementsGetVersionEnum;
}

export interface VersionAnnouncementsPostRequest {
    version: VersionAnnouncementsPostVersionEnum;
    announcement?: Announcement;
}

/**
 * 
 */
export class AnnouncementsApi extends runtime.BaseAPI {

    /**
     * Delete announcement
     */
    async versionAnnouncementsAnnouncementDeleteRaw(requestParameters: VersionAnnouncementsAnnouncementDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAnnouncementsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAnnouncementsAnnouncementDelete().'
            );
        }

        if (requestParameters['announcement'] == null) {
            throw new runtime.RequiredError(
                'announcement',
                'Required parameter "announcement" was null or undefined when calling versionAnnouncementsAnnouncementDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/announcements/{announcement}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"announcement"}}`, encodeURIComponent(String(requestParameters['announcement']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAnnouncementsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete announcement
     */
    async versionAnnouncementsAnnouncementDelete(requestParameters: VersionAnnouncementsAnnouncementDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAnnouncementsPost201Response> {
        const response = await this.versionAnnouncementsAnnouncementDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get announcement
     */
    async versionAnnouncementsAnnouncementGetRaw(requestParameters: VersionAnnouncementsAnnouncementGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAnnouncementsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAnnouncementsAnnouncementGet().'
            );
        }

        if (requestParameters['announcement'] == null) {
            throw new runtime.RequiredError(
                'announcement',
                'Required parameter "announcement" was null or undefined when calling versionAnnouncementsAnnouncementGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/announcements/{announcement}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"announcement"}}`, encodeURIComponent(String(requestParameters['announcement']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAnnouncementsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get announcement
     */
    async versionAnnouncementsAnnouncementGet(requestParameters: VersionAnnouncementsAnnouncementGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAnnouncementsPost201Response> {
        const response = await this.versionAnnouncementsAnnouncementGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update announcement
     */
    async versionAnnouncementsAnnouncementPatchRaw(requestParameters: VersionAnnouncementsAnnouncementPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAnnouncementsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAnnouncementsAnnouncementPatch().'
            );
        }

        if (requestParameters['announcement'] == null) {
            throw new runtime.RequiredError(
                'announcement',
                'Required parameter "announcement" was null or undefined when calling versionAnnouncementsAnnouncementPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/announcements/{announcement}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"announcement"}}`, encodeURIComponent(String(requestParameters['announcement']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AnnouncementToJSON(requestParameters['announcement2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAnnouncementsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update announcement
     */
    async versionAnnouncementsAnnouncementPatch(requestParameters: VersionAnnouncementsAnnouncementPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAnnouncementsPost201Response> {
        const response = await this.versionAnnouncementsAnnouncementPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a batch of announcements
     */
    async versionAnnouncementsBatchDeleteRaw(requestParameters: VersionAnnouncementsBatchDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAnnouncementsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAnnouncementsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/announcements/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAnnouncementsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of announcements
     */
    async versionAnnouncementsBatchDelete(requestParameters: VersionAnnouncementsBatchDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAnnouncementsBatchPost200Response> {
        const response = await this.versionAnnouncementsBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of announcements
     */
    async versionAnnouncementsBatchPatchRaw(requestParameters: VersionAnnouncementsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAnnouncementsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAnnouncementsBatchPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/announcements/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchPatchRequestToJSON(requestParameters['versionAnnouncementsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAnnouncementsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of announcements
     */
    async versionAnnouncementsBatchPatch(requestParameters: VersionAnnouncementsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAnnouncementsBatchPost200Response> {
        const response = await this.versionAnnouncementsBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of announcements
     */
    async versionAnnouncementsBatchPostRaw(requestParameters: VersionAnnouncementsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAnnouncementsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAnnouncementsBatchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/announcements/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchPostRequestToJSON(requestParameters['versionAnnouncementsBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAnnouncementsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of announcements
     */
    async versionAnnouncementsBatchPost(requestParameters: VersionAnnouncementsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAnnouncementsBatchPost200Response> {
        const response = await this.versionAnnouncementsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of announcements
     */
    async versionAnnouncementsGetRaw(requestParameters: VersionAnnouncementsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAnnouncementsGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAnnouncementsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/announcements`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAnnouncementsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of announcements
     */
    async versionAnnouncementsGet(requestParameters: VersionAnnouncementsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAnnouncementsGet200Response> {
        const response = await this.versionAnnouncementsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create announcement
     */
    async versionAnnouncementsPostRaw(requestParameters: VersionAnnouncementsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAnnouncementsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAnnouncementsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/announcements`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AnnouncementToJSON(requestParameters['announcement']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAnnouncementsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create announcement
     */
    async versionAnnouncementsPost(requestParameters: VersionAnnouncementsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAnnouncementsPost201Response> {
        const response = await this.versionAnnouncementsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionAnnouncementsAnnouncementDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAnnouncementsAnnouncementDeleteVersionEnum = typeof VersionAnnouncementsAnnouncementDeleteVersionEnum[keyof typeof VersionAnnouncementsAnnouncementDeleteVersionEnum];
/**
 * @export
 */
export const VersionAnnouncementsAnnouncementGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAnnouncementsAnnouncementGetVersionEnum = typeof VersionAnnouncementsAnnouncementGetVersionEnum[keyof typeof VersionAnnouncementsAnnouncementGetVersionEnum];
/**
 * @export
 */
export const VersionAnnouncementsAnnouncementPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAnnouncementsAnnouncementPatchVersionEnum = typeof VersionAnnouncementsAnnouncementPatchVersionEnum[keyof typeof VersionAnnouncementsAnnouncementPatchVersionEnum];
/**
 * @export
 */
export const VersionAnnouncementsBatchDeleteOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAnnouncementsBatchDeleteOperationVersionEnum = typeof VersionAnnouncementsBatchDeleteOperationVersionEnum[keyof typeof VersionAnnouncementsBatchDeleteOperationVersionEnum];
/**
 * @export
 */
export const VersionAnnouncementsBatchPatchOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAnnouncementsBatchPatchOperationVersionEnum = typeof VersionAnnouncementsBatchPatchOperationVersionEnum[keyof typeof VersionAnnouncementsBatchPatchOperationVersionEnum];
/**
 * @export
 */
export const VersionAnnouncementsBatchPostOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAnnouncementsBatchPostOperationVersionEnum = typeof VersionAnnouncementsBatchPostOperationVersionEnum[keyof typeof VersionAnnouncementsBatchPostOperationVersionEnum];
/**
 * @export
 */
export const VersionAnnouncementsGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAnnouncementsGetVersionEnum = typeof VersionAnnouncementsGetVersionEnum[keyof typeof VersionAnnouncementsGetVersionEnum];
/**
 * @export
 */
export const VersionAnnouncementsPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAnnouncementsPostVersionEnum = typeof VersionAnnouncementsPostVersionEnum[keyof typeof VersionAnnouncementsPostVersionEnum];
