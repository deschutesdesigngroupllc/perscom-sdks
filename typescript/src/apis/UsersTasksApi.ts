/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Task,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionCategoriesCategoryAwardsAttachPost200Response,
  VersionCategoriesCategoryAwardsAttachPostRequest,
  VersionCategoriesCategoryAwardsAwardPivotPatch200Response,
  VersionCategoriesCategoryAwardsAwardPivotPatchRequest,
  VersionCategoriesCategoryAwardsDetachDelete200Response,
  VersionCategoriesCategoryAwardsSyncPatch200Response,
  VersionCategoriesCategoryAwardsTogglePatch200Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
  VersionTasksBatchPatchRequest,
  VersionTasksBatchPost200Response,
  VersionTasksBatchPostRequest,
  VersionTasksGet200Response,
  VersionTasksPost201Response,
} from '../models/index';
import {
    TaskFromJSON,
    TaskToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionCategoriesCategoryAwardsAttachPost200ResponseFromJSON,
    VersionCategoriesCategoryAwardsAttachPost200ResponseToJSON,
    VersionCategoriesCategoryAwardsAttachPostRequestFromJSON,
    VersionCategoriesCategoryAwardsAttachPostRequestToJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatch200ResponseFromJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatch200ResponseToJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatchRequestFromJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatchRequestToJSON,
    VersionCategoriesCategoryAwardsDetachDelete200ResponseFromJSON,
    VersionCategoriesCategoryAwardsDetachDelete200ResponseToJSON,
    VersionCategoriesCategoryAwardsSyncPatch200ResponseFromJSON,
    VersionCategoriesCategoryAwardsSyncPatch200ResponseToJSON,
    VersionCategoriesCategoryAwardsTogglePatch200ResponseFromJSON,
    VersionCategoriesCategoryAwardsTogglePatch200ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
    VersionTasksBatchPatchRequestFromJSON,
    VersionTasksBatchPatchRequestToJSON,
    VersionTasksBatchPost200ResponseFromJSON,
    VersionTasksBatchPost200ResponseToJSON,
    VersionTasksBatchPostRequestFromJSON,
    VersionTasksBatchPostRequestToJSON,
    VersionTasksGet200ResponseFromJSON,
    VersionTasksGet200ResponseToJSON,
    VersionTasksPost201ResponseFromJSON,
    VersionTasksPost201ResponseToJSON,
} from '../models/index';

export interface VersionUsersUserTasksAttachPostRequest {
    version: VersionUsersUserTasksAttachPostVersionEnum;
    user: number;
    include?: VersionUsersUserTasksAttachPostIncludeEnum;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

export interface VersionUsersUserTasksBatchDeleteRequest {
    version: VersionUsersUserTasksBatchDeleteVersionEnum;
    user: number;
    include?: VersionUsersUserTasksBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionUsersUserTasksBatchPatchRequest {
    version: VersionUsersUserTasksBatchPatchVersionEnum;
    user: number;
    include?: VersionUsersUserTasksBatchPatchIncludeEnum;
    versionTasksBatchPatchRequest?: VersionTasksBatchPatchRequest;
}

export interface VersionUsersUserTasksBatchPostRequest {
    version: VersionUsersUserTasksBatchPostVersionEnum;
    user: number;
    include?: VersionUsersUserTasksBatchPostIncludeEnum;
    versionTasksBatchPostRequest?: VersionTasksBatchPostRequest;
}

export interface VersionUsersUserTasksDetachDeleteRequest {
    version: VersionUsersUserTasksDetachDeleteVersionEnum;
    user: number;
    include?: VersionUsersUserTasksDetachDeleteIncludeEnum;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

export interface VersionUsersUserTasksGetRequest {
    version: VersionUsersUserTasksGetVersionEnum;
    user: number;
    include?: VersionUsersUserTasksGetIncludeEnum;
}

export interface VersionUsersUserTasksPostRequest {
    version: VersionUsersUserTasksPostVersionEnum;
    user: number;
    include?: VersionUsersUserTasksPostIncludeEnum;
    task?: Task;
}

export interface VersionUsersUserTasksSyncPatchRequest {
    version: VersionUsersUserTasksSyncPatchVersionEnum;
    user: number;
    include?: VersionUsersUserTasksSyncPatchIncludeEnum;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

export interface VersionUsersUserTasksTaskDeleteRequest {
    version: VersionUsersUserTasksTaskDeleteVersionEnum;
    user: number;
    task: number;
    include?: VersionUsersUserTasksTaskDeleteIncludeEnum;
}

export interface VersionUsersUserTasksTaskGetRequest {
    version: VersionUsersUserTasksTaskGetVersionEnum;
    user: number;
    task: number;
    include?: VersionUsersUserTasksTaskGetIncludeEnum;
}

export interface VersionUsersUserTasksTaskPatchRequest {
    version: VersionUsersUserTasksTaskPatchVersionEnum;
    user: number;
    task: number;
    include?: VersionUsersUserTasksTaskPatchIncludeEnum;
    task2?: Task;
}

export interface VersionUsersUserTasksTaskPivotPatchRequest {
    version: VersionUsersUserTasksTaskPivotPatchVersionEnum;
    user: number;
    task: number;
    include?: VersionUsersUserTasksTaskPivotPatchIncludeEnum;
    versionCategoriesCategoryAwardsAwardPivotPatchRequest?: VersionCategoriesCategoryAwardsAwardPivotPatchRequest;
}

export interface VersionUsersUserTasksTogglePatchRequest {
    version: VersionUsersUserTasksTogglePatchVersionEnum;
    user: number;
    include?: VersionUsersUserTasksTogglePatchIncludeEnum;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

/**
 * 
 */
export class UsersTasksApi extends runtime.BaseAPI {

    /**
     * Attach tasks
     */
    async versionUsersUserTasksAttachPostRaw(requestParameters: VersionUsersUserTasksAttachPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsAttachPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserTasksAttachPost().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserTasksAttachPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/tasks/attach`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsAttachPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Attach tasks
     */
    async versionUsersUserTasksAttachPost(requestParameters: VersionUsersUserTasksAttachPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsAttachPost200Response> {
        const response = await this.versionUsersUserTasksAttachPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a batch of tasks
     */
    async versionUsersUserTasksBatchDeleteRaw(requestParameters: VersionUsersUserTasksBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionTasksBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserTasksBatchDelete().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserTasksBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/tasks/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionTasksBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of tasks
     */
    async versionUsersUserTasksBatchDelete(requestParameters: VersionUsersUserTasksBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionTasksBatchPost200Response> {
        const response = await this.versionUsersUserTasksBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of tasks
     */
    async versionUsersUserTasksBatchPatchRaw(requestParameters: VersionUsersUserTasksBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionTasksBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserTasksBatchPatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserTasksBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/tasks/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionTasksBatchPatchRequestToJSON(requestParameters['versionTasksBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionTasksBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of tasks
     */
    async versionUsersUserTasksBatchPatch(requestParameters: VersionUsersUserTasksBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionTasksBatchPost200Response> {
        const response = await this.versionUsersUserTasksBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of tasks
     */
    async versionUsersUserTasksBatchPostRaw(requestParameters: VersionUsersUserTasksBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionTasksBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserTasksBatchPost().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserTasksBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/tasks/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionTasksBatchPostRequestToJSON(requestParameters['versionTasksBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionTasksBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of tasks
     */
    async versionUsersUserTasksBatchPost(requestParameters: VersionUsersUserTasksBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionTasksBatchPost200Response> {
        const response = await this.versionUsersUserTasksBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Detach tasks
     */
    async versionUsersUserTasksDetachDeleteRaw(requestParameters: VersionUsersUserTasksDetachDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsDetachDelete200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserTasksDetachDelete().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserTasksDetachDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/tasks/detach`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsDetachDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Detach tasks
     */
    async versionUsersUserTasksDetachDelete(requestParameters: VersionUsersUserTasksDetachDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsDetachDelete200Response> {
        const response = await this.versionUsersUserTasksDetachDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of tasks
     */
    async versionUsersUserTasksGetRaw(requestParameters: VersionUsersUserTasksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionTasksGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserTasksGet().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserTasksGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/tasks`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionTasksGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of tasks
     */
    async versionUsersUserTasksGet(requestParameters: VersionUsersUserTasksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionTasksGet200Response> {
        const response = await this.versionUsersUserTasksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create task
     */
    async versionUsersUserTasksPostRaw(requestParameters: VersionUsersUserTasksPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionTasksPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserTasksPost().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserTasksPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/tasks`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskToJSON(requestParameters['task']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionTasksPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create task
     */
    async versionUsersUserTasksPost(requestParameters: VersionUsersUserTasksPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionTasksPost201Response> {
        const response = await this.versionUsersUserTasksPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sync tasks
     */
    async versionUsersUserTasksSyncPatchRaw(requestParameters: VersionUsersUserTasksSyncPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsSyncPatch200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserTasksSyncPatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserTasksSyncPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/tasks/sync`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsSyncPatch200ResponseFromJSON(jsonValue));
    }

    /**
     * Sync tasks
     */
    async versionUsersUserTasksSyncPatch(requestParameters: VersionUsersUserTasksSyncPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsSyncPatch200Response> {
        const response = await this.versionUsersUserTasksSyncPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete task
     */
    async versionUsersUserTasksTaskDeleteRaw(requestParameters: VersionUsersUserTasksTaskDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionTasksPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserTasksTaskDelete().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserTasksTaskDelete().'
            );
        }

        if (requestParameters['task'] == null) {
            throw new runtime.RequiredError(
                'task',
                'Required parameter "task" was null or undefined when calling versionUsersUserTasksTaskDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/tasks/{task}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"task"}}`, encodeURIComponent(String(requestParameters['task']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionTasksPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete task
     */
    async versionUsersUserTasksTaskDelete(requestParameters: VersionUsersUserTasksTaskDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionTasksPost201Response> {
        const response = await this.versionUsersUserTasksTaskDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get task
     */
    async versionUsersUserTasksTaskGetRaw(requestParameters: VersionUsersUserTasksTaskGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionTasksPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserTasksTaskGet().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserTasksTaskGet().'
            );
        }

        if (requestParameters['task'] == null) {
            throw new runtime.RequiredError(
                'task',
                'Required parameter "task" was null or undefined when calling versionUsersUserTasksTaskGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/tasks/{task}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"task"}}`, encodeURIComponent(String(requestParameters['task']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionTasksPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get task
     */
    async versionUsersUserTasksTaskGet(requestParameters: VersionUsersUserTasksTaskGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionTasksPost201Response> {
        const response = await this.versionUsersUserTasksTaskGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update task
     */
    async versionUsersUserTasksTaskPatchRaw(requestParameters: VersionUsersUserTasksTaskPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionTasksPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserTasksTaskPatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserTasksTaskPatch().'
            );
        }

        if (requestParameters['task'] == null) {
            throw new runtime.RequiredError(
                'task',
                'Required parameter "task" was null or undefined when calling versionUsersUserTasksTaskPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/tasks/{task}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"task"}}`, encodeURIComponent(String(requestParameters['task']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TaskToJSON(requestParameters['task2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionTasksPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update task
     */
    async versionUsersUserTasksTaskPatch(requestParameters: VersionUsersUserTasksTaskPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionTasksPost201Response> {
        const response = await this.versionUsersUserTasksTaskPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update pivot
     */
    async versionUsersUserTasksTaskPivotPatchRaw(requestParameters: VersionUsersUserTasksTaskPivotPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsAwardPivotPatch200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserTasksTaskPivotPatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserTasksTaskPivotPatch().'
            );
        }

        if (requestParameters['task'] == null) {
            throw new runtime.RequiredError(
                'task',
                'Required parameter "task" was null or undefined when calling versionUsersUserTasksTaskPivotPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/tasks/{task}/pivot`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"task"}}`, encodeURIComponent(String(requestParameters['task']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAwardPivotPatchRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAwardPivotPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsAwardPivotPatch200ResponseFromJSON(jsonValue));
    }

    /**
     * Update pivot
     */
    async versionUsersUserTasksTaskPivotPatch(requestParameters: VersionUsersUserTasksTaskPivotPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsAwardPivotPatch200Response> {
        const response = await this.versionUsersUserTasksTaskPivotPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Toggle tasks
     */
    async versionUsersUserTasksTogglePatchRaw(requestParameters: VersionUsersUserTasksTogglePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsTogglePatch200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserTasksTogglePatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserTasksTogglePatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/tasks/toggle`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsTogglePatch200ResponseFromJSON(jsonValue));
    }

    /**
     * Toggle tasks
     */
    async versionUsersUserTasksTogglePatch(requestParameters: VersionUsersUserTasksTogglePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsTogglePatch200Response> {
        const response = await this.versionUsersUserTasksTogglePatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionUsersUserTasksAttachPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserTasksAttachPostVersionEnum = typeof VersionUsersUserTasksAttachPostVersionEnum[keyof typeof VersionUsersUserTasksAttachPostVersionEnum];
/**
 * @export
 */
export const VersionUsersUserTasksAttachPostIncludeEnum = {
    Assignment: 'assignment',
    Attachments: 'attachments'
} as const;
export type VersionUsersUserTasksAttachPostIncludeEnum = typeof VersionUsersUserTasksAttachPostIncludeEnum[keyof typeof VersionUsersUserTasksAttachPostIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserTasksBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserTasksBatchDeleteVersionEnum = typeof VersionUsersUserTasksBatchDeleteVersionEnum[keyof typeof VersionUsersUserTasksBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersUserTasksBatchDeleteIncludeEnum = {
    Assignment: 'assignment',
    Attachments: 'attachments'
} as const;
export type VersionUsersUserTasksBatchDeleteIncludeEnum = typeof VersionUsersUserTasksBatchDeleteIncludeEnum[keyof typeof VersionUsersUserTasksBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserTasksBatchPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserTasksBatchPatchVersionEnum = typeof VersionUsersUserTasksBatchPatchVersionEnum[keyof typeof VersionUsersUserTasksBatchPatchVersionEnum];
/**
 * @export
 */
export const VersionUsersUserTasksBatchPatchIncludeEnum = {
    Assignment: 'assignment',
    Attachments: 'attachments'
} as const;
export type VersionUsersUserTasksBatchPatchIncludeEnum = typeof VersionUsersUserTasksBatchPatchIncludeEnum[keyof typeof VersionUsersUserTasksBatchPatchIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserTasksBatchPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserTasksBatchPostVersionEnum = typeof VersionUsersUserTasksBatchPostVersionEnum[keyof typeof VersionUsersUserTasksBatchPostVersionEnum];
/**
 * @export
 */
export const VersionUsersUserTasksBatchPostIncludeEnum = {
    Assignment: 'assignment',
    Attachments: 'attachments'
} as const;
export type VersionUsersUserTasksBatchPostIncludeEnum = typeof VersionUsersUserTasksBatchPostIncludeEnum[keyof typeof VersionUsersUserTasksBatchPostIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserTasksDetachDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserTasksDetachDeleteVersionEnum = typeof VersionUsersUserTasksDetachDeleteVersionEnum[keyof typeof VersionUsersUserTasksDetachDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersUserTasksDetachDeleteIncludeEnum = {
    Assignment: 'assignment',
    Attachments: 'attachments'
} as const;
export type VersionUsersUserTasksDetachDeleteIncludeEnum = typeof VersionUsersUserTasksDetachDeleteIncludeEnum[keyof typeof VersionUsersUserTasksDetachDeleteIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserTasksGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserTasksGetVersionEnum = typeof VersionUsersUserTasksGetVersionEnum[keyof typeof VersionUsersUserTasksGetVersionEnum];
/**
 * @export
 */
export const VersionUsersUserTasksGetIncludeEnum = {
    Assignment: 'assignment',
    Attachments: 'attachments'
} as const;
export type VersionUsersUserTasksGetIncludeEnum = typeof VersionUsersUserTasksGetIncludeEnum[keyof typeof VersionUsersUserTasksGetIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserTasksPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserTasksPostVersionEnum = typeof VersionUsersUserTasksPostVersionEnum[keyof typeof VersionUsersUserTasksPostVersionEnum];
/**
 * @export
 */
export const VersionUsersUserTasksPostIncludeEnum = {
    Assignment: 'assignment',
    Attachments: 'attachments'
} as const;
export type VersionUsersUserTasksPostIncludeEnum = typeof VersionUsersUserTasksPostIncludeEnum[keyof typeof VersionUsersUserTasksPostIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserTasksSyncPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserTasksSyncPatchVersionEnum = typeof VersionUsersUserTasksSyncPatchVersionEnum[keyof typeof VersionUsersUserTasksSyncPatchVersionEnum];
/**
 * @export
 */
export const VersionUsersUserTasksSyncPatchIncludeEnum = {
    Assignment: 'assignment',
    Attachments: 'attachments'
} as const;
export type VersionUsersUserTasksSyncPatchIncludeEnum = typeof VersionUsersUserTasksSyncPatchIncludeEnum[keyof typeof VersionUsersUserTasksSyncPatchIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserTasksTaskDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserTasksTaskDeleteVersionEnum = typeof VersionUsersUserTasksTaskDeleteVersionEnum[keyof typeof VersionUsersUserTasksTaskDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersUserTasksTaskDeleteIncludeEnum = {
    Assignment: 'assignment',
    Attachments: 'attachments'
} as const;
export type VersionUsersUserTasksTaskDeleteIncludeEnum = typeof VersionUsersUserTasksTaskDeleteIncludeEnum[keyof typeof VersionUsersUserTasksTaskDeleteIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserTasksTaskGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserTasksTaskGetVersionEnum = typeof VersionUsersUserTasksTaskGetVersionEnum[keyof typeof VersionUsersUserTasksTaskGetVersionEnum];
/**
 * @export
 */
export const VersionUsersUserTasksTaskGetIncludeEnum = {
    Assignment: 'assignment',
    Attachments: 'attachments'
} as const;
export type VersionUsersUserTasksTaskGetIncludeEnum = typeof VersionUsersUserTasksTaskGetIncludeEnum[keyof typeof VersionUsersUserTasksTaskGetIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserTasksTaskPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserTasksTaskPatchVersionEnum = typeof VersionUsersUserTasksTaskPatchVersionEnum[keyof typeof VersionUsersUserTasksTaskPatchVersionEnum];
/**
 * @export
 */
export const VersionUsersUserTasksTaskPatchIncludeEnum = {
    Assignment: 'assignment',
    Attachments: 'attachments'
} as const;
export type VersionUsersUserTasksTaskPatchIncludeEnum = typeof VersionUsersUserTasksTaskPatchIncludeEnum[keyof typeof VersionUsersUserTasksTaskPatchIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserTasksTaskPivotPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserTasksTaskPivotPatchVersionEnum = typeof VersionUsersUserTasksTaskPivotPatchVersionEnum[keyof typeof VersionUsersUserTasksTaskPivotPatchVersionEnum];
/**
 * @export
 */
export const VersionUsersUserTasksTaskPivotPatchIncludeEnum = {
    Assignment: 'assignment',
    Attachments: 'attachments'
} as const;
export type VersionUsersUserTasksTaskPivotPatchIncludeEnum = typeof VersionUsersUserTasksTaskPivotPatchIncludeEnum[keyof typeof VersionUsersUserTasksTaskPivotPatchIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserTasksTogglePatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserTasksTogglePatchVersionEnum = typeof VersionUsersUserTasksTogglePatchVersionEnum[keyof typeof VersionUsersUserTasksTogglePatchVersionEnum];
/**
 * @export
 */
export const VersionUsersUserTasksTogglePatchIncludeEnum = {
    Assignment: 'assignment',
    Attachments: 'attachments'
} as const;
export type VersionUsersUserTasksTogglePatchIncludeEnum = typeof VersionUsersUserTasksTogglePatchIncludeEnum[keyof typeof VersionUsersUserTasksTogglePatchIncludeEnum];
