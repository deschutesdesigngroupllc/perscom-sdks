/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Attachment,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionAttachmentsBatchPatchRequest,
  VersionAttachmentsBatchPost200Response,
  VersionAttachmentsBatchPostRequest,
  VersionAttachmentsGet200Response,
  VersionAttachmentsPost201Response,
  VersionCategoriesCategoryAwardsAttachPost200Response,
  VersionCategoriesCategoryAwardsAttachPostRequest,
  VersionCategoriesCategoryAwardsAwardPivotPatch200Response,
  VersionCategoriesCategoryAwardsAwardPivotPatchRequest,
  VersionCategoriesCategoryAwardsDetachDelete200Response,
  VersionCategoriesCategoryAwardsSyncPatch200Response,
  VersionCategoriesCategoryAwardsTogglePatch200Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
} from '../models/index';
import {
    AttachmentFromJSON,
    AttachmentToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionAttachmentsBatchPatchRequestFromJSON,
    VersionAttachmentsBatchPatchRequestToJSON,
    VersionAttachmentsBatchPost200ResponseFromJSON,
    VersionAttachmentsBatchPost200ResponseToJSON,
    VersionAttachmentsBatchPostRequestFromJSON,
    VersionAttachmentsBatchPostRequestToJSON,
    VersionAttachmentsGet200ResponseFromJSON,
    VersionAttachmentsGet200ResponseToJSON,
    VersionAttachmentsPost201ResponseFromJSON,
    VersionAttachmentsPost201ResponseToJSON,
    VersionCategoriesCategoryAwardsAttachPost200ResponseFromJSON,
    VersionCategoriesCategoryAwardsAttachPost200ResponseToJSON,
    VersionCategoriesCategoryAwardsAttachPostRequestFromJSON,
    VersionCategoriesCategoryAwardsAttachPostRequestToJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatch200ResponseFromJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatch200ResponseToJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatchRequestFromJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatchRequestToJSON,
    VersionCategoriesCategoryAwardsDetachDelete200ResponseFromJSON,
    VersionCategoriesCategoryAwardsDetachDelete200ResponseToJSON,
    VersionCategoriesCategoryAwardsSyncPatch200ResponseFromJSON,
    VersionCategoriesCategoryAwardsSyncPatch200ResponseToJSON,
    VersionCategoriesCategoryAwardsTogglePatch200ResponseFromJSON,
    VersionCategoriesCategoryAwardsTogglePatch200ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
} from '../models/index';

export interface VersionUsersUserAttachmentsAttachPostRequest {
    version: VersionUsersUserAttachmentsAttachPostVersionEnum;
    user: number;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

export interface VersionUsersUserAttachmentsAttachmentDeleteRequest {
    version: VersionUsersUserAttachmentsAttachmentDeleteVersionEnum;
    user: number;
    attachment: number;
}

export interface VersionUsersUserAttachmentsAttachmentGetRequest {
    version: VersionUsersUserAttachmentsAttachmentGetVersionEnum;
    user: number;
    attachment: number;
}

export interface VersionUsersUserAttachmentsAttachmentPatchRequest {
    version: VersionUsersUserAttachmentsAttachmentPatchVersionEnum;
    user: number;
    attachment: number;
    attachment2?: Omit<Attachment, 'filename'|'model_type'|'model_id'|'path'|'attachment_url'>;
}

export interface VersionUsersUserAttachmentsAttachmentPivotPatchRequest {
    version: VersionUsersUserAttachmentsAttachmentPivotPatchVersionEnum;
    user: number;
    attachment: number;
    versionCategoriesCategoryAwardsAwardPivotPatchRequest?: VersionCategoriesCategoryAwardsAwardPivotPatchRequest;
}

export interface VersionUsersUserAttachmentsBatchDeleteRequest {
    version: VersionUsersUserAttachmentsBatchDeleteVersionEnum;
    user: number;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionUsersUserAttachmentsBatchPatchRequest {
    version: VersionUsersUserAttachmentsBatchPatchVersionEnum;
    user: number;
    versionAttachmentsBatchPatchRequest?: VersionAttachmentsBatchPatchRequest;
}

export interface VersionUsersUserAttachmentsBatchPostRequest {
    version: VersionUsersUserAttachmentsBatchPostVersionEnum;
    user: number;
    versionAttachmentsBatchPostRequest?: VersionAttachmentsBatchPostRequest;
}

export interface VersionUsersUserAttachmentsDetachDeleteRequest {
    version: VersionUsersUserAttachmentsDetachDeleteVersionEnum;
    user: number;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

export interface VersionUsersUserAttachmentsGetRequest {
    version: VersionUsersUserAttachmentsGetVersionEnum;
    user: number;
}

export interface VersionUsersUserAttachmentsPostRequest {
    version: VersionUsersUserAttachmentsPostVersionEnum;
    user: number;
    attachment?: Omit<Attachment, 'filename'|'model_type'|'model_id'|'path'|'attachment_url'>;
}

export interface VersionUsersUserAttachmentsSyncPatchRequest {
    version: VersionUsersUserAttachmentsSyncPatchVersionEnum;
    user: number;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

export interface VersionUsersUserAttachmentsTogglePatchRequest {
    version: VersionUsersUserAttachmentsTogglePatchVersionEnum;
    user: number;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

/**
 * 
 */
export class UsersAttachmentsApi extends runtime.BaseAPI {

    /**
     * Attach attachments
     */
    async versionUsersUserAttachmentsAttachPostRaw(requestParameters: VersionUsersUserAttachmentsAttachPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsAttachPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserAttachmentsAttachPost().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserAttachmentsAttachPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/attachments/attach`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsAttachPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Attach attachments
     */
    async versionUsersUserAttachmentsAttachPost(requestParameters: VersionUsersUserAttachmentsAttachPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsAttachPost200Response> {
        const response = await this.versionUsersUserAttachmentsAttachPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete attachment
     */
    async versionUsersUserAttachmentsAttachmentDeleteRaw(requestParameters: VersionUsersUserAttachmentsAttachmentDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAttachmentsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserAttachmentsAttachmentDelete().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserAttachmentsAttachmentDelete().'
            );
        }

        if (requestParameters['attachment'] == null) {
            throw new runtime.RequiredError(
                'attachment',
                'Required parameter "attachment" was null or undefined when calling versionUsersUserAttachmentsAttachmentDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/attachments/{attachment}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"attachment"}}`, encodeURIComponent(String(requestParameters['attachment']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAttachmentsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete attachment
     */
    async versionUsersUserAttachmentsAttachmentDelete(requestParameters: VersionUsersUserAttachmentsAttachmentDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAttachmentsPost201Response> {
        const response = await this.versionUsersUserAttachmentsAttachmentDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get attachment
     */
    async versionUsersUserAttachmentsAttachmentGetRaw(requestParameters: VersionUsersUserAttachmentsAttachmentGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAttachmentsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserAttachmentsAttachmentGet().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserAttachmentsAttachmentGet().'
            );
        }

        if (requestParameters['attachment'] == null) {
            throw new runtime.RequiredError(
                'attachment',
                'Required parameter "attachment" was null or undefined when calling versionUsersUserAttachmentsAttachmentGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/attachments/{attachment}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"attachment"}}`, encodeURIComponent(String(requestParameters['attachment']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAttachmentsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get attachment
     */
    async versionUsersUserAttachmentsAttachmentGet(requestParameters: VersionUsersUserAttachmentsAttachmentGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAttachmentsPost201Response> {
        const response = await this.versionUsersUserAttachmentsAttachmentGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update attachment
     */
    async versionUsersUserAttachmentsAttachmentPatchRaw(requestParameters: VersionUsersUserAttachmentsAttachmentPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAttachmentsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserAttachmentsAttachmentPatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserAttachmentsAttachmentPatch().'
            );
        }

        if (requestParameters['attachment'] == null) {
            throw new runtime.RequiredError(
                'attachment',
                'Required parameter "attachment" was null or undefined when calling versionUsersUserAttachmentsAttachmentPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/attachments/{attachment}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"attachment"}}`, encodeURIComponent(String(requestParameters['attachment']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AttachmentToJSON(requestParameters['attachment2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAttachmentsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update attachment
     */
    async versionUsersUserAttachmentsAttachmentPatch(requestParameters: VersionUsersUserAttachmentsAttachmentPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAttachmentsPost201Response> {
        const response = await this.versionUsersUserAttachmentsAttachmentPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update pivot
     */
    async versionUsersUserAttachmentsAttachmentPivotPatchRaw(requestParameters: VersionUsersUserAttachmentsAttachmentPivotPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsAwardPivotPatch200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserAttachmentsAttachmentPivotPatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserAttachmentsAttachmentPivotPatch().'
            );
        }

        if (requestParameters['attachment'] == null) {
            throw new runtime.RequiredError(
                'attachment',
                'Required parameter "attachment" was null or undefined when calling versionUsersUserAttachmentsAttachmentPivotPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/attachments/{attachment}/pivot`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"attachment"}}`, encodeURIComponent(String(requestParameters['attachment']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAwardPivotPatchRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAwardPivotPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsAwardPivotPatch200ResponseFromJSON(jsonValue));
    }

    /**
     * Update pivot
     */
    async versionUsersUserAttachmentsAttachmentPivotPatch(requestParameters: VersionUsersUserAttachmentsAttachmentPivotPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsAwardPivotPatch200Response> {
        const response = await this.versionUsersUserAttachmentsAttachmentPivotPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a batch of attachments
     */
    async versionUsersUserAttachmentsBatchDeleteRaw(requestParameters: VersionUsersUserAttachmentsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAttachmentsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserAttachmentsBatchDelete().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserAttachmentsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/attachments/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAttachmentsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of attachments
     */
    async versionUsersUserAttachmentsBatchDelete(requestParameters: VersionUsersUserAttachmentsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAttachmentsBatchPost200Response> {
        const response = await this.versionUsersUserAttachmentsBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of attachments
     */
    async versionUsersUserAttachmentsBatchPatchRaw(requestParameters: VersionUsersUserAttachmentsBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAttachmentsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserAttachmentsBatchPatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserAttachmentsBatchPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/attachments/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAttachmentsBatchPatchRequestToJSON(requestParameters['versionAttachmentsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAttachmentsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of attachments
     */
    async versionUsersUserAttachmentsBatchPatch(requestParameters: VersionUsersUserAttachmentsBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAttachmentsBatchPost200Response> {
        const response = await this.versionUsersUserAttachmentsBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of attachments
     */
    async versionUsersUserAttachmentsBatchPostRaw(requestParameters: VersionUsersUserAttachmentsBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAttachmentsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserAttachmentsBatchPost().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserAttachmentsBatchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/attachments/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAttachmentsBatchPostRequestToJSON(requestParameters['versionAttachmentsBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAttachmentsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of attachments
     */
    async versionUsersUserAttachmentsBatchPost(requestParameters: VersionUsersUserAttachmentsBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAttachmentsBatchPost200Response> {
        const response = await this.versionUsersUserAttachmentsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Detach attachments
     */
    async versionUsersUserAttachmentsDetachDeleteRaw(requestParameters: VersionUsersUserAttachmentsDetachDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsDetachDelete200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserAttachmentsDetachDelete().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserAttachmentsDetachDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/attachments/detach`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsDetachDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Detach attachments
     */
    async versionUsersUserAttachmentsDetachDelete(requestParameters: VersionUsersUserAttachmentsDetachDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsDetachDelete200Response> {
        const response = await this.versionUsersUserAttachmentsDetachDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of attachments
     */
    async versionUsersUserAttachmentsGetRaw(requestParameters: VersionUsersUserAttachmentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAttachmentsGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserAttachmentsGet().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserAttachmentsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/attachments`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAttachmentsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of attachments
     */
    async versionUsersUserAttachmentsGet(requestParameters: VersionUsersUserAttachmentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAttachmentsGet200Response> {
        const response = await this.versionUsersUserAttachmentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create attachment
     */
    async versionUsersUserAttachmentsPostRaw(requestParameters: VersionUsersUserAttachmentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAttachmentsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserAttachmentsPost().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserAttachmentsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/attachments`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AttachmentToJSON(requestParameters['attachment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAttachmentsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create attachment
     */
    async versionUsersUserAttachmentsPost(requestParameters: VersionUsersUserAttachmentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAttachmentsPost201Response> {
        const response = await this.versionUsersUserAttachmentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sync attachments
     */
    async versionUsersUserAttachmentsSyncPatchRaw(requestParameters: VersionUsersUserAttachmentsSyncPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsSyncPatch200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserAttachmentsSyncPatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserAttachmentsSyncPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/attachments/sync`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsSyncPatch200ResponseFromJSON(jsonValue));
    }

    /**
     * Sync attachments
     */
    async versionUsersUserAttachmentsSyncPatch(requestParameters: VersionUsersUserAttachmentsSyncPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsSyncPatch200Response> {
        const response = await this.versionUsersUserAttachmentsSyncPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Toggle attachments
     */
    async versionUsersUserAttachmentsTogglePatchRaw(requestParameters: VersionUsersUserAttachmentsTogglePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsTogglePatch200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserAttachmentsTogglePatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserAttachmentsTogglePatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/attachments/toggle`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsTogglePatch200ResponseFromJSON(jsonValue));
    }

    /**
     * Toggle attachments
     */
    async versionUsersUserAttachmentsTogglePatch(requestParameters: VersionUsersUserAttachmentsTogglePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsTogglePatch200Response> {
        const response = await this.versionUsersUserAttachmentsTogglePatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionUsersUserAttachmentsAttachPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserAttachmentsAttachPostVersionEnum = typeof VersionUsersUserAttachmentsAttachPostVersionEnum[keyof typeof VersionUsersUserAttachmentsAttachPostVersionEnum];
/**
 * @export
 */
export const VersionUsersUserAttachmentsAttachmentDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserAttachmentsAttachmentDeleteVersionEnum = typeof VersionUsersUserAttachmentsAttachmentDeleteVersionEnum[keyof typeof VersionUsersUserAttachmentsAttachmentDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersUserAttachmentsAttachmentGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserAttachmentsAttachmentGetVersionEnum = typeof VersionUsersUserAttachmentsAttachmentGetVersionEnum[keyof typeof VersionUsersUserAttachmentsAttachmentGetVersionEnum];
/**
 * @export
 */
export const VersionUsersUserAttachmentsAttachmentPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserAttachmentsAttachmentPatchVersionEnum = typeof VersionUsersUserAttachmentsAttachmentPatchVersionEnum[keyof typeof VersionUsersUserAttachmentsAttachmentPatchVersionEnum];
/**
 * @export
 */
export const VersionUsersUserAttachmentsAttachmentPivotPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserAttachmentsAttachmentPivotPatchVersionEnum = typeof VersionUsersUserAttachmentsAttachmentPivotPatchVersionEnum[keyof typeof VersionUsersUserAttachmentsAttachmentPivotPatchVersionEnum];
/**
 * @export
 */
export const VersionUsersUserAttachmentsBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserAttachmentsBatchDeleteVersionEnum = typeof VersionUsersUserAttachmentsBatchDeleteVersionEnum[keyof typeof VersionUsersUserAttachmentsBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersUserAttachmentsBatchPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserAttachmentsBatchPatchVersionEnum = typeof VersionUsersUserAttachmentsBatchPatchVersionEnum[keyof typeof VersionUsersUserAttachmentsBatchPatchVersionEnum];
/**
 * @export
 */
export const VersionUsersUserAttachmentsBatchPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserAttachmentsBatchPostVersionEnum = typeof VersionUsersUserAttachmentsBatchPostVersionEnum[keyof typeof VersionUsersUserAttachmentsBatchPostVersionEnum];
/**
 * @export
 */
export const VersionUsersUserAttachmentsDetachDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserAttachmentsDetachDeleteVersionEnum = typeof VersionUsersUserAttachmentsDetachDeleteVersionEnum[keyof typeof VersionUsersUserAttachmentsDetachDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersUserAttachmentsGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserAttachmentsGetVersionEnum = typeof VersionUsersUserAttachmentsGetVersionEnum[keyof typeof VersionUsersUserAttachmentsGetVersionEnum];
/**
 * @export
 */
export const VersionUsersUserAttachmentsPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserAttachmentsPostVersionEnum = typeof VersionUsersUserAttachmentsPostVersionEnum[keyof typeof VersionUsersUserAttachmentsPostVersionEnum];
/**
 * @export
 */
export const VersionUsersUserAttachmentsSyncPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserAttachmentsSyncPatchVersionEnum = typeof VersionUsersUserAttachmentsSyncPatchVersionEnum[keyof typeof VersionUsersUserAttachmentsSyncPatchVersionEnum];
/**
 * @export
 */
export const VersionUsersUserAttachmentsTogglePatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserAttachmentsTogglePatchVersionEnum = typeof VersionUsersUserAttachmentsTogglePatchVersionEnum[keyof typeof VersionUsersUserAttachmentsTogglePatchVersionEnum];
