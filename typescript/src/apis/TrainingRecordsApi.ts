/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TrainingRecord,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsPost422Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
  VersionTrainingRecordsBatchPatchRequest,
  VersionTrainingRecordsBatchPost200Response,
  VersionTrainingRecordsBatchPostRequest,
  VersionTrainingRecordsGet200Response,
  VersionTrainingRecordsPost201Response,
} from '../models/index';
import {
    TrainingRecordFromJSON,
    TrainingRecordToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
    VersionTrainingRecordsBatchPatchRequestFromJSON,
    VersionTrainingRecordsBatchPatchRequestToJSON,
    VersionTrainingRecordsBatchPost200ResponseFromJSON,
    VersionTrainingRecordsBatchPost200ResponseToJSON,
    VersionTrainingRecordsBatchPostRequestFromJSON,
    VersionTrainingRecordsBatchPostRequestToJSON,
    VersionTrainingRecordsGet200ResponseFromJSON,
    VersionTrainingRecordsGet200ResponseToJSON,
    VersionTrainingRecordsPost201ResponseFromJSON,
    VersionTrainingRecordsPost201ResponseToJSON,
} from '../models/index';

export interface VersionTrainingRecordsBatchPatchOperationRequest {
    version: VersionTrainingRecordsBatchPatchOperationVersionEnum;
    include?: VersionTrainingRecordsBatchPatchOperationIncludeEnum;
    versionTrainingRecordsBatchPatchRequest?: VersionTrainingRecordsBatchPatchRequest;
}

export interface VersionTrainingRecordsBatchPostOperationRequest {
    version: VersionTrainingRecordsBatchPostOperationVersionEnum;
    include?: VersionTrainingRecordsBatchPostOperationIncludeEnum;
    versionTrainingRecordsBatchPostRequest?: VersionTrainingRecordsBatchPostRequest;
}

export interface VersionTrainingRecordsGetRequest {
    version: VersionTrainingRecordsGetVersionEnum;
    include?: VersionTrainingRecordsGetIncludeEnum;
}

export interface VersionTrainingRecordsPostRequest {
    version: VersionTrainingRecordsPostVersionEnum;
    include?: VersionTrainingRecordsPostIncludeEnum;
    trainingRecord?: TrainingRecord;
}

export interface VersionTrainingRecordsTrainingRecordDeleteRequest {
    version: VersionTrainingRecordsTrainingRecordDeleteVersionEnum;
    trainingRecord: number;
    include?: VersionTrainingRecordsTrainingRecordDeleteIncludeEnum;
}

export interface VersionTrainingRecordsTrainingRecordGetRequest {
    version: VersionTrainingRecordsTrainingRecordGetVersionEnum;
    trainingRecord: number;
    include?: VersionTrainingRecordsTrainingRecordGetIncludeEnum;
}

export interface VersionTrainingRecordsTrainingRecordPatchRequest {
    version: VersionTrainingRecordsTrainingRecordPatchVersionEnum;
    trainingRecord: number;
    include?: VersionTrainingRecordsTrainingRecordPatchIncludeEnum;
    trainingRecord2?: TrainingRecord;
}

/**
 * 
 */
export class TrainingRecordsApi extends runtime.BaseAPI {

    /**
     * Update a batch of training records
     */
    async versionTrainingRecordsBatchPatchRaw(requestParameters: VersionTrainingRecordsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionTrainingRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionTrainingRecordsBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/training-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionTrainingRecordsBatchPatchRequestToJSON(requestParameters['versionTrainingRecordsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionTrainingRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of training records
     */
    async versionTrainingRecordsBatchPatch(requestParameters: VersionTrainingRecordsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionTrainingRecordsBatchPost200Response> {
        const response = await this.versionTrainingRecordsBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of training records
     */
    async versionTrainingRecordsBatchPostRaw(requestParameters: VersionTrainingRecordsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionTrainingRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionTrainingRecordsBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/training-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionTrainingRecordsBatchPostRequestToJSON(requestParameters['versionTrainingRecordsBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionTrainingRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of training records
     */
    async versionTrainingRecordsBatchPost(requestParameters: VersionTrainingRecordsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionTrainingRecordsBatchPost200Response> {
        const response = await this.versionTrainingRecordsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of training records
     */
    async versionTrainingRecordsGetRaw(requestParameters: VersionTrainingRecordsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionTrainingRecordsGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionTrainingRecordsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/training-records`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionTrainingRecordsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of training records
     */
    async versionTrainingRecordsGet(requestParameters: VersionTrainingRecordsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionTrainingRecordsGet200Response> {
        const response = await this.versionTrainingRecordsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create training record
     */
    async versionTrainingRecordsPostRaw(requestParameters: VersionTrainingRecordsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionTrainingRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionTrainingRecordsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/training-records`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TrainingRecordToJSON(requestParameters['trainingRecord']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionTrainingRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create training record
     */
    async versionTrainingRecordsPost(requestParameters: VersionTrainingRecordsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionTrainingRecordsPost201Response> {
        const response = await this.versionTrainingRecordsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete training record
     */
    async versionTrainingRecordsTrainingRecordDeleteRaw(requestParameters: VersionTrainingRecordsTrainingRecordDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionTrainingRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionTrainingRecordsTrainingRecordDelete().'
            );
        }

        if (requestParameters['trainingRecord'] == null) {
            throw new runtime.RequiredError(
                'trainingRecord',
                'Required parameter "trainingRecord" was null or undefined when calling versionTrainingRecordsTrainingRecordDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/training-records/{training_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"training_record"}}`, encodeURIComponent(String(requestParameters['trainingRecord']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionTrainingRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete training record
     */
    async versionTrainingRecordsTrainingRecordDelete(requestParameters: VersionTrainingRecordsTrainingRecordDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionTrainingRecordsPost201Response> {
        const response = await this.versionTrainingRecordsTrainingRecordDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get training record
     */
    async versionTrainingRecordsTrainingRecordGetRaw(requestParameters: VersionTrainingRecordsTrainingRecordGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionTrainingRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionTrainingRecordsTrainingRecordGet().'
            );
        }

        if (requestParameters['trainingRecord'] == null) {
            throw new runtime.RequiredError(
                'trainingRecord',
                'Required parameter "trainingRecord" was null or undefined when calling versionTrainingRecordsTrainingRecordGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/training-records/{training_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"training_record"}}`, encodeURIComponent(String(requestParameters['trainingRecord']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionTrainingRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get training record
     */
    async versionTrainingRecordsTrainingRecordGet(requestParameters: VersionTrainingRecordsTrainingRecordGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionTrainingRecordsPost201Response> {
        const response = await this.versionTrainingRecordsTrainingRecordGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update training record
     */
    async versionTrainingRecordsTrainingRecordPatchRaw(requestParameters: VersionTrainingRecordsTrainingRecordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionTrainingRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionTrainingRecordsTrainingRecordPatch().'
            );
        }

        if (requestParameters['trainingRecord'] == null) {
            throw new runtime.RequiredError(
                'trainingRecord',
                'Required parameter "trainingRecord" was null or undefined when calling versionTrainingRecordsTrainingRecordPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/training-records/{training_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"training_record"}}`, encodeURIComponent(String(requestParameters['trainingRecord']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TrainingRecordToJSON(requestParameters['trainingRecord2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionTrainingRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update training record
     */
    async versionTrainingRecordsTrainingRecordPatch(requestParameters: VersionTrainingRecordsTrainingRecordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionTrainingRecordsPost201Response> {
        const response = await this.versionTrainingRecordsTrainingRecordPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionTrainingRecordsBatchPatchOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionTrainingRecordsBatchPatchOperationVersionEnum = typeof VersionTrainingRecordsBatchPatchOperationVersionEnum[keyof typeof VersionTrainingRecordsBatchPatchOperationVersionEnum];
/**
 * @export
 */
export const VersionTrainingRecordsBatchPatchOperationIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Competencies: 'competencies',
    Credentials: 'credentials',
    Credentials2: 'credentials.*',
    Document: 'document',
    Event: 'event',
    Event2: 'event.*',
    Instructor: 'instructor',
    Instructor2: 'instructor.*',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionTrainingRecordsBatchPatchOperationIncludeEnum = typeof VersionTrainingRecordsBatchPatchOperationIncludeEnum[keyof typeof VersionTrainingRecordsBatchPatchOperationIncludeEnum];
/**
 * @export
 */
export const VersionTrainingRecordsBatchPostOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionTrainingRecordsBatchPostOperationVersionEnum = typeof VersionTrainingRecordsBatchPostOperationVersionEnum[keyof typeof VersionTrainingRecordsBatchPostOperationVersionEnum];
/**
 * @export
 */
export const VersionTrainingRecordsBatchPostOperationIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Competencies: 'competencies',
    Credentials: 'credentials',
    Credentials2: 'credentials.*',
    Document: 'document',
    Event: 'event',
    Event2: 'event.*',
    Instructor: 'instructor',
    Instructor2: 'instructor.*',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionTrainingRecordsBatchPostOperationIncludeEnum = typeof VersionTrainingRecordsBatchPostOperationIncludeEnum[keyof typeof VersionTrainingRecordsBatchPostOperationIncludeEnum];
/**
 * @export
 */
export const VersionTrainingRecordsGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionTrainingRecordsGetVersionEnum = typeof VersionTrainingRecordsGetVersionEnum[keyof typeof VersionTrainingRecordsGetVersionEnum];
/**
 * @export
 */
export const VersionTrainingRecordsGetIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Competencies: 'competencies',
    Credentials: 'credentials',
    Credentials2: 'credentials.*',
    Document: 'document',
    Event: 'event',
    Event2: 'event.*',
    Instructor: 'instructor',
    Instructor2: 'instructor.*',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionTrainingRecordsGetIncludeEnum = typeof VersionTrainingRecordsGetIncludeEnum[keyof typeof VersionTrainingRecordsGetIncludeEnum];
/**
 * @export
 */
export const VersionTrainingRecordsPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionTrainingRecordsPostVersionEnum = typeof VersionTrainingRecordsPostVersionEnum[keyof typeof VersionTrainingRecordsPostVersionEnum];
/**
 * @export
 */
export const VersionTrainingRecordsPostIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Competencies: 'competencies',
    Credentials: 'credentials',
    Credentials2: 'credentials.*',
    Document: 'document',
    Event: 'event',
    Event2: 'event.*',
    Instructor: 'instructor',
    Instructor2: 'instructor.*',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionTrainingRecordsPostIncludeEnum = typeof VersionTrainingRecordsPostIncludeEnum[keyof typeof VersionTrainingRecordsPostIncludeEnum];
/**
 * @export
 */
export const VersionTrainingRecordsTrainingRecordDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionTrainingRecordsTrainingRecordDeleteVersionEnum = typeof VersionTrainingRecordsTrainingRecordDeleteVersionEnum[keyof typeof VersionTrainingRecordsTrainingRecordDeleteVersionEnum];
/**
 * @export
 */
export const VersionTrainingRecordsTrainingRecordDeleteIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Competencies: 'competencies',
    Credentials: 'credentials',
    Credentials2: 'credentials.*',
    Document: 'document',
    Event: 'event',
    Event2: 'event.*',
    Instructor: 'instructor',
    Instructor2: 'instructor.*',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionTrainingRecordsTrainingRecordDeleteIncludeEnum = typeof VersionTrainingRecordsTrainingRecordDeleteIncludeEnum[keyof typeof VersionTrainingRecordsTrainingRecordDeleteIncludeEnum];
/**
 * @export
 */
export const VersionTrainingRecordsTrainingRecordGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionTrainingRecordsTrainingRecordGetVersionEnum = typeof VersionTrainingRecordsTrainingRecordGetVersionEnum[keyof typeof VersionTrainingRecordsTrainingRecordGetVersionEnum];
/**
 * @export
 */
export const VersionTrainingRecordsTrainingRecordGetIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Competencies: 'competencies',
    Credentials: 'credentials',
    Credentials2: 'credentials.*',
    Document: 'document',
    Event: 'event',
    Event2: 'event.*',
    Instructor: 'instructor',
    Instructor2: 'instructor.*',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionTrainingRecordsTrainingRecordGetIncludeEnum = typeof VersionTrainingRecordsTrainingRecordGetIncludeEnum[keyof typeof VersionTrainingRecordsTrainingRecordGetIncludeEnum];
/**
 * @export
 */
export const VersionTrainingRecordsTrainingRecordPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionTrainingRecordsTrainingRecordPatchVersionEnum = typeof VersionTrainingRecordsTrainingRecordPatchVersionEnum[keyof typeof VersionTrainingRecordsTrainingRecordPatchVersionEnum];
/**
 * @export
 */
export const VersionTrainingRecordsTrainingRecordPatchIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Competencies: 'competencies',
    Credentials: 'credentials',
    Credentials2: 'credentials.*',
    Document: 'document',
    Event: 'event',
    Event2: 'event.*',
    Instructor: 'instructor',
    Instructor2: 'instructor.*',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionTrainingRecordsTrainingRecordPatchIncludeEnum = typeof VersionTrainingRecordsTrainingRecordPatchIncludeEnum[keyof typeof VersionTrainingRecordsTrainingRecordPatchIncludeEnum];
