/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AssignmentRecord,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionAssignmentRecordsBatchPatchRequest,
  VersionAssignmentRecordsBatchPost200Response,
  VersionAssignmentRecordsBatchPostRequest,
  VersionAssignmentRecordsGet200Response,
  VersionAssignmentRecordsPost201Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
} from '../models/index';
import {
    AssignmentRecordFromJSON,
    AssignmentRecordToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionAssignmentRecordsBatchPatchRequestFromJSON,
    VersionAssignmentRecordsBatchPatchRequestToJSON,
    VersionAssignmentRecordsBatchPost200ResponseFromJSON,
    VersionAssignmentRecordsBatchPost200ResponseToJSON,
    VersionAssignmentRecordsBatchPostRequestFromJSON,
    VersionAssignmentRecordsBatchPostRequestToJSON,
    VersionAssignmentRecordsGet200ResponseFromJSON,
    VersionAssignmentRecordsGet200ResponseToJSON,
    VersionAssignmentRecordsPost201ResponseFromJSON,
    VersionAssignmentRecordsPost201ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
} from '../models/index';

export interface VersionAssignmentRecordsAssignmentRecordDeleteRequest {
    version: VersionAssignmentRecordsAssignmentRecordDeleteVersionEnum;
    assignmentRecord: number;
    include?: VersionAssignmentRecordsAssignmentRecordDeleteIncludeEnum;
}

export interface VersionAssignmentRecordsAssignmentRecordGetRequest {
    version: VersionAssignmentRecordsAssignmentRecordGetVersionEnum;
    assignmentRecord: number;
    include?: VersionAssignmentRecordsAssignmentRecordGetIncludeEnum;
}

export interface VersionAssignmentRecordsAssignmentRecordPatchRequest {
    version: VersionAssignmentRecordsAssignmentRecordPatchVersionEnum;
    assignmentRecord: number;
    include?: VersionAssignmentRecordsAssignmentRecordPatchIncludeEnum;
    assignmentRecord2?: AssignmentRecord;
}

export interface VersionAssignmentRecordsBatchDeleteRequest {
    version: VersionAssignmentRecordsBatchDeleteVersionEnum;
    include?: VersionAssignmentRecordsBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionAssignmentRecordsBatchPatchOperationRequest {
    version: VersionAssignmentRecordsBatchPatchOperationVersionEnum;
    include?: VersionAssignmentRecordsBatchPatchOperationIncludeEnum;
    versionAssignmentRecordsBatchPatchRequest?: VersionAssignmentRecordsBatchPatchRequest;
}

export interface VersionAssignmentRecordsBatchPostOperationRequest {
    version: VersionAssignmentRecordsBatchPostOperationVersionEnum;
    include?: VersionAssignmentRecordsBatchPostOperationIncludeEnum;
    versionAssignmentRecordsBatchPostRequest?: VersionAssignmentRecordsBatchPostRequest;
}

export interface VersionAssignmentRecordsGetRequest {
    version: VersionAssignmentRecordsGetVersionEnum;
    include?: VersionAssignmentRecordsGetIncludeEnum;
}

export interface VersionAssignmentRecordsPostRequest {
    version: VersionAssignmentRecordsPostVersionEnum;
    include?: VersionAssignmentRecordsPostIncludeEnum;
    assignmentRecord?: AssignmentRecord;
}

/**
 * 
 */
export class AssignmentRecordsApi extends runtime.BaseAPI {

    /**
     * Delete assignment record
     */
    async versionAssignmentRecordsAssignmentRecordDeleteRaw(requestParameters: VersionAssignmentRecordsAssignmentRecordDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAssignmentRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAssignmentRecordsAssignmentRecordDelete().'
            );
        }

        if (requestParameters['assignmentRecord'] == null) {
            throw new runtime.RequiredError(
                'assignmentRecord',
                'Required parameter "assignmentRecord" was null or undefined when calling versionAssignmentRecordsAssignmentRecordDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/assignment-records/{assignment_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"assignment_record"}}`, encodeURIComponent(String(requestParameters['assignmentRecord']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAssignmentRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete assignment record
     */
    async versionAssignmentRecordsAssignmentRecordDelete(requestParameters: VersionAssignmentRecordsAssignmentRecordDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAssignmentRecordsPost201Response> {
        const response = await this.versionAssignmentRecordsAssignmentRecordDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get assignment record
     */
    async versionAssignmentRecordsAssignmentRecordGetRaw(requestParameters: VersionAssignmentRecordsAssignmentRecordGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAssignmentRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAssignmentRecordsAssignmentRecordGet().'
            );
        }

        if (requestParameters['assignmentRecord'] == null) {
            throw new runtime.RequiredError(
                'assignmentRecord',
                'Required parameter "assignmentRecord" was null or undefined when calling versionAssignmentRecordsAssignmentRecordGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/assignment-records/{assignment_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"assignment_record"}}`, encodeURIComponent(String(requestParameters['assignmentRecord']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAssignmentRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get assignment record
     */
    async versionAssignmentRecordsAssignmentRecordGet(requestParameters: VersionAssignmentRecordsAssignmentRecordGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAssignmentRecordsPost201Response> {
        const response = await this.versionAssignmentRecordsAssignmentRecordGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update assignment record
     */
    async versionAssignmentRecordsAssignmentRecordPatchRaw(requestParameters: VersionAssignmentRecordsAssignmentRecordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAssignmentRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAssignmentRecordsAssignmentRecordPatch().'
            );
        }

        if (requestParameters['assignmentRecord'] == null) {
            throw new runtime.RequiredError(
                'assignmentRecord',
                'Required parameter "assignmentRecord" was null or undefined when calling versionAssignmentRecordsAssignmentRecordPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/assignment-records/{assignment_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"assignment_record"}}`, encodeURIComponent(String(requestParameters['assignmentRecord']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AssignmentRecordToJSON(requestParameters['assignmentRecord2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAssignmentRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update assignment record
     */
    async versionAssignmentRecordsAssignmentRecordPatch(requestParameters: VersionAssignmentRecordsAssignmentRecordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAssignmentRecordsPost201Response> {
        const response = await this.versionAssignmentRecordsAssignmentRecordPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a batch of assignment records
     */
    async versionAssignmentRecordsBatchDeleteRaw(requestParameters: VersionAssignmentRecordsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAssignmentRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAssignmentRecordsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/assignment-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAssignmentRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of assignment records
     */
    async versionAssignmentRecordsBatchDelete(requestParameters: VersionAssignmentRecordsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAssignmentRecordsBatchPost200Response> {
        const response = await this.versionAssignmentRecordsBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of assignment records
     */
    async versionAssignmentRecordsBatchPatchRaw(requestParameters: VersionAssignmentRecordsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAssignmentRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAssignmentRecordsBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/assignment-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAssignmentRecordsBatchPatchRequestToJSON(requestParameters['versionAssignmentRecordsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAssignmentRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of assignment records
     */
    async versionAssignmentRecordsBatchPatch(requestParameters: VersionAssignmentRecordsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAssignmentRecordsBatchPost200Response> {
        const response = await this.versionAssignmentRecordsBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of assignment records
     */
    async versionAssignmentRecordsBatchPostRaw(requestParameters: VersionAssignmentRecordsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAssignmentRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAssignmentRecordsBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/assignment-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAssignmentRecordsBatchPostRequestToJSON(requestParameters['versionAssignmentRecordsBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAssignmentRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of assignment records
     */
    async versionAssignmentRecordsBatchPost(requestParameters: VersionAssignmentRecordsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAssignmentRecordsBatchPost200Response> {
        const response = await this.versionAssignmentRecordsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of assignment records
     */
    async versionAssignmentRecordsGetRaw(requestParameters: VersionAssignmentRecordsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAssignmentRecordsGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAssignmentRecordsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/assignment-records`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAssignmentRecordsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of assignment records
     */
    async versionAssignmentRecordsGet(requestParameters: VersionAssignmentRecordsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAssignmentRecordsGet200Response> {
        const response = await this.versionAssignmentRecordsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create assignment record
     */
    async versionAssignmentRecordsPostRaw(requestParameters: VersionAssignmentRecordsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAssignmentRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAssignmentRecordsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/assignment-records`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssignmentRecordToJSON(requestParameters['assignmentRecord']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAssignmentRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create assignment record
     */
    async versionAssignmentRecordsPost(requestParameters: VersionAssignmentRecordsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAssignmentRecordsPost201Response> {
        const response = await this.versionAssignmentRecordsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionAssignmentRecordsAssignmentRecordDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAssignmentRecordsAssignmentRecordDeleteVersionEnum = typeof VersionAssignmentRecordsAssignmentRecordDeleteVersionEnum[keyof typeof VersionAssignmentRecordsAssignmentRecordDeleteVersionEnum];
/**
 * @export
 */
export const VersionAssignmentRecordsAssignmentRecordDeleteIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Position: 'position',
    Specialty: 'specialty',
    Status: 'status',
    Unit: 'unit',
    Unit2: 'unit.*',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionAssignmentRecordsAssignmentRecordDeleteIncludeEnum = typeof VersionAssignmentRecordsAssignmentRecordDeleteIncludeEnum[keyof typeof VersionAssignmentRecordsAssignmentRecordDeleteIncludeEnum];
/**
 * @export
 */
export const VersionAssignmentRecordsAssignmentRecordGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAssignmentRecordsAssignmentRecordGetVersionEnum = typeof VersionAssignmentRecordsAssignmentRecordGetVersionEnum[keyof typeof VersionAssignmentRecordsAssignmentRecordGetVersionEnum];
/**
 * @export
 */
export const VersionAssignmentRecordsAssignmentRecordGetIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Position: 'position',
    Specialty: 'specialty',
    Status: 'status',
    Unit: 'unit',
    Unit2: 'unit.*',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionAssignmentRecordsAssignmentRecordGetIncludeEnum = typeof VersionAssignmentRecordsAssignmentRecordGetIncludeEnum[keyof typeof VersionAssignmentRecordsAssignmentRecordGetIncludeEnum];
/**
 * @export
 */
export const VersionAssignmentRecordsAssignmentRecordPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAssignmentRecordsAssignmentRecordPatchVersionEnum = typeof VersionAssignmentRecordsAssignmentRecordPatchVersionEnum[keyof typeof VersionAssignmentRecordsAssignmentRecordPatchVersionEnum];
/**
 * @export
 */
export const VersionAssignmentRecordsAssignmentRecordPatchIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Position: 'position',
    Specialty: 'specialty',
    Status: 'status',
    Unit: 'unit',
    Unit2: 'unit.*',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionAssignmentRecordsAssignmentRecordPatchIncludeEnum = typeof VersionAssignmentRecordsAssignmentRecordPatchIncludeEnum[keyof typeof VersionAssignmentRecordsAssignmentRecordPatchIncludeEnum];
/**
 * @export
 */
export const VersionAssignmentRecordsBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAssignmentRecordsBatchDeleteVersionEnum = typeof VersionAssignmentRecordsBatchDeleteVersionEnum[keyof typeof VersionAssignmentRecordsBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionAssignmentRecordsBatchDeleteIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Position: 'position',
    Specialty: 'specialty',
    Status: 'status',
    Unit: 'unit',
    Unit2: 'unit.*',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionAssignmentRecordsBatchDeleteIncludeEnum = typeof VersionAssignmentRecordsBatchDeleteIncludeEnum[keyof typeof VersionAssignmentRecordsBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionAssignmentRecordsBatchPatchOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAssignmentRecordsBatchPatchOperationVersionEnum = typeof VersionAssignmentRecordsBatchPatchOperationVersionEnum[keyof typeof VersionAssignmentRecordsBatchPatchOperationVersionEnum];
/**
 * @export
 */
export const VersionAssignmentRecordsBatchPatchOperationIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Position: 'position',
    Specialty: 'specialty',
    Status: 'status',
    Unit: 'unit',
    Unit2: 'unit.*',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionAssignmentRecordsBatchPatchOperationIncludeEnum = typeof VersionAssignmentRecordsBatchPatchOperationIncludeEnum[keyof typeof VersionAssignmentRecordsBatchPatchOperationIncludeEnum];
/**
 * @export
 */
export const VersionAssignmentRecordsBatchPostOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAssignmentRecordsBatchPostOperationVersionEnum = typeof VersionAssignmentRecordsBatchPostOperationVersionEnum[keyof typeof VersionAssignmentRecordsBatchPostOperationVersionEnum];
/**
 * @export
 */
export const VersionAssignmentRecordsBatchPostOperationIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Position: 'position',
    Specialty: 'specialty',
    Status: 'status',
    Unit: 'unit',
    Unit2: 'unit.*',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionAssignmentRecordsBatchPostOperationIncludeEnum = typeof VersionAssignmentRecordsBatchPostOperationIncludeEnum[keyof typeof VersionAssignmentRecordsBatchPostOperationIncludeEnum];
/**
 * @export
 */
export const VersionAssignmentRecordsGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAssignmentRecordsGetVersionEnum = typeof VersionAssignmentRecordsGetVersionEnum[keyof typeof VersionAssignmentRecordsGetVersionEnum];
/**
 * @export
 */
export const VersionAssignmentRecordsGetIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Position: 'position',
    Specialty: 'specialty',
    Status: 'status',
    Unit: 'unit',
    Unit2: 'unit.*',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionAssignmentRecordsGetIncludeEnum = typeof VersionAssignmentRecordsGetIncludeEnum[keyof typeof VersionAssignmentRecordsGetIncludeEnum];
/**
 * @export
 */
export const VersionAssignmentRecordsPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAssignmentRecordsPostVersionEnum = typeof VersionAssignmentRecordsPostVersionEnum[keyof typeof VersionAssignmentRecordsPostVersionEnum];
/**
 * @export
 */
export const VersionAssignmentRecordsPostIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Position: 'position',
    Specialty: 'specialty',
    Status: 'status',
    Unit: 'unit',
    Unit2: 'unit.*',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionAssignmentRecordsPostIncludeEnum = typeof VersionAssignmentRecordsPostIncludeEnum[keyof typeof VersionAssignmentRecordsPostIncludeEnum];
