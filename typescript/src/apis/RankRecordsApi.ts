/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RankRecord,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
  VersionRankRecordsBatchPatchRequest,
  VersionRankRecordsBatchPost200Response,
  VersionRankRecordsBatchPostRequest,
  VersionRankRecordsGet200Response,
  VersionRankRecordsPost201Response,
} from '../models/index';
import {
    RankRecordFromJSON,
    RankRecordToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
    VersionRankRecordsBatchPatchRequestFromJSON,
    VersionRankRecordsBatchPatchRequestToJSON,
    VersionRankRecordsBatchPost200ResponseFromJSON,
    VersionRankRecordsBatchPost200ResponseToJSON,
    VersionRankRecordsBatchPostRequestFromJSON,
    VersionRankRecordsBatchPostRequestToJSON,
    VersionRankRecordsGet200ResponseFromJSON,
    VersionRankRecordsGet200ResponseToJSON,
    VersionRankRecordsPost201ResponseFromJSON,
    VersionRankRecordsPost201ResponseToJSON,
} from '../models/index';

export interface VersionRankRecordsBatchDeleteRequest {
    version: VersionRankRecordsBatchDeleteVersionEnum;
    include?: VersionRankRecordsBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionRankRecordsBatchPatchOperationRequest {
    version: VersionRankRecordsBatchPatchOperationVersionEnum;
    include?: VersionRankRecordsBatchPatchOperationIncludeEnum;
    versionRankRecordsBatchPatchRequest?: VersionRankRecordsBatchPatchRequest;
}

export interface VersionRankRecordsBatchPostOperationRequest {
    version: VersionRankRecordsBatchPostOperationVersionEnum;
    include?: VersionRankRecordsBatchPostOperationIncludeEnum;
    versionRankRecordsBatchPostRequest?: VersionRankRecordsBatchPostRequest;
}

export interface VersionRankRecordsGetRequest {
    version: VersionRankRecordsGetVersionEnum;
    include?: VersionRankRecordsGetIncludeEnum;
}

export interface VersionRankRecordsPostRequest {
    version: VersionRankRecordsPostVersionEnum;
    include?: VersionRankRecordsPostIncludeEnum;
    rankRecord?: RankRecord;
}

export interface VersionRankRecordsRankRecordDeleteRequest {
    version: VersionRankRecordsRankRecordDeleteVersionEnum;
    rankRecord: number;
    include?: VersionRankRecordsRankRecordDeleteIncludeEnum;
}

export interface VersionRankRecordsRankRecordGetRequest {
    version: VersionRankRecordsRankRecordGetVersionEnum;
    rankRecord: number;
    include?: VersionRankRecordsRankRecordGetIncludeEnum;
}

export interface VersionRankRecordsRankRecordPatchRequest {
    version: VersionRankRecordsRankRecordPatchVersionEnum;
    rankRecord: number;
    include?: VersionRankRecordsRankRecordPatchIncludeEnum;
    rankRecord2?: RankRecord;
}

/**
 * 
 */
export class RankRecordsApi extends runtime.BaseAPI {

    /**
     * Delete a batch of rank records
     */
    async versionRankRecordsBatchDeleteRaw(requestParameters: VersionRankRecordsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionRankRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionRankRecordsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/rank-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionRankRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of rank records
     */
    async versionRankRecordsBatchDelete(requestParameters: VersionRankRecordsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionRankRecordsBatchPost200Response> {
        const response = await this.versionRankRecordsBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of rank records
     */
    async versionRankRecordsBatchPatchRaw(requestParameters: VersionRankRecordsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionRankRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionRankRecordsBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/rank-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionRankRecordsBatchPatchRequestToJSON(requestParameters['versionRankRecordsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionRankRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of rank records
     */
    async versionRankRecordsBatchPatch(requestParameters: VersionRankRecordsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionRankRecordsBatchPost200Response> {
        const response = await this.versionRankRecordsBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of rank records
     */
    async versionRankRecordsBatchPostRaw(requestParameters: VersionRankRecordsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionRankRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionRankRecordsBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/rank-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionRankRecordsBatchPostRequestToJSON(requestParameters['versionRankRecordsBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionRankRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of rank records
     */
    async versionRankRecordsBatchPost(requestParameters: VersionRankRecordsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionRankRecordsBatchPost200Response> {
        const response = await this.versionRankRecordsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of rank records
     */
    async versionRankRecordsGetRaw(requestParameters: VersionRankRecordsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionRankRecordsGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionRankRecordsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/rank-records`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionRankRecordsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of rank records
     */
    async versionRankRecordsGet(requestParameters: VersionRankRecordsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionRankRecordsGet200Response> {
        const response = await this.versionRankRecordsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create rank record
     */
    async versionRankRecordsPostRaw(requestParameters: VersionRankRecordsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionRankRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionRankRecordsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/rank-records`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RankRecordToJSON(requestParameters['rankRecord']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionRankRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create rank record
     */
    async versionRankRecordsPost(requestParameters: VersionRankRecordsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionRankRecordsPost201Response> {
        const response = await this.versionRankRecordsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete rank record
     */
    async versionRankRecordsRankRecordDeleteRaw(requestParameters: VersionRankRecordsRankRecordDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionRankRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionRankRecordsRankRecordDelete().'
            );
        }

        if (requestParameters['rankRecord'] == null) {
            throw new runtime.RequiredError(
                'rankRecord',
                'Required parameter "rankRecord" was null or undefined when calling versionRankRecordsRankRecordDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/rank-records/{rank_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"rank_record"}}`, encodeURIComponent(String(requestParameters['rankRecord']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionRankRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete rank record
     */
    async versionRankRecordsRankRecordDelete(requestParameters: VersionRankRecordsRankRecordDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionRankRecordsPost201Response> {
        const response = await this.versionRankRecordsRankRecordDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get rank record
     */
    async versionRankRecordsRankRecordGetRaw(requestParameters: VersionRankRecordsRankRecordGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionRankRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionRankRecordsRankRecordGet().'
            );
        }

        if (requestParameters['rankRecord'] == null) {
            throw new runtime.RequiredError(
                'rankRecord',
                'Required parameter "rankRecord" was null or undefined when calling versionRankRecordsRankRecordGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/rank-records/{rank_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"rank_record"}}`, encodeURIComponent(String(requestParameters['rankRecord']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionRankRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get rank record
     */
    async versionRankRecordsRankRecordGet(requestParameters: VersionRankRecordsRankRecordGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionRankRecordsPost201Response> {
        const response = await this.versionRankRecordsRankRecordGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update rank record
     */
    async versionRankRecordsRankRecordPatchRaw(requestParameters: VersionRankRecordsRankRecordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionRankRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionRankRecordsRankRecordPatch().'
            );
        }

        if (requestParameters['rankRecord'] == null) {
            throw new runtime.RequiredError(
                'rankRecord',
                'Required parameter "rankRecord" was null or undefined when calling versionRankRecordsRankRecordPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/rank-records/{rank_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"rank_record"}}`, encodeURIComponent(String(requestParameters['rankRecord']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RankRecordToJSON(requestParameters['rankRecord2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionRankRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update rank record
     */
    async versionRankRecordsRankRecordPatch(requestParameters: VersionRankRecordsRankRecordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionRankRecordsPost201Response> {
        const response = await this.versionRankRecordsRankRecordPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionRankRecordsBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionRankRecordsBatchDeleteVersionEnum = typeof VersionRankRecordsBatchDeleteVersionEnum[keyof typeof VersionRankRecordsBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionRankRecordsBatchDeleteIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Rank: 'rank',
    RankImage: 'rank.image',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionRankRecordsBatchDeleteIncludeEnum = typeof VersionRankRecordsBatchDeleteIncludeEnum[keyof typeof VersionRankRecordsBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionRankRecordsBatchPatchOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionRankRecordsBatchPatchOperationVersionEnum = typeof VersionRankRecordsBatchPatchOperationVersionEnum[keyof typeof VersionRankRecordsBatchPatchOperationVersionEnum];
/**
 * @export
 */
export const VersionRankRecordsBatchPatchOperationIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Rank: 'rank',
    RankImage: 'rank.image',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionRankRecordsBatchPatchOperationIncludeEnum = typeof VersionRankRecordsBatchPatchOperationIncludeEnum[keyof typeof VersionRankRecordsBatchPatchOperationIncludeEnum];
/**
 * @export
 */
export const VersionRankRecordsBatchPostOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionRankRecordsBatchPostOperationVersionEnum = typeof VersionRankRecordsBatchPostOperationVersionEnum[keyof typeof VersionRankRecordsBatchPostOperationVersionEnum];
/**
 * @export
 */
export const VersionRankRecordsBatchPostOperationIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Rank: 'rank',
    RankImage: 'rank.image',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionRankRecordsBatchPostOperationIncludeEnum = typeof VersionRankRecordsBatchPostOperationIncludeEnum[keyof typeof VersionRankRecordsBatchPostOperationIncludeEnum];
/**
 * @export
 */
export const VersionRankRecordsGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionRankRecordsGetVersionEnum = typeof VersionRankRecordsGetVersionEnum[keyof typeof VersionRankRecordsGetVersionEnum];
/**
 * @export
 */
export const VersionRankRecordsGetIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Rank: 'rank',
    RankImage: 'rank.image',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionRankRecordsGetIncludeEnum = typeof VersionRankRecordsGetIncludeEnum[keyof typeof VersionRankRecordsGetIncludeEnum];
/**
 * @export
 */
export const VersionRankRecordsPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionRankRecordsPostVersionEnum = typeof VersionRankRecordsPostVersionEnum[keyof typeof VersionRankRecordsPostVersionEnum];
/**
 * @export
 */
export const VersionRankRecordsPostIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Rank: 'rank',
    RankImage: 'rank.image',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionRankRecordsPostIncludeEnum = typeof VersionRankRecordsPostIncludeEnum[keyof typeof VersionRankRecordsPostIncludeEnum];
/**
 * @export
 */
export const VersionRankRecordsRankRecordDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionRankRecordsRankRecordDeleteVersionEnum = typeof VersionRankRecordsRankRecordDeleteVersionEnum[keyof typeof VersionRankRecordsRankRecordDeleteVersionEnum];
/**
 * @export
 */
export const VersionRankRecordsRankRecordDeleteIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Rank: 'rank',
    RankImage: 'rank.image',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionRankRecordsRankRecordDeleteIncludeEnum = typeof VersionRankRecordsRankRecordDeleteIncludeEnum[keyof typeof VersionRankRecordsRankRecordDeleteIncludeEnum];
/**
 * @export
 */
export const VersionRankRecordsRankRecordGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionRankRecordsRankRecordGetVersionEnum = typeof VersionRankRecordsRankRecordGetVersionEnum[keyof typeof VersionRankRecordsRankRecordGetVersionEnum];
/**
 * @export
 */
export const VersionRankRecordsRankRecordGetIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Rank: 'rank',
    RankImage: 'rank.image',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionRankRecordsRankRecordGetIncludeEnum = typeof VersionRankRecordsRankRecordGetIncludeEnum[keyof typeof VersionRankRecordsRankRecordGetIncludeEnum];
/**
 * @export
 */
export const VersionRankRecordsRankRecordPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionRankRecordsRankRecordPatchVersionEnum = typeof VersionRankRecordsRankRecordPatchVersionEnum[keyof typeof VersionRankRecordsRankRecordPatchVersionEnum];
/**
 * @export
 */
export const VersionRankRecordsRankRecordPatchIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Rank: 'rank',
    RankImage: 'rank.image',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionRankRecordsRankRecordPatchIncludeEnum = typeof VersionRankRecordsRankRecordPatchIncludeEnum[keyof typeof VersionRankRecordsRankRecordPatchIncludeEnum];
