/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Award,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionAwardsBatchPatchRequest,
  VersionAwardsBatchPost200Response,
  VersionAwardsBatchPostRequest,
  VersionAwardsGet200Response,
  VersionAwardsPost201Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
} from '../models/index';
import {
    AwardFromJSON,
    AwardToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionAwardsBatchPatchRequestFromJSON,
    VersionAwardsBatchPatchRequestToJSON,
    VersionAwardsBatchPost200ResponseFromJSON,
    VersionAwardsBatchPost200ResponseToJSON,
    VersionAwardsBatchPostRequestFromJSON,
    VersionAwardsBatchPostRequestToJSON,
    VersionAwardsGet200ResponseFromJSON,
    VersionAwardsGet200ResponseToJSON,
    VersionAwardsPost201ResponseFromJSON,
    VersionAwardsPost201ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
} from '../models/index';

export interface VersionAwardsAwardDeleteRequest {
    version: VersionAwardsAwardDeleteVersionEnum;
    award: number;
    include?: VersionAwardsAwardDeleteIncludeEnum;
}

export interface VersionAwardsAwardGetRequest {
    version: VersionAwardsAwardGetVersionEnum;
    award: number;
    include?: VersionAwardsAwardGetIncludeEnum;
}

export interface VersionAwardsAwardPatchRequest {
    version: VersionAwardsAwardPatchVersionEnum;
    award: number;
    include?: VersionAwardsAwardPatchIncludeEnum;
    award2?: Award;
}

export interface VersionAwardsBatchDeleteRequest {
    version: VersionAwardsBatchDeleteVersionEnum;
    include?: VersionAwardsBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionAwardsBatchPatchOperationRequest {
    version: VersionAwardsBatchPatchOperationVersionEnum;
    include?: VersionAwardsBatchPatchOperationIncludeEnum;
    versionAwardsBatchPatchRequest?: VersionAwardsBatchPatchRequest;
}

export interface VersionAwardsBatchPostOperationRequest {
    version: VersionAwardsBatchPostOperationVersionEnum;
    include?: VersionAwardsBatchPostOperationIncludeEnum;
    versionAwardsBatchPostRequest?: VersionAwardsBatchPostRequest;
}

export interface VersionAwardsGetRequest {
    version: VersionAwardsGetVersionEnum;
    include?: VersionAwardsGetIncludeEnum;
}

export interface VersionAwardsPostRequest {
    version: VersionAwardsPostVersionEnum;
    include?: VersionAwardsPostIncludeEnum;
    award?: Award;
}

/**
 * 
 */
export class AwardsApi extends runtime.BaseAPI {

    /**
     * Delete award
     */
    async versionAwardsAwardDeleteRaw(requestParameters: VersionAwardsAwardDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAwardsAwardDelete().'
            );
        }

        if (requestParameters['award'] == null) {
            throw new runtime.RequiredError(
                'award',
                'Required parameter "award" was null or undefined when calling versionAwardsAwardDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/awards/{award}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"award"}}`, encodeURIComponent(String(requestParameters['award']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete award
     */
    async versionAwardsAwardDelete(requestParameters: VersionAwardsAwardDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardsPost201Response> {
        const response = await this.versionAwardsAwardDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get award
     */
    async versionAwardsAwardGetRaw(requestParameters: VersionAwardsAwardGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAwardsAwardGet().'
            );
        }

        if (requestParameters['award'] == null) {
            throw new runtime.RequiredError(
                'award',
                'Required parameter "award" was null or undefined when calling versionAwardsAwardGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/awards/{award}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"award"}}`, encodeURIComponent(String(requestParameters['award']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get award
     */
    async versionAwardsAwardGet(requestParameters: VersionAwardsAwardGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardsPost201Response> {
        const response = await this.versionAwardsAwardGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update award
     */
    async versionAwardsAwardPatchRaw(requestParameters: VersionAwardsAwardPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAwardsAwardPatch().'
            );
        }

        if (requestParameters['award'] == null) {
            throw new runtime.RequiredError(
                'award',
                'Required parameter "award" was null or undefined when calling versionAwardsAwardPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/awards/{award}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"award"}}`, encodeURIComponent(String(requestParameters['award']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AwardToJSON(requestParameters['award2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update award
     */
    async versionAwardsAwardPatch(requestParameters: VersionAwardsAwardPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardsPost201Response> {
        const response = await this.versionAwardsAwardPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a batch of awards
     */
    async versionAwardsBatchDeleteRaw(requestParameters: VersionAwardsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAwardsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/awards/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of awards
     */
    async versionAwardsBatchDelete(requestParameters: VersionAwardsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardsBatchPost200Response> {
        const response = await this.versionAwardsBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of awards
     */
    async versionAwardsBatchPatchRaw(requestParameters: VersionAwardsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAwardsBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/awards/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAwardsBatchPatchRequestToJSON(requestParameters['versionAwardsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of awards
     */
    async versionAwardsBatchPatch(requestParameters: VersionAwardsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardsBatchPost200Response> {
        const response = await this.versionAwardsBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of awards
     */
    async versionAwardsBatchPostRaw(requestParameters: VersionAwardsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAwardsBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/awards/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAwardsBatchPostRequestToJSON(requestParameters['versionAwardsBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of awards
     */
    async versionAwardsBatchPost(requestParameters: VersionAwardsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardsBatchPost200Response> {
        const response = await this.versionAwardsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of awards
     */
    async versionAwardsGetRaw(requestParameters: VersionAwardsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardsGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAwardsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/awards`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of awards
     */
    async versionAwardsGet(requestParameters: VersionAwardsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardsGet200Response> {
        const response = await this.versionAwardsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create award
     */
    async versionAwardsPostRaw(requestParameters: VersionAwardsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAwardsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/awards`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwardToJSON(requestParameters['award']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create award
     */
    async versionAwardsPost(requestParameters: VersionAwardsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardsPost201Response> {
        const response = await this.versionAwardsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionAwardsAwardDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAwardsAwardDeleteVersionEnum = typeof VersionAwardsAwardDeleteVersionEnum[keyof typeof VersionAwardsAwardDeleteVersionEnum];
/**
 * @export
 */
export const VersionAwardsAwardDeleteIncludeEnum = {
    Image: 'image'
} as const;
export type VersionAwardsAwardDeleteIncludeEnum = typeof VersionAwardsAwardDeleteIncludeEnum[keyof typeof VersionAwardsAwardDeleteIncludeEnum];
/**
 * @export
 */
export const VersionAwardsAwardGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAwardsAwardGetVersionEnum = typeof VersionAwardsAwardGetVersionEnum[keyof typeof VersionAwardsAwardGetVersionEnum];
/**
 * @export
 */
export const VersionAwardsAwardGetIncludeEnum = {
    Image: 'image'
} as const;
export type VersionAwardsAwardGetIncludeEnum = typeof VersionAwardsAwardGetIncludeEnum[keyof typeof VersionAwardsAwardGetIncludeEnum];
/**
 * @export
 */
export const VersionAwardsAwardPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAwardsAwardPatchVersionEnum = typeof VersionAwardsAwardPatchVersionEnum[keyof typeof VersionAwardsAwardPatchVersionEnum];
/**
 * @export
 */
export const VersionAwardsAwardPatchIncludeEnum = {
    Image: 'image'
} as const;
export type VersionAwardsAwardPatchIncludeEnum = typeof VersionAwardsAwardPatchIncludeEnum[keyof typeof VersionAwardsAwardPatchIncludeEnum];
/**
 * @export
 */
export const VersionAwardsBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAwardsBatchDeleteVersionEnum = typeof VersionAwardsBatchDeleteVersionEnum[keyof typeof VersionAwardsBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionAwardsBatchDeleteIncludeEnum = {
    Image: 'image'
} as const;
export type VersionAwardsBatchDeleteIncludeEnum = typeof VersionAwardsBatchDeleteIncludeEnum[keyof typeof VersionAwardsBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionAwardsBatchPatchOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAwardsBatchPatchOperationVersionEnum = typeof VersionAwardsBatchPatchOperationVersionEnum[keyof typeof VersionAwardsBatchPatchOperationVersionEnum];
/**
 * @export
 */
export const VersionAwardsBatchPatchOperationIncludeEnum = {
    Image: 'image'
} as const;
export type VersionAwardsBatchPatchOperationIncludeEnum = typeof VersionAwardsBatchPatchOperationIncludeEnum[keyof typeof VersionAwardsBatchPatchOperationIncludeEnum];
/**
 * @export
 */
export const VersionAwardsBatchPostOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAwardsBatchPostOperationVersionEnum = typeof VersionAwardsBatchPostOperationVersionEnum[keyof typeof VersionAwardsBatchPostOperationVersionEnum];
/**
 * @export
 */
export const VersionAwardsBatchPostOperationIncludeEnum = {
    Image: 'image'
} as const;
export type VersionAwardsBatchPostOperationIncludeEnum = typeof VersionAwardsBatchPostOperationIncludeEnum[keyof typeof VersionAwardsBatchPostOperationIncludeEnum];
/**
 * @export
 */
export const VersionAwardsGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAwardsGetVersionEnum = typeof VersionAwardsGetVersionEnum[keyof typeof VersionAwardsGetVersionEnum];
/**
 * @export
 */
export const VersionAwardsGetIncludeEnum = {
    Image: 'image'
} as const;
export type VersionAwardsGetIncludeEnum = typeof VersionAwardsGetIncludeEnum[keyof typeof VersionAwardsGetIncludeEnum];
/**
 * @export
 */
export const VersionAwardsPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAwardsPostVersionEnum = typeof VersionAwardsPostVersionEnum[keyof typeof VersionAwardsPostVersionEnum];
/**
 * @export
 */
export const VersionAwardsPostIncludeEnum = {
    Image: 'image'
} as const;
export type VersionAwardsPostIncludeEnum = typeof VersionAwardsPostIncludeEnum[keyof typeof VersionAwardsPostIncludeEnum];
