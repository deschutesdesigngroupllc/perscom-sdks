/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Form,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionCategoriesCategoryAwardsAttachPost200Response,
  VersionCategoriesCategoryAwardsAttachPostRequest,
  VersionCategoriesCategoryAwardsAwardPivotPatch200Response,
  VersionCategoriesCategoryAwardsAwardPivotPatchRequest,
  VersionCategoriesCategoryAwardsDetachDelete200Response,
  VersionCategoriesCategoryAwardsSyncPatch200Response,
  VersionCategoriesCategoryAwardsTogglePatch200Response,
  VersionCategoriesCategoryFormsBatchPatchRequest,
  VersionCategoriesCategoryFormsBatchPost200Response,
  VersionCategoriesCategoryFormsBatchPostRequest,
  VersionCategoriesCategoryFormsGet200Response,
  VersionCategoriesCategoryFormsPost201Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
} from '../models/index';
import {
    FormFromJSON,
    FormToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionCategoriesCategoryAwardsAttachPost200ResponseFromJSON,
    VersionCategoriesCategoryAwardsAttachPost200ResponseToJSON,
    VersionCategoriesCategoryAwardsAttachPostRequestFromJSON,
    VersionCategoriesCategoryAwardsAttachPostRequestToJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatch200ResponseFromJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatch200ResponseToJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatchRequestFromJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatchRequestToJSON,
    VersionCategoriesCategoryAwardsDetachDelete200ResponseFromJSON,
    VersionCategoriesCategoryAwardsDetachDelete200ResponseToJSON,
    VersionCategoriesCategoryAwardsSyncPatch200ResponseFromJSON,
    VersionCategoriesCategoryAwardsSyncPatch200ResponseToJSON,
    VersionCategoriesCategoryAwardsTogglePatch200ResponseFromJSON,
    VersionCategoriesCategoryAwardsTogglePatch200ResponseToJSON,
    VersionCategoriesCategoryFormsBatchPatchRequestFromJSON,
    VersionCategoriesCategoryFormsBatchPatchRequestToJSON,
    VersionCategoriesCategoryFormsBatchPost200ResponseFromJSON,
    VersionCategoriesCategoryFormsBatchPost200ResponseToJSON,
    VersionCategoriesCategoryFormsBatchPostRequestFromJSON,
    VersionCategoriesCategoryFormsBatchPostRequestToJSON,
    VersionCategoriesCategoryFormsGet200ResponseFromJSON,
    VersionCategoriesCategoryFormsGet200ResponseToJSON,
    VersionCategoriesCategoryFormsPost201ResponseFromJSON,
    VersionCategoriesCategoryFormsPost201ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
} from '../models/index';

export interface VersionCategoriesCategoryFormsAttachPostRequest {
    version: VersionCategoriesCategoryFormsAttachPostVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryFormsAttachPostIncludeEnum;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

export interface VersionCategoriesCategoryFormsBatchDeleteRequest {
    version: VersionCategoriesCategoryFormsBatchDeleteVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryFormsBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionCategoriesCategoryFormsBatchPatchOperationRequest {
    version: VersionCategoriesCategoryFormsBatchPatchOperationVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryFormsBatchPatchOperationIncludeEnum;
    versionCategoriesCategoryFormsBatchPatchRequest?: VersionCategoriesCategoryFormsBatchPatchRequest;
}

export interface VersionCategoriesCategoryFormsBatchPostOperationRequest {
    version: VersionCategoriesCategoryFormsBatchPostOperationVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryFormsBatchPostOperationIncludeEnum;
    versionCategoriesCategoryFormsBatchPostRequest?: VersionCategoriesCategoryFormsBatchPostRequest;
}

export interface VersionCategoriesCategoryFormsDetachDeleteRequest {
    version: VersionCategoriesCategoryFormsDetachDeleteVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryFormsDetachDeleteIncludeEnum;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

export interface VersionCategoriesCategoryFormsFormDeleteRequest {
    version: VersionCategoriesCategoryFormsFormDeleteVersionEnum;
    category: number;
    form: number;
    include?: VersionCategoriesCategoryFormsFormDeleteIncludeEnum;
}

export interface VersionCategoriesCategoryFormsFormGetRequest {
    version: VersionCategoriesCategoryFormsFormGetVersionEnum;
    category: number;
    form: number;
    include?: VersionCategoriesCategoryFormsFormGetIncludeEnum;
}

export interface VersionCategoriesCategoryFormsFormPatchRequest {
    version: VersionCategoriesCategoryFormsFormPatchVersionEnum;
    category: number;
    form: number;
    include?: VersionCategoriesCategoryFormsFormPatchIncludeEnum;
    form2?: Form;
}

export interface VersionCategoriesCategoryFormsFormPivotPatchRequest {
    version: VersionCategoriesCategoryFormsFormPivotPatchVersionEnum;
    category: number;
    form: number;
    include?: VersionCategoriesCategoryFormsFormPivotPatchIncludeEnum;
    versionCategoriesCategoryAwardsAwardPivotPatchRequest?: VersionCategoriesCategoryAwardsAwardPivotPatchRequest;
}

export interface VersionCategoriesCategoryFormsGetRequest {
    version: VersionCategoriesCategoryFormsGetVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryFormsGetIncludeEnum;
}

export interface VersionCategoriesCategoryFormsPostRequest {
    version: VersionCategoriesCategoryFormsPostVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryFormsPostIncludeEnum;
    form?: Form;
}

export interface VersionCategoriesCategoryFormsSyncPatchRequest {
    version: VersionCategoriesCategoryFormsSyncPatchVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryFormsSyncPatchIncludeEnum;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

export interface VersionCategoriesCategoryFormsTogglePatchRequest {
    version: VersionCategoriesCategoryFormsTogglePatchVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryFormsTogglePatchIncludeEnum;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

/**
 * 
 */
export class CategoriesFormsApi extends runtime.BaseAPI {

    /**
     * Attach forms
     */
    async versionCategoriesCategoryFormsAttachPostRaw(requestParameters: VersionCategoriesCategoryFormsAttachPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsAttachPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryFormsAttachPost().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryFormsAttachPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/forms/attach`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsAttachPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Attach forms
     */
    async versionCategoriesCategoryFormsAttachPost(requestParameters: VersionCategoriesCategoryFormsAttachPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsAttachPost200Response> {
        const response = await this.versionCategoriesCategoryFormsAttachPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a batch of forms
     */
    async versionCategoriesCategoryFormsBatchDeleteRaw(requestParameters: VersionCategoriesCategoryFormsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryFormsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryFormsBatchDelete().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryFormsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/forms/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryFormsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of forms
     */
    async versionCategoriesCategoryFormsBatchDelete(requestParameters: VersionCategoriesCategoryFormsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryFormsBatchPost200Response> {
        const response = await this.versionCategoriesCategoryFormsBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of forms
     */
    async versionCategoriesCategoryFormsBatchPatchRaw(requestParameters: VersionCategoriesCategoryFormsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryFormsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryFormsBatchPatch().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryFormsBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/forms/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryFormsBatchPatchRequestToJSON(requestParameters['versionCategoriesCategoryFormsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryFormsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of forms
     */
    async versionCategoriesCategoryFormsBatchPatch(requestParameters: VersionCategoriesCategoryFormsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryFormsBatchPost200Response> {
        const response = await this.versionCategoriesCategoryFormsBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of forms
     */
    async versionCategoriesCategoryFormsBatchPostRaw(requestParameters: VersionCategoriesCategoryFormsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryFormsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryFormsBatchPost().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryFormsBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/forms/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryFormsBatchPostRequestToJSON(requestParameters['versionCategoriesCategoryFormsBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryFormsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of forms
     */
    async versionCategoriesCategoryFormsBatchPost(requestParameters: VersionCategoriesCategoryFormsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryFormsBatchPost200Response> {
        const response = await this.versionCategoriesCategoryFormsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Detach forms
     */
    async versionCategoriesCategoryFormsDetachDeleteRaw(requestParameters: VersionCategoriesCategoryFormsDetachDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsDetachDelete200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryFormsDetachDelete().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryFormsDetachDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/forms/detach`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsDetachDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Detach forms
     */
    async versionCategoriesCategoryFormsDetachDelete(requestParameters: VersionCategoriesCategoryFormsDetachDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsDetachDelete200Response> {
        const response = await this.versionCategoriesCategoryFormsDetachDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete form
     */
    async versionCategoriesCategoryFormsFormDeleteRaw(requestParameters: VersionCategoriesCategoryFormsFormDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryFormsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryFormsFormDelete().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryFormsFormDelete().'
            );
        }

        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling versionCategoriesCategoryFormsFormDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/forms/{form}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters['form']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryFormsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete form
     */
    async versionCategoriesCategoryFormsFormDelete(requestParameters: VersionCategoriesCategoryFormsFormDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryFormsPost201Response> {
        const response = await this.versionCategoriesCategoryFormsFormDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get form
     */
    async versionCategoriesCategoryFormsFormGetRaw(requestParameters: VersionCategoriesCategoryFormsFormGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryFormsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryFormsFormGet().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryFormsFormGet().'
            );
        }

        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling versionCategoriesCategoryFormsFormGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/forms/{form}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters['form']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryFormsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get form
     */
    async versionCategoriesCategoryFormsFormGet(requestParameters: VersionCategoriesCategoryFormsFormGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryFormsPost201Response> {
        const response = await this.versionCategoriesCategoryFormsFormGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update form
     */
    async versionCategoriesCategoryFormsFormPatchRaw(requestParameters: VersionCategoriesCategoryFormsFormPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryFormsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryFormsFormPatch().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryFormsFormPatch().'
            );
        }

        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling versionCategoriesCategoryFormsFormPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/forms/{form}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters['form']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: FormToJSON(requestParameters['form2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryFormsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update form
     */
    async versionCategoriesCategoryFormsFormPatch(requestParameters: VersionCategoriesCategoryFormsFormPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryFormsPost201Response> {
        const response = await this.versionCategoriesCategoryFormsFormPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update pivot
     */
    async versionCategoriesCategoryFormsFormPivotPatchRaw(requestParameters: VersionCategoriesCategoryFormsFormPivotPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsAwardPivotPatch200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryFormsFormPivotPatch().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryFormsFormPivotPatch().'
            );
        }

        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling versionCategoriesCategoryFormsFormPivotPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/forms/{form}/pivot`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters['form']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAwardPivotPatchRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAwardPivotPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsAwardPivotPatch200ResponseFromJSON(jsonValue));
    }

    /**
     * Update pivot
     */
    async versionCategoriesCategoryFormsFormPivotPatch(requestParameters: VersionCategoriesCategoryFormsFormPivotPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsAwardPivotPatch200Response> {
        const response = await this.versionCategoriesCategoryFormsFormPivotPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of forms
     */
    async versionCategoriesCategoryFormsGetRaw(requestParameters: VersionCategoriesCategoryFormsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryFormsGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryFormsGet().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryFormsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/forms`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryFormsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of forms
     */
    async versionCategoriesCategoryFormsGet(requestParameters: VersionCategoriesCategoryFormsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryFormsGet200Response> {
        const response = await this.versionCategoriesCategoryFormsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create form
     */
    async versionCategoriesCategoryFormsPostRaw(requestParameters: VersionCategoriesCategoryFormsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryFormsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryFormsPost().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryFormsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/forms`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FormToJSON(requestParameters['form']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryFormsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create form
     */
    async versionCategoriesCategoryFormsPost(requestParameters: VersionCategoriesCategoryFormsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryFormsPost201Response> {
        const response = await this.versionCategoriesCategoryFormsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sync forms
     */
    async versionCategoriesCategoryFormsSyncPatchRaw(requestParameters: VersionCategoriesCategoryFormsSyncPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsSyncPatch200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryFormsSyncPatch().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryFormsSyncPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/forms/sync`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsSyncPatch200ResponseFromJSON(jsonValue));
    }

    /**
     * Sync forms
     */
    async versionCategoriesCategoryFormsSyncPatch(requestParameters: VersionCategoriesCategoryFormsSyncPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsSyncPatch200Response> {
        const response = await this.versionCategoriesCategoryFormsSyncPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Toggle forms
     */
    async versionCategoriesCategoryFormsTogglePatchRaw(requestParameters: VersionCategoriesCategoryFormsTogglePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsTogglePatch200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryFormsTogglePatch().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryFormsTogglePatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/forms/toggle`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsTogglePatch200ResponseFromJSON(jsonValue));
    }

    /**
     * Toggle forms
     */
    async versionCategoriesCategoryFormsTogglePatch(requestParameters: VersionCategoriesCategoryFormsTogglePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsTogglePatch200Response> {
        const response = await this.versionCategoriesCategoryFormsTogglePatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionCategoriesCategoryFormsAttachPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryFormsAttachPostVersionEnum = typeof VersionCategoriesCategoryFormsAttachPostVersionEnum[keyof typeof VersionCategoriesCategoryFormsAttachPostVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryFormsAttachPostIncludeEnum = {
    Fields: 'fields',
    Submissions: 'submissions',
    Submissions2: 'submissions.*',
    Tags: 'tags'
} as const;
export type VersionCategoriesCategoryFormsAttachPostIncludeEnum = typeof VersionCategoriesCategoryFormsAttachPostIncludeEnum[keyof typeof VersionCategoriesCategoryFormsAttachPostIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryFormsBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryFormsBatchDeleteVersionEnum = typeof VersionCategoriesCategoryFormsBatchDeleteVersionEnum[keyof typeof VersionCategoriesCategoryFormsBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryFormsBatchDeleteIncludeEnum = {
    Fields: 'fields',
    Submissions: 'submissions',
    Submissions2: 'submissions.*',
    Tags: 'tags'
} as const;
export type VersionCategoriesCategoryFormsBatchDeleteIncludeEnum = typeof VersionCategoriesCategoryFormsBatchDeleteIncludeEnum[keyof typeof VersionCategoriesCategoryFormsBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryFormsBatchPatchOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryFormsBatchPatchOperationVersionEnum = typeof VersionCategoriesCategoryFormsBatchPatchOperationVersionEnum[keyof typeof VersionCategoriesCategoryFormsBatchPatchOperationVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryFormsBatchPatchOperationIncludeEnum = {
    Fields: 'fields',
    Submissions: 'submissions',
    Submissions2: 'submissions.*',
    Tags: 'tags'
} as const;
export type VersionCategoriesCategoryFormsBatchPatchOperationIncludeEnum = typeof VersionCategoriesCategoryFormsBatchPatchOperationIncludeEnum[keyof typeof VersionCategoriesCategoryFormsBatchPatchOperationIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryFormsBatchPostOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryFormsBatchPostOperationVersionEnum = typeof VersionCategoriesCategoryFormsBatchPostOperationVersionEnum[keyof typeof VersionCategoriesCategoryFormsBatchPostOperationVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryFormsBatchPostOperationIncludeEnum = {
    Fields: 'fields',
    Submissions: 'submissions',
    Submissions2: 'submissions.*',
    Tags: 'tags'
} as const;
export type VersionCategoriesCategoryFormsBatchPostOperationIncludeEnum = typeof VersionCategoriesCategoryFormsBatchPostOperationIncludeEnum[keyof typeof VersionCategoriesCategoryFormsBatchPostOperationIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryFormsDetachDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryFormsDetachDeleteVersionEnum = typeof VersionCategoriesCategoryFormsDetachDeleteVersionEnum[keyof typeof VersionCategoriesCategoryFormsDetachDeleteVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryFormsDetachDeleteIncludeEnum = {
    Fields: 'fields',
    Submissions: 'submissions',
    Submissions2: 'submissions.*',
    Tags: 'tags'
} as const;
export type VersionCategoriesCategoryFormsDetachDeleteIncludeEnum = typeof VersionCategoriesCategoryFormsDetachDeleteIncludeEnum[keyof typeof VersionCategoriesCategoryFormsDetachDeleteIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryFormsFormDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryFormsFormDeleteVersionEnum = typeof VersionCategoriesCategoryFormsFormDeleteVersionEnum[keyof typeof VersionCategoriesCategoryFormsFormDeleteVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryFormsFormDeleteIncludeEnum = {
    Fields: 'fields',
    Submissions: 'submissions',
    Submissions2: 'submissions.*',
    Tags: 'tags'
} as const;
export type VersionCategoriesCategoryFormsFormDeleteIncludeEnum = typeof VersionCategoriesCategoryFormsFormDeleteIncludeEnum[keyof typeof VersionCategoriesCategoryFormsFormDeleteIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryFormsFormGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryFormsFormGetVersionEnum = typeof VersionCategoriesCategoryFormsFormGetVersionEnum[keyof typeof VersionCategoriesCategoryFormsFormGetVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryFormsFormGetIncludeEnum = {
    Fields: 'fields',
    Submissions: 'submissions',
    Submissions2: 'submissions.*',
    Tags: 'tags'
} as const;
export type VersionCategoriesCategoryFormsFormGetIncludeEnum = typeof VersionCategoriesCategoryFormsFormGetIncludeEnum[keyof typeof VersionCategoriesCategoryFormsFormGetIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryFormsFormPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryFormsFormPatchVersionEnum = typeof VersionCategoriesCategoryFormsFormPatchVersionEnum[keyof typeof VersionCategoriesCategoryFormsFormPatchVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryFormsFormPatchIncludeEnum = {
    Fields: 'fields',
    Submissions: 'submissions',
    Submissions2: 'submissions.*',
    Tags: 'tags'
} as const;
export type VersionCategoriesCategoryFormsFormPatchIncludeEnum = typeof VersionCategoriesCategoryFormsFormPatchIncludeEnum[keyof typeof VersionCategoriesCategoryFormsFormPatchIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryFormsFormPivotPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryFormsFormPivotPatchVersionEnum = typeof VersionCategoriesCategoryFormsFormPivotPatchVersionEnum[keyof typeof VersionCategoriesCategoryFormsFormPivotPatchVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryFormsFormPivotPatchIncludeEnum = {
    Fields: 'fields',
    Submissions: 'submissions',
    Submissions2: 'submissions.*',
    Tags: 'tags'
} as const;
export type VersionCategoriesCategoryFormsFormPivotPatchIncludeEnum = typeof VersionCategoriesCategoryFormsFormPivotPatchIncludeEnum[keyof typeof VersionCategoriesCategoryFormsFormPivotPatchIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryFormsGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryFormsGetVersionEnum = typeof VersionCategoriesCategoryFormsGetVersionEnum[keyof typeof VersionCategoriesCategoryFormsGetVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryFormsGetIncludeEnum = {
    Fields: 'fields',
    Submissions: 'submissions',
    Submissions2: 'submissions.*',
    Tags: 'tags'
} as const;
export type VersionCategoriesCategoryFormsGetIncludeEnum = typeof VersionCategoriesCategoryFormsGetIncludeEnum[keyof typeof VersionCategoriesCategoryFormsGetIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryFormsPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryFormsPostVersionEnum = typeof VersionCategoriesCategoryFormsPostVersionEnum[keyof typeof VersionCategoriesCategoryFormsPostVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryFormsPostIncludeEnum = {
    Fields: 'fields',
    Submissions: 'submissions',
    Submissions2: 'submissions.*',
    Tags: 'tags'
} as const;
export type VersionCategoriesCategoryFormsPostIncludeEnum = typeof VersionCategoriesCategoryFormsPostIncludeEnum[keyof typeof VersionCategoriesCategoryFormsPostIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryFormsSyncPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryFormsSyncPatchVersionEnum = typeof VersionCategoriesCategoryFormsSyncPatchVersionEnum[keyof typeof VersionCategoriesCategoryFormsSyncPatchVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryFormsSyncPatchIncludeEnum = {
    Fields: 'fields',
    Submissions: 'submissions',
    Submissions2: 'submissions.*',
    Tags: 'tags'
} as const;
export type VersionCategoriesCategoryFormsSyncPatchIncludeEnum = typeof VersionCategoriesCategoryFormsSyncPatchIncludeEnum[keyof typeof VersionCategoriesCategoryFormsSyncPatchIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryFormsTogglePatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryFormsTogglePatchVersionEnum = typeof VersionCategoriesCategoryFormsTogglePatchVersionEnum[keyof typeof VersionCategoriesCategoryFormsTogglePatchVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryFormsTogglePatchIncludeEnum = {
    Fields: 'fields',
    Submissions: 'submissions',
    Submissions2: 'submissions.*',
    Tags: 'tags'
} as const;
export type VersionCategoriesCategoryFormsTogglePatchIncludeEnum = typeof VersionCategoriesCategoryFormsTogglePatchIncludeEnum[keyof typeof VersionCategoriesCategoryFormsTogglePatchIncludeEnum];
