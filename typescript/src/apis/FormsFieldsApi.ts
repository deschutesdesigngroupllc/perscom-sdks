/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Field,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionCategoriesCategoryAwardsAttachPost200Response,
  VersionCategoriesCategoryAwardsAttachPostRequest,
  VersionCategoriesCategoryAwardsAwardPivotPatch200Response,
  VersionCategoriesCategoryAwardsAwardPivotPatchRequest,
  VersionCategoriesCategoryAwardsDetachDelete200Response,
  VersionCategoriesCategoryAwardsSyncPatch200Response,
  VersionCategoriesCategoryAwardsTogglePatch200Response,
  VersionFormsFormFieldsBatchPatchRequest,
  VersionFormsFormFieldsBatchPost200Response,
  VersionFormsFormFieldsBatchPostRequest,
  VersionFormsFormFieldsGet200Response,
  VersionFormsFormFieldsPost201Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
} from '../models/index';
import {
    FieldFromJSON,
    FieldToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionCategoriesCategoryAwardsAttachPost200ResponseFromJSON,
    VersionCategoriesCategoryAwardsAttachPost200ResponseToJSON,
    VersionCategoriesCategoryAwardsAttachPostRequestFromJSON,
    VersionCategoriesCategoryAwardsAttachPostRequestToJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatch200ResponseFromJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatch200ResponseToJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatchRequestFromJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatchRequestToJSON,
    VersionCategoriesCategoryAwardsDetachDelete200ResponseFromJSON,
    VersionCategoriesCategoryAwardsDetachDelete200ResponseToJSON,
    VersionCategoriesCategoryAwardsSyncPatch200ResponseFromJSON,
    VersionCategoriesCategoryAwardsSyncPatch200ResponseToJSON,
    VersionCategoriesCategoryAwardsTogglePatch200ResponseFromJSON,
    VersionCategoriesCategoryAwardsTogglePatch200ResponseToJSON,
    VersionFormsFormFieldsBatchPatchRequestFromJSON,
    VersionFormsFormFieldsBatchPatchRequestToJSON,
    VersionFormsFormFieldsBatchPost200ResponseFromJSON,
    VersionFormsFormFieldsBatchPost200ResponseToJSON,
    VersionFormsFormFieldsBatchPostRequestFromJSON,
    VersionFormsFormFieldsBatchPostRequestToJSON,
    VersionFormsFormFieldsGet200ResponseFromJSON,
    VersionFormsFormFieldsGet200ResponseToJSON,
    VersionFormsFormFieldsPost201ResponseFromJSON,
    VersionFormsFormFieldsPost201ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
} from '../models/index';

export interface VersionFormsFormFieldsAttachPostRequest {
    version: VersionFormsFormFieldsAttachPostVersionEnum;
    form: number;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

export interface VersionFormsFormFieldsBatchDeleteRequest {
    version: VersionFormsFormFieldsBatchDeleteVersionEnum;
    form: number;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionFormsFormFieldsBatchPatchOperationRequest {
    version: VersionFormsFormFieldsBatchPatchOperationVersionEnum;
    form: number;
    versionFormsFormFieldsBatchPatchRequest?: VersionFormsFormFieldsBatchPatchRequest;
}

export interface VersionFormsFormFieldsBatchPostOperationRequest {
    version: VersionFormsFormFieldsBatchPostOperationVersionEnum;
    form: number;
    versionFormsFormFieldsBatchPostRequest?: VersionFormsFormFieldsBatchPostRequest;
}

export interface VersionFormsFormFieldsDetachDeleteRequest {
    version: VersionFormsFormFieldsDetachDeleteVersionEnum;
    form: number;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

export interface VersionFormsFormFieldsFieldDeleteRequest {
    version: VersionFormsFormFieldsFieldDeleteVersionEnum;
    form: number;
    field: number;
}

export interface VersionFormsFormFieldsFieldGetRequest {
    version: VersionFormsFormFieldsFieldGetVersionEnum;
    form: number;
    field: number;
}

export interface VersionFormsFormFieldsFieldPatchRequest {
    version: VersionFormsFormFieldsFieldPatchVersionEnum;
    form: number;
    field: number;
    field2?: Field;
}

export interface VersionFormsFormFieldsFieldPivotPatchRequest {
    version: VersionFormsFormFieldsFieldPivotPatchVersionEnum;
    form: number;
    field: number;
    versionCategoriesCategoryAwardsAwardPivotPatchRequest?: VersionCategoriesCategoryAwardsAwardPivotPatchRequest;
}

export interface VersionFormsFormFieldsGetRequest {
    version: VersionFormsFormFieldsGetVersionEnum;
    form: number;
}

export interface VersionFormsFormFieldsPostRequest {
    version: VersionFormsFormFieldsPostVersionEnum;
    form: number;
    field?: Field;
}

export interface VersionFormsFormFieldsSyncPatchRequest {
    version: VersionFormsFormFieldsSyncPatchVersionEnum;
    form: number;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

export interface VersionFormsFormFieldsTogglePatchRequest {
    version: VersionFormsFormFieldsTogglePatchVersionEnum;
    form: number;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

/**
 * 
 */
export class FormsFieldsApi extends runtime.BaseAPI {

    /**
     * Attach fields
     */
    async versionFormsFormFieldsAttachPostRaw(requestParameters: VersionFormsFormFieldsAttachPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsAttachPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionFormsFormFieldsAttachPost().'
            );
        }

        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling versionFormsFormFieldsAttachPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/forms/{form}/fields/attach`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters['form']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsAttachPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Attach fields
     */
    async versionFormsFormFieldsAttachPost(requestParameters: VersionFormsFormFieldsAttachPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsAttachPost200Response> {
        const response = await this.versionFormsFormFieldsAttachPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a batch of fields
     */
    async versionFormsFormFieldsBatchDeleteRaw(requestParameters: VersionFormsFormFieldsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionFormsFormFieldsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionFormsFormFieldsBatchDelete().'
            );
        }

        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling versionFormsFormFieldsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/forms/{form}/fields/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters['form']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionFormsFormFieldsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of fields
     */
    async versionFormsFormFieldsBatchDelete(requestParameters: VersionFormsFormFieldsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionFormsFormFieldsBatchPost200Response> {
        const response = await this.versionFormsFormFieldsBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of fields
     */
    async versionFormsFormFieldsBatchPatchRaw(requestParameters: VersionFormsFormFieldsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionFormsFormFieldsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionFormsFormFieldsBatchPatch().'
            );
        }

        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling versionFormsFormFieldsBatchPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/forms/{form}/fields/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters['form']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionFormsFormFieldsBatchPatchRequestToJSON(requestParameters['versionFormsFormFieldsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionFormsFormFieldsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of fields
     */
    async versionFormsFormFieldsBatchPatch(requestParameters: VersionFormsFormFieldsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionFormsFormFieldsBatchPost200Response> {
        const response = await this.versionFormsFormFieldsBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of fields
     */
    async versionFormsFormFieldsBatchPostRaw(requestParameters: VersionFormsFormFieldsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionFormsFormFieldsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionFormsFormFieldsBatchPost().'
            );
        }

        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling versionFormsFormFieldsBatchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/forms/{form}/fields/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters['form']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionFormsFormFieldsBatchPostRequestToJSON(requestParameters['versionFormsFormFieldsBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionFormsFormFieldsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of fields
     */
    async versionFormsFormFieldsBatchPost(requestParameters: VersionFormsFormFieldsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionFormsFormFieldsBatchPost200Response> {
        const response = await this.versionFormsFormFieldsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Detach fields
     */
    async versionFormsFormFieldsDetachDeleteRaw(requestParameters: VersionFormsFormFieldsDetachDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsDetachDelete200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionFormsFormFieldsDetachDelete().'
            );
        }

        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling versionFormsFormFieldsDetachDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/forms/{form}/fields/detach`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters['form']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsDetachDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Detach fields
     */
    async versionFormsFormFieldsDetachDelete(requestParameters: VersionFormsFormFieldsDetachDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsDetachDelete200Response> {
        const response = await this.versionFormsFormFieldsDetachDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete field
     */
    async versionFormsFormFieldsFieldDeleteRaw(requestParameters: VersionFormsFormFieldsFieldDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionFormsFormFieldsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionFormsFormFieldsFieldDelete().'
            );
        }

        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling versionFormsFormFieldsFieldDelete().'
            );
        }

        if (requestParameters['field'] == null) {
            throw new runtime.RequiredError(
                'field',
                'Required parameter "field" was null or undefined when calling versionFormsFormFieldsFieldDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/forms/{form}/fields/{field}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters['form']))).replace(`{${"field"}}`, encodeURIComponent(String(requestParameters['field']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionFormsFormFieldsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete field
     */
    async versionFormsFormFieldsFieldDelete(requestParameters: VersionFormsFormFieldsFieldDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionFormsFormFieldsPost201Response> {
        const response = await this.versionFormsFormFieldsFieldDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get field
     */
    async versionFormsFormFieldsFieldGetRaw(requestParameters: VersionFormsFormFieldsFieldGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionFormsFormFieldsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionFormsFormFieldsFieldGet().'
            );
        }

        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling versionFormsFormFieldsFieldGet().'
            );
        }

        if (requestParameters['field'] == null) {
            throw new runtime.RequiredError(
                'field',
                'Required parameter "field" was null or undefined when calling versionFormsFormFieldsFieldGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/forms/{form}/fields/{field}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters['form']))).replace(`{${"field"}}`, encodeURIComponent(String(requestParameters['field']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionFormsFormFieldsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get field
     */
    async versionFormsFormFieldsFieldGet(requestParameters: VersionFormsFormFieldsFieldGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionFormsFormFieldsPost201Response> {
        const response = await this.versionFormsFormFieldsFieldGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update field
     */
    async versionFormsFormFieldsFieldPatchRaw(requestParameters: VersionFormsFormFieldsFieldPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionFormsFormFieldsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionFormsFormFieldsFieldPatch().'
            );
        }

        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling versionFormsFormFieldsFieldPatch().'
            );
        }

        if (requestParameters['field'] == null) {
            throw new runtime.RequiredError(
                'field',
                'Required parameter "field" was null or undefined when calling versionFormsFormFieldsFieldPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/forms/{form}/fields/{field}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters['form']))).replace(`{${"field"}}`, encodeURIComponent(String(requestParameters['field']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: FieldToJSON(requestParameters['field2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionFormsFormFieldsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update field
     */
    async versionFormsFormFieldsFieldPatch(requestParameters: VersionFormsFormFieldsFieldPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionFormsFormFieldsPost201Response> {
        const response = await this.versionFormsFormFieldsFieldPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update pivot
     */
    async versionFormsFormFieldsFieldPivotPatchRaw(requestParameters: VersionFormsFormFieldsFieldPivotPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsAwardPivotPatch200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionFormsFormFieldsFieldPivotPatch().'
            );
        }

        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling versionFormsFormFieldsFieldPivotPatch().'
            );
        }

        if (requestParameters['field'] == null) {
            throw new runtime.RequiredError(
                'field',
                'Required parameter "field" was null or undefined when calling versionFormsFormFieldsFieldPivotPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/forms/{form}/fields/{field}/pivot`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters['form']))).replace(`{${"field"}}`, encodeURIComponent(String(requestParameters['field']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAwardPivotPatchRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAwardPivotPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsAwardPivotPatch200ResponseFromJSON(jsonValue));
    }

    /**
     * Update pivot
     */
    async versionFormsFormFieldsFieldPivotPatch(requestParameters: VersionFormsFormFieldsFieldPivotPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsAwardPivotPatch200Response> {
        const response = await this.versionFormsFormFieldsFieldPivotPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of fields
     */
    async versionFormsFormFieldsGetRaw(requestParameters: VersionFormsFormFieldsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionFormsFormFieldsGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionFormsFormFieldsGet().'
            );
        }

        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling versionFormsFormFieldsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/forms/{form}/fields`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters['form']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionFormsFormFieldsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of fields
     */
    async versionFormsFormFieldsGet(requestParameters: VersionFormsFormFieldsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionFormsFormFieldsGet200Response> {
        const response = await this.versionFormsFormFieldsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create field
     */
    async versionFormsFormFieldsPostRaw(requestParameters: VersionFormsFormFieldsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionFormsFormFieldsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionFormsFormFieldsPost().'
            );
        }

        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling versionFormsFormFieldsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/forms/{form}/fields`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters['form']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FieldToJSON(requestParameters['field']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionFormsFormFieldsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create field
     */
    async versionFormsFormFieldsPost(requestParameters: VersionFormsFormFieldsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionFormsFormFieldsPost201Response> {
        const response = await this.versionFormsFormFieldsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sync fields
     */
    async versionFormsFormFieldsSyncPatchRaw(requestParameters: VersionFormsFormFieldsSyncPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsSyncPatch200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionFormsFormFieldsSyncPatch().'
            );
        }

        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling versionFormsFormFieldsSyncPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/forms/{form}/fields/sync`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters['form']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsSyncPatch200ResponseFromJSON(jsonValue));
    }

    /**
     * Sync fields
     */
    async versionFormsFormFieldsSyncPatch(requestParameters: VersionFormsFormFieldsSyncPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsSyncPatch200Response> {
        const response = await this.versionFormsFormFieldsSyncPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Toggle fields
     */
    async versionFormsFormFieldsTogglePatchRaw(requestParameters: VersionFormsFormFieldsTogglePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsTogglePatch200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionFormsFormFieldsTogglePatch().'
            );
        }

        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling versionFormsFormFieldsTogglePatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/forms/{form}/fields/toggle`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters['form']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsTogglePatch200ResponseFromJSON(jsonValue));
    }

    /**
     * Toggle fields
     */
    async versionFormsFormFieldsTogglePatch(requestParameters: VersionFormsFormFieldsTogglePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsTogglePatch200Response> {
        const response = await this.versionFormsFormFieldsTogglePatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionFormsFormFieldsAttachPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionFormsFormFieldsAttachPostVersionEnum = typeof VersionFormsFormFieldsAttachPostVersionEnum[keyof typeof VersionFormsFormFieldsAttachPostVersionEnum];
/**
 * @export
 */
export const VersionFormsFormFieldsBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionFormsFormFieldsBatchDeleteVersionEnum = typeof VersionFormsFormFieldsBatchDeleteVersionEnum[keyof typeof VersionFormsFormFieldsBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionFormsFormFieldsBatchPatchOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionFormsFormFieldsBatchPatchOperationVersionEnum = typeof VersionFormsFormFieldsBatchPatchOperationVersionEnum[keyof typeof VersionFormsFormFieldsBatchPatchOperationVersionEnum];
/**
 * @export
 */
export const VersionFormsFormFieldsBatchPostOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionFormsFormFieldsBatchPostOperationVersionEnum = typeof VersionFormsFormFieldsBatchPostOperationVersionEnum[keyof typeof VersionFormsFormFieldsBatchPostOperationVersionEnum];
/**
 * @export
 */
export const VersionFormsFormFieldsDetachDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionFormsFormFieldsDetachDeleteVersionEnum = typeof VersionFormsFormFieldsDetachDeleteVersionEnum[keyof typeof VersionFormsFormFieldsDetachDeleteVersionEnum];
/**
 * @export
 */
export const VersionFormsFormFieldsFieldDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionFormsFormFieldsFieldDeleteVersionEnum = typeof VersionFormsFormFieldsFieldDeleteVersionEnum[keyof typeof VersionFormsFormFieldsFieldDeleteVersionEnum];
/**
 * @export
 */
export const VersionFormsFormFieldsFieldGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionFormsFormFieldsFieldGetVersionEnum = typeof VersionFormsFormFieldsFieldGetVersionEnum[keyof typeof VersionFormsFormFieldsFieldGetVersionEnum];
/**
 * @export
 */
export const VersionFormsFormFieldsFieldPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionFormsFormFieldsFieldPatchVersionEnum = typeof VersionFormsFormFieldsFieldPatchVersionEnum[keyof typeof VersionFormsFormFieldsFieldPatchVersionEnum];
/**
 * @export
 */
export const VersionFormsFormFieldsFieldPivotPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionFormsFormFieldsFieldPivotPatchVersionEnum = typeof VersionFormsFormFieldsFieldPivotPatchVersionEnum[keyof typeof VersionFormsFormFieldsFieldPivotPatchVersionEnum];
/**
 * @export
 */
export const VersionFormsFormFieldsGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionFormsFormFieldsGetVersionEnum = typeof VersionFormsFormFieldsGetVersionEnum[keyof typeof VersionFormsFormFieldsGetVersionEnum];
/**
 * @export
 */
export const VersionFormsFormFieldsPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionFormsFormFieldsPostVersionEnum = typeof VersionFormsFormFieldsPostVersionEnum[keyof typeof VersionFormsFormFieldsPostVersionEnum];
/**
 * @export
 */
export const VersionFormsFormFieldsSyncPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionFormsFormFieldsSyncPatchVersionEnum = typeof VersionFormsFormFieldsSyncPatchVersionEnum[keyof typeof VersionFormsFormFieldsSyncPatchVersionEnum];
/**
 * @export
 */
export const VersionFormsFormFieldsTogglePatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionFormsFormFieldsTogglePatchVersionEnum = typeof VersionFormsFormFieldsTogglePatchVersionEnum[keyof typeof VersionFormsFormFieldsTogglePatchVersionEnum];
