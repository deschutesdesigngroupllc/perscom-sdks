/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Unit,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
  VersionUnitsBatchPatchRequest,
  VersionUnitsBatchPost200Response,
  VersionUnitsBatchPostRequest,
  VersionUnitsGet200Response,
  VersionUnitsPost201Response,
} from '../models/index';
import {
    UnitFromJSON,
    UnitToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
    VersionUnitsBatchPatchRequestFromJSON,
    VersionUnitsBatchPatchRequestToJSON,
    VersionUnitsBatchPost200ResponseFromJSON,
    VersionUnitsBatchPost200ResponseToJSON,
    VersionUnitsBatchPostRequestFromJSON,
    VersionUnitsBatchPostRequestToJSON,
    VersionUnitsGet200ResponseFromJSON,
    VersionUnitsGet200ResponseToJSON,
    VersionUnitsPost201ResponseFromJSON,
    VersionUnitsPost201ResponseToJSON,
} from '../models/index';

export interface VersionUnitsBatchDeleteRequest {
    version: VersionUnitsBatchDeleteVersionEnum;
    include?: VersionUnitsBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionUnitsBatchPatchOperationRequest {
    version: VersionUnitsBatchPatchOperationVersionEnum;
    include?: VersionUnitsBatchPatchOperationIncludeEnum;
    versionUnitsBatchPatchRequest?: VersionUnitsBatchPatchRequest;
}

export interface VersionUnitsBatchPostOperationRequest {
    version: VersionUnitsBatchPostOperationVersionEnum;
    include?: VersionUnitsBatchPostOperationIncludeEnum;
    versionUnitsBatchPostRequest?: VersionUnitsBatchPostRequest;
}

export interface VersionUnitsGetRequest {
    version: VersionUnitsGetVersionEnum;
    include?: VersionUnitsGetIncludeEnum;
}

export interface VersionUnitsPostRequest {
    version: VersionUnitsPostVersionEnum;
    include?: VersionUnitsPostIncludeEnum;
    unit?: Unit;
}

export interface VersionUnitsUnitDeleteRequest {
    version: VersionUnitsUnitDeleteVersionEnum;
    unit: number;
    include?: VersionUnitsUnitDeleteIncludeEnum;
}

export interface VersionUnitsUnitGetRequest {
    version: VersionUnitsUnitGetVersionEnum;
    unit: number;
    include?: VersionUnitsUnitGetIncludeEnum;
}

export interface VersionUnitsUnitPatchRequest {
    version: VersionUnitsUnitPatchVersionEnum;
    unit: number;
    include?: VersionUnitsUnitPatchIncludeEnum;
    unit2?: Unit;
}

/**
 * 
 */
export class UnitsApi extends runtime.BaseAPI {

    /**
     * Delete a batch of units
     */
    async versionUnitsBatchDeleteRaw(requestParameters: VersionUnitsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionUnitsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUnitsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/units/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionUnitsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of units
     */
    async versionUnitsBatchDelete(requestParameters: VersionUnitsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionUnitsBatchPost200Response> {
        const response = await this.versionUnitsBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of units
     */
    async versionUnitsBatchPatchRaw(requestParameters: VersionUnitsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionUnitsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUnitsBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/units/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionUnitsBatchPatchRequestToJSON(requestParameters['versionUnitsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionUnitsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of units
     */
    async versionUnitsBatchPatch(requestParameters: VersionUnitsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionUnitsBatchPost200Response> {
        const response = await this.versionUnitsBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of units
     */
    async versionUnitsBatchPostRaw(requestParameters: VersionUnitsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionUnitsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUnitsBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/units/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionUnitsBatchPostRequestToJSON(requestParameters['versionUnitsBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionUnitsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of units
     */
    async versionUnitsBatchPost(requestParameters: VersionUnitsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionUnitsBatchPost200Response> {
        const response = await this.versionUnitsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of units
     */
    async versionUnitsGetRaw(requestParameters: VersionUnitsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionUnitsGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUnitsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/units`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionUnitsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of units
     */
    async versionUnitsGet(requestParameters: VersionUnitsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionUnitsGet200Response> {
        const response = await this.versionUnitsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create unit
     */
    async versionUnitsPostRaw(requestParameters: VersionUnitsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionUnitsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUnitsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/units`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UnitToJSON(requestParameters['unit']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionUnitsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create unit
     */
    async versionUnitsPost(requestParameters: VersionUnitsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionUnitsPost201Response> {
        const response = await this.versionUnitsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete unit
     */
    async versionUnitsUnitDeleteRaw(requestParameters: VersionUnitsUnitDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionUnitsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUnitsUnitDelete().'
            );
        }

        if (requestParameters['unit'] == null) {
            throw new runtime.RequiredError(
                'unit',
                'Required parameter "unit" was null or undefined when calling versionUnitsUnitDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/units/{unit}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"unit"}}`, encodeURIComponent(String(requestParameters['unit']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionUnitsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete unit
     */
    async versionUnitsUnitDelete(requestParameters: VersionUnitsUnitDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionUnitsPost201Response> {
        const response = await this.versionUnitsUnitDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get unit
     */
    async versionUnitsUnitGetRaw(requestParameters: VersionUnitsUnitGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionUnitsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUnitsUnitGet().'
            );
        }

        if (requestParameters['unit'] == null) {
            throw new runtime.RequiredError(
                'unit',
                'Required parameter "unit" was null or undefined when calling versionUnitsUnitGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/units/{unit}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"unit"}}`, encodeURIComponent(String(requestParameters['unit']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionUnitsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get unit
     */
    async versionUnitsUnitGet(requestParameters: VersionUnitsUnitGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionUnitsPost201Response> {
        const response = await this.versionUnitsUnitGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update unit
     */
    async versionUnitsUnitPatchRaw(requestParameters: VersionUnitsUnitPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionUnitsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUnitsUnitPatch().'
            );
        }

        if (requestParameters['unit'] == null) {
            throw new runtime.RequiredError(
                'unit',
                'Required parameter "unit" was null or undefined when calling versionUnitsUnitPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/units/{unit}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"unit"}}`, encodeURIComponent(String(requestParameters['unit']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UnitToJSON(requestParameters['unit2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionUnitsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update unit
     */
    async versionUnitsUnitPatch(requestParameters: VersionUnitsUnitPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionUnitsPost201Response> {
        const response = await this.versionUnitsUnitPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionUnitsBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUnitsBatchDeleteVersionEnum = typeof VersionUnitsBatchDeleteVersionEnum[keyof typeof VersionUnitsBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionUnitsBatchDeleteIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    Image: 'image',
    Groups: 'groups',
    Groups2: 'groups.*',
    Users: 'users',
    Users2: 'users.*'
} as const;
export type VersionUnitsBatchDeleteIncludeEnum = typeof VersionUnitsBatchDeleteIncludeEnum[keyof typeof VersionUnitsBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionUnitsBatchPatchOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUnitsBatchPatchOperationVersionEnum = typeof VersionUnitsBatchPatchOperationVersionEnum[keyof typeof VersionUnitsBatchPatchOperationVersionEnum];
/**
 * @export
 */
export const VersionUnitsBatchPatchOperationIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    Image: 'image',
    Groups: 'groups',
    Groups2: 'groups.*',
    Users: 'users',
    Users2: 'users.*'
} as const;
export type VersionUnitsBatchPatchOperationIncludeEnum = typeof VersionUnitsBatchPatchOperationIncludeEnum[keyof typeof VersionUnitsBatchPatchOperationIncludeEnum];
/**
 * @export
 */
export const VersionUnitsBatchPostOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUnitsBatchPostOperationVersionEnum = typeof VersionUnitsBatchPostOperationVersionEnum[keyof typeof VersionUnitsBatchPostOperationVersionEnum];
/**
 * @export
 */
export const VersionUnitsBatchPostOperationIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    Image: 'image',
    Groups: 'groups',
    Groups2: 'groups.*',
    Users: 'users',
    Users2: 'users.*'
} as const;
export type VersionUnitsBatchPostOperationIncludeEnum = typeof VersionUnitsBatchPostOperationIncludeEnum[keyof typeof VersionUnitsBatchPostOperationIncludeEnum];
/**
 * @export
 */
export const VersionUnitsGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUnitsGetVersionEnum = typeof VersionUnitsGetVersionEnum[keyof typeof VersionUnitsGetVersionEnum];
/**
 * @export
 */
export const VersionUnitsGetIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    Image: 'image',
    Groups: 'groups',
    Groups2: 'groups.*',
    Users: 'users',
    Users2: 'users.*'
} as const;
export type VersionUnitsGetIncludeEnum = typeof VersionUnitsGetIncludeEnum[keyof typeof VersionUnitsGetIncludeEnum];
/**
 * @export
 */
export const VersionUnitsPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUnitsPostVersionEnum = typeof VersionUnitsPostVersionEnum[keyof typeof VersionUnitsPostVersionEnum];
/**
 * @export
 */
export const VersionUnitsPostIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    Image: 'image',
    Groups: 'groups',
    Groups2: 'groups.*',
    Users: 'users',
    Users2: 'users.*'
} as const;
export type VersionUnitsPostIncludeEnum = typeof VersionUnitsPostIncludeEnum[keyof typeof VersionUnitsPostIncludeEnum];
/**
 * @export
 */
export const VersionUnitsUnitDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUnitsUnitDeleteVersionEnum = typeof VersionUnitsUnitDeleteVersionEnum[keyof typeof VersionUnitsUnitDeleteVersionEnum];
/**
 * @export
 */
export const VersionUnitsUnitDeleteIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    Image: 'image',
    Groups: 'groups',
    Groups2: 'groups.*',
    Users: 'users',
    Users2: 'users.*'
} as const;
export type VersionUnitsUnitDeleteIncludeEnum = typeof VersionUnitsUnitDeleteIncludeEnum[keyof typeof VersionUnitsUnitDeleteIncludeEnum];
/**
 * @export
 */
export const VersionUnitsUnitGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUnitsUnitGetVersionEnum = typeof VersionUnitsUnitGetVersionEnum[keyof typeof VersionUnitsUnitGetVersionEnum];
/**
 * @export
 */
export const VersionUnitsUnitGetIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    Image: 'image',
    Groups: 'groups',
    Groups2: 'groups.*',
    Users: 'users',
    Users2: 'users.*'
} as const;
export type VersionUnitsUnitGetIncludeEnum = typeof VersionUnitsUnitGetIncludeEnum[keyof typeof VersionUnitsUnitGetIncludeEnum];
/**
 * @export
 */
export const VersionUnitsUnitPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUnitsUnitPatchVersionEnum = typeof VersionUnitsUnitPatchVersionEnum[keyof typeof VersionUnitsUnitPatchVersionEnum];
/**
 * @export
 */
export const VersionUnitsUnitPatchIncludeEnum = {
    AssignmentRecords: 'assignment_records',
    AssignmentRecords2: 'assignment_records.*',
    Image: 'image',
    Groups: 'groups',
    Groups2: 'groups.*',
    Users: 'users',
    Users2: 'users.*'
} as const;
export type VersionUnitsUnitPatchIncludeEnum = typeof VersionUnitsUnitPatchIncludeEnum[keyof typeof VersionUnitsUnitPatchIncludeEnum];
