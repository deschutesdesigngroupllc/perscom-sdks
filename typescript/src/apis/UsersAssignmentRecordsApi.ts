/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AssignmentRecord,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionAssignmentRecordsBatchPatchRequest,
  VersionAssignmentRecordsBatchPost200Response,
  VersionAssignmentRecordsBatchPostRequest,
  VersionAssignmentRecordsGet200Response,
  VersionAssignmentRecordsPost201Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
} from '../models/index';
import {
    AssignmentRecordFromJSON,
    AssignmentRecordToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionAssignmentRecordsBatchPatchRequestFromJSON,
    VersionAssignmentRecordsBatchPatchRequestToJSON,
    VersionAssignmentRecordsBatchPost200ResponseFromJSON,
    VersionAssignmentRecordsBatchPost200ResponseToJSON,
    VersionAssignmentRecordsBatchPostRequestFromJSON,
    VersionAssignmentRecordsBatchPostRequestToJSON,
    VersionAssignmentRecordsGet200ResponseFromJSON,
    VersionAssignmentRecordsGet200ResponseToJSON,
    VersionAssignmentRecordsPost201ResponseFromJSON,
    VersionAssignmentRecordsPost201ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
} from '../models/index';

export interface VersionUsersUserAssignmentRecordsAssignmentRecordDeleteRequest {
    version: VersionUsersUserAssignmentRecordsAssignmentRecordDeleteVersionEnum;
    user: number;
    assignmentRecord: number;
    include?: VersionUsersUserAssignmentRecordsAssignmentRecordDeleteIncludeEnum;
}

export interface VersionUsersUserAssignmentRecordsAssignmentRecordDissociateDeleteRequest {
    version: VersionUsersUserAssignmentRecordsAssignmentRecordDissociateDeleteVersionEnum;
    user: number;
    assignmentRecord: number;
    include?: VersionUsersUserAssignmentRecordsAssignmentRecordDissociateDeleteIncludeEnum;
}

export interface VersionUsersUserAssignmentRecordsAssignmentRecordGetRequest {
    version: VersionUsersUserAssignmentRecordsAssignmentRecordGetVersionEnum;
    user: number;
    assignmentRecord: number;
    include?: VersionUsersUserAssignmentRecordsAssignmentRecordGetIncludeEnum;
}

export interface VersionUsersUserAssignmentRecordsAssignmentRecordPatchRequest {
    version: VersionUsersUserAssignmentRecordsAssignmentRecordPatchVersionEnum;
    user: number;
    assignmentRecord: number;
    include?: VersionUsersUserAssignmentRecordsAssignmentRecordPatchIncludeEnum;
    assignmentRecord2?: AssignmentRecord;
}

export interface VersionUsersUserAssignmentRecordsAssociatePostRequest {
    version: VersionUsersUserAssignmentRecordsAssociatePostVersionEnum;
    user: number;
    include?: VersionUsersUserAssignmentRecordsAssociatePostIncludeEnum;
}

export interface VersionUsersUserAssignmentRecordsBatchDeleteRequest {
    version: VersionUsersUserAssignmentRecordsBatchDeleteVersionEnum;
    user: number;
    include?: VersionUsersUserAssignmentRecordsBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionUsersUserAssignmentRecordsBatchPatchRequest {
    version: VersionUsersUserAssignmentRecordsBatchPatchVersionEnum;
    user: number;
    include?: VersionUsersUserAssignmentRecordsBatchPatchIncludeEnum;
    versionAssignmentRecordsBatchPatchRequest?: VersionAssignmentRecordsBatchPatchRequest;
}

export interface VersionUsersUserAssignmentRecordsBatchPostRequest {
    version: VersionUsersUserAssignmentRecordsBatchPostVersionEnum;
    user: number;
    include?: VersionUsersUserAssignmentRecordsBatchPostIncludeEnum;
    versionAssignmentRecordsBatchPostRequest?: VersionAssignmentRecordsBatchPostRequest;
}

export interface VersionUsersUserAssignmentRecordsGetRequest {
    version: VersionUsersUserAssignmentRecordsGetVersionEnum;
    user: number;
    include?: VersionUsersUserAssignmentRecordsGetIncludeEnum;
}

export interface VersionUsersUserAssignmentRecordsPostRequest {
    version: VersionUsersUserAssignmentRecordsPostVersionEnum;
    user: number;
    include?: VersionUsersUserAssignmentRecordsPostIncludeEnum;
    assignmentRecord?: AssignmentRecord;
}

/**
 * 
 */
export class UsersAssignmentRecordsApi extends runtime.BaseAPI {

    /**
     * Delete assignment record
     */
    async versionUsersUserAssignmentRecordsAssignmentRecordDeleteRaw(requestParameters: VersionUsersUserAssignmentRecordsAssignmentRecordDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAssignmentRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserAssignmentRecordsAssignmentRecordDelete().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserAssignmentRecordsAssignmentRecordDelete().'
            );
        }

        if (requestParameters['assignmentRecord'] == null) {
            throw new runtime.RequiredError(
                'assignmentRecord',
                'Required parameter "assignmentRecord" was null or undefined when calling versionUsersUserAssignmentRecordsAssignmentRecordDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/assignment-records/{assignment_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"assignment_record"}}`, encodeURIComponent(String(requestParameters['assignmentRecord']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAssignmentRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete assignment record
     */
    async versionUsersUserAssignmentRecordsAssignmentRecordDelete(requestParameters: VersionUsersUserAssignmentRecordsAssignmentRecordDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAssignmentRecordsPost201Response> {
        const response = await this.versionUsersUserAssignmentRecordsAssignmentRecordDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Dissociate assignment record from user
     */
    async versionUsersUserAssignmentRecordsAssignmentRecordDissociateDeleteRaw(requestParameters: VersionUsersUserAssignmentRecordsAssignmentRecordDissociateDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAssignmentRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserAssignmentRecordsAssignmentRecordDissociateDelete().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserAssignmentRecordsAssignmentRecordDissociateDelete().'
            );
        }

        if (requestParameters['assignmentRecord'] == null) {
            throw new runtime.RequiredError(
                'assignmentRecord',
                'Required parameter "assignmentRecord" was null or undefined when calling versionUsersUserAssignmentRecordsAssignmentRecordDissociateDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/assignment-records/{assignment_record}/dissociate`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"assignment_record"}}`, encodeURIComponent(String(requestParameters['assignmentRecord']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAssignmentRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Dissociate assignment record from user
     */
    async versionUsersUserAssignmentRecordsAssignmentRecordDissociateDelete(requestParameters: VersionUsersUserAssignmentRecordsAssignmentRecordDissociateDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAssignmentRecordsPost201Response> {
        const response = await this.versionUsersUserAssignmentRecordsAssignmentRecordDissociateDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get assignment record
     */
    async versionUsersUserAssignmentRecordsAssignmentRecordGetRaw(requestParameters: VersionUsersUserAssignmentRecordsAssignmentRecordGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAssignmentRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserAssignmentRecordsAssignmentRecordGet().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserAssignmentRecordsAssignmentRecordGet().'
            );
        }

        if (requestParameters['assignmentRecord'] == null) {
            throw new runtime.RequiredError(
                'assignmentRecord',
                'Required parameter "assignmentRecord" was null or undefined when calling versionUsersUserAssignmentRecordsAssignmentRecordGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/assignment-records/{assignment_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"assignment_record"}}`, encodeURIComponent(String(requestParameters['assignmentRecord']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAssignmentRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get assignment record
     */
    async versionUsersUserAssignmentRecordsAssignmentRecordGet(requestParameters: VersionUsersUserAssignmentRecordsAssignmentRecordGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAssignmentRecordsPost201Response> {
        const response = await this.versionUsersUserAssignmentRecordsAssignmentRecordGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update assignment record
     */
    async versionUsersUserAssignmentRecordsAssignmentRecordPatchRaw(requestParameters: VersionUsersUserAssignmentRecordsAssignmentRecordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAssignmentRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserAssignmentRecordsAssignmentRecordPatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserAssignmentRecordsAssignmentRecordPatch().'
            );
        }

        if (requestParameters['assignmentRecord'] == null) {
            throw new runtime.RequiredError(
                'assignmentRecord',
                'Required parameter "assignmentRecord" was null or undefined when calling versionUsersUserAssignmentRecordsAssignmentRecordPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/assignment-records/{assignment_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"assignment_record"}}`, encodeURIComponent(String(requestParameters['assignmentRecord']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AssignmentRecordToJSON(requestParameters['assignmentRecord2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAssignmentRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update assignment record
     */
    async versionUsersUserAssignmentRecordsAssignmentRecordPatch(requestParameters: VersionUsersUserAssignmentRecordsAssignmentRecordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAssignmentRecordsPost201Response> {
        const response = await this.versionUsersUserAssignmentRecordsAssignmentRecordPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Associate assignment record with user
     */
    async versionUsersUserAssignmentRecordsAssociatePostRaw(requestParameters: VersionUsersUserAssignmentRecordsAssociatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAssignmentRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserAssignmentRecordsAssociatePost().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserAssignmentRecordsAssociatePost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/assignment-records/associate`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAssignmentRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Associate assignment record with user
     */
    async versionUsersUserAssignmentRecordsAssociatePost(requestParameters: VersionUsersUserAssignmentRecordsAssociatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAssignmentRecordsPost201Response> {
        const response = await this.versionUsersUserAssignmentRecordsAssociatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a batch of assignment records
     */
    async versionUsersUserAssignmentRecordsBatchDeleteRaw(requestParameters: VersionUsersUserAssignmentRecordsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAssignmentRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserAssignmentRecordsBatchDelete().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserAssignmentRecordsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/assignment-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAssignmentRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of assignment records
     */
    async versionUsersUserAssignmentRecordsBatchDelete(requestParameters: VersionUsersUserAssignmentRecordsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAssignmentRecordsBatchPost200Response> {
        const response = await this.versionUsersUserAssignmentRecordsBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of assignment records
     */
    async versionUsersUserAssignmentRecordsBatchPatchRaw(requestParameters: VersionUsersUserAssignmentRecordsBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAssignmentRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserAssignmentRecordsBatchPatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserAssignmentRecordsBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/assignment-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAssignmentRecordsBatchPatchRequestToJSON(requestParameters['versionAssignmentRecordsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAssignmentRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of assignment records
     */
    async versionUsersUserAssignmentRecordsBatchPatch(requestParameters: VersionUsersUserAssignmentRecordsBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAssignmentRecordsBatchPost200Response> {
        const response = await this.versionUsersUserAssignmentRecordsBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of assignment records
     */
    async versionUsersUserAssignmentRecordsBatchPostRaw(requestParameters: VersionUsersUserAssignmentRecordsBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAssignmentRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserAssignmentRecordsBatchPost().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserAssignmentRecordsBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/assignment-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAssignmentRecordsBatchPostRequestToJSON(requestParameters['versionAssignmentRecordsBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAssignmentRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of assignment records
     */
    async versionUsersUserAssignmentRecordsBatchPost(requestParameters: VersionUsersUserAssignmentRecordsBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAssignmentRecordsBatchPost200Response> {
        const response = await this.versionUsersUserAssignmentRecordsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of assignment records
     */
    async versionUsersUserAssignmentRecordsGetRaw(requestParameters: VersionUsersUserAssignmentRecordsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAssignmentRecordsGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserAssignmentRecordsGet().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserAssignmentRecordsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/assignment-records`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAssignmentRecordsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of assignment records
     */
    async versionUsersUserAssignmentRecordsGet(requestParameters: VersionUsersUserAssignmentRecordsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAssignmentRecordsGet200Response> {
        const response = await this.versionUsersUserAssignmentRecordsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create assignment record
     */
    async versionUsersUserAssignmentRecordsPostRaw(requestParameters: VersionUsersUserAssignmentRecordsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAssignmentRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserAssignmentRecordsPost().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserAssignmentRecordsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/assignment-records`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssignmentRecordToJSON(requestParameters['assignmentRecord']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAssignmentRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create assignment record
     */
    async versionUsersUserAssignmentRecordsPost(requestParameters: VersionUsersUserAssignmentRecordsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAssignmentRecordsPost201Response> {
        const response = await this.versionUsersUserAssignmentRecordsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionUsersUserAssignmentRecordsAssignmentRecordDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserAssignmentRecordsAssignmentRecordDeleteVersionEnum = typeof VersionUsersUserAssignmentRecordsAssignmentRecordDeleteVersionEnum[keyof typeof VersionUsersUserAssignmentRecordsAssignmentRecordDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersUserAssignmentRecordsAssignmentRecordDeleteIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Position: 'position',
    Specialty: 'specialty',
    Status: 'status',
    Unit: 'unit',
    Unit2: 'unit.*'
} as const;
export type VersionUsersUserAssignmentRecordsAssignmentRecordDeleteIncludeEnum = typeof VersionUsersUserAssignmentRecordsAssignmentRecordDeleteIncludeEnum[keyof typeof VersionUsersUserAssignmentRecordsAssignmentRecordDeleteIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserAssignmentRecordsAssignmentRecordDissociateDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserAssignmentRecordsAssignmentRecordDissociateDeleteVersionEnum = typeof VersionUsersUserAssignmentRecordsAssignmentRecordDissociateDeleteVersionEnum[keyof typeof VersionUsersUserAssignmentRecordsAssignmentRecordDissociateDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersUserAssignmentRecordsAssignmentRecordDissociateDeleteIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Position: 'position',
    Specialty: 'specialty',
    Status: 'status',
    Unit: 'unit',
    Unit2: 'unit.*'
} as const;
export type VersionUsersUserAssignmentRecordsAssignmentRecordDissociateDeleteIncludeEnum = typeof VersionUsersUserAssignmentRecordsAssignmentRecordDissociateDeleteIncludeEnum[keyof typeof VersionUsersUserAssignmentRecordsAssignmentRecordDissociateDeleteIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserAssignmentRecordsAssignmentRecordGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserAssignmentRecordsAssignmentRecordGetVersionEnum = typeof VersionUsersUserAssignmentRecordsAssignmentRecordGetVersionEnum[keyof typeof VersionUsersUserAssignmentRecordsAssignmentRecordGetVersionEnum];
/**
 * @export
 */
export const VersionUsersUserAssignmentRecordsAssignmentRecordGetIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Position: 'position',
    Specialty: 'specialty',
    Status: 'status',
    Unit: 'unit',
    Unit2: 'unit.*'
} as const;
export type VersionUsersUserAssignmentRecordsAssignmentRecordGetIncludeEnum = typeof VersionUsersUserAssignmentRecordsAssignmentRecordGetIncludeEnum[keyof typeof VersionUsersUserAssignmentRecordsAssignmentRecordGetIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserAssignmentRecordsAssignmentRecordPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserAssignmentRecordsAssignmentRecordPatchVersionEnum = typeof VersionUsersUserAssignmentRecordsAssignmentRecordPatchVersionEnum[keyof typeof VersionUsersUserAssignmentRecordsAssignmentRecordPatchVersionEnum];
/**
 * @export
 */
export const VersionUsersUserAssignmentRecordsAssignmentRecordPatchIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Position: 'position',
    Specialty: 'specialty',
    Status: 'status',
    Unit: 'unit',
    Unit2: 'unit.*'
} as const;
export type VersionUsersUserAssignmentRecordsAssignmentRecordPatchIncludeEnum = typeof VersionUsersUserAssignmentRecordsAssignmentRecordPatchIncludeEnum[keyof typeof VersionUsersUserAssignmentRecordsAssignmentRecordPatchIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserAssignmentRecordsAssociatePostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserAssignmentRecordsAssociatePostVersionEnum = typeof VersionUsersUserAssignmentRecordsAssociatePostVersionEnum[keyof typeof VersionUsersUserAssignmentRecordsAssociatePostVersionEnum];
/**
 * @export
 */
export const VersionUsersUserAssignmentRecordsAssociatePostIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Position: 'position',
    Specialty: 'specialty',
    Status: 'status',
    Unit: 'unit',
    Unit2: 'unit.*'
} as const;
export type VersionUsersUserAssignmentRecordsAssociatePostIncludeEnum = typeof VersionUsersUserAssignmentRecordsAssociatePostIncludeEnum[keyof typeof VersionUsersUserAssignmentRecordsAssociatePostIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserAssignmentRecordsBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserAssignmentRecordsBatchDeleteVersionEnum = typeof VersionUsersUserAssignmentRecordsBatchDeleteVersionEnum[keyof typeof VersionUsersUserAssignmentRecordsBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersUserAssignmentRecordsBatchDeleteIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Position: 'position',
    Specialty: 'specialty',
    Status: 'status',
    Unit: 'unit',
    Unit2: 'unit.*'
} as const;
export type VersionUsersUserAssignmentRecordsBatchDeleteIncludeEnum = typeof VersionUsersUserAssignmentRecordsBatchDeleteIncludeEnum[keyof typeof VersionUsersUserAssignmentRecordsBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserAssignmentRecordsBatchPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserAssignmentRecordsBatchPatchVersionEnum = typeof VersionUsersUserAssignmentRecordsBatchPatchVersionEnum[keyof typeof VersionUsersUserAssignmentRecordsBatchPatchVersionEnum];
/**
 * @export
 */
export const VersionUsersUserAssignmentRecordsBatchPatchIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Position: 'position',
    Specialty: 'specialty',
    Status: 'status',
    Unit: 'unit',
    Unit2: 'unit.*'
} as const;
export type VersionUsersUserAssignmentRecordsBatchPatchIncludeEnum = typeof VersionUsersUserAssignmentRecordsBatchPatchIncludeEnum[keyof typeof VersionUsersUserAssignmentRecordsBatchPatchIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserAssignmentRecordsBatchPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserAssignmentRecordsBatchPostVersionEnum = typeof VersionUsersUserAssignmentRecordsBatchPostVersionEnum[keyof typeof VersionUsersUserAssignmentRecordsBatchPostVersionEnum];
/**
 * @export
 */
export const VersionUsersUserAssignmentRecordsBatchPostIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Position: 'position',
    Specialty: 'specialty',
    Status: 'status',
    Unit: 'unit',
    Unit2: 'unit.*'
} as const;
export type VersionUsersUserAssignmentRecordsBatchPostIncludeEnum = typeof VersionUsersUserAssignmentRecordsBatchPostIncludeEnum[keyof typeof VersionUsersUserAssignmentRecordsBatchPostIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserAssignmentRecordsGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserAssignmentRecordsGetVersionEnum = typeof VersionUsersUserAssignmentRecordsGetVersionEnum[keyof typeof VersionUsersUserAssignmentRecordsGetVersionEnum];
/**
 * @export
 */
export const VersionUsersUserAssignmentRecordsGetIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Position: 'position',
    Specialty: 'specialty',
    Status: 'status',
    Unit: 'unit',
    Unit2: 'unit.*'
} as const;
export type VersionUsersUserAssignmentRecordsGetIncludeEnum = typeof VersionUsersUserAssignmentRecordsGetIncludeEnum[keyof typeof VersionUsersUserAssignmentRecordsGetIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserAssignmentRecordsPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserAssignmentRecordsPostVersionEnum = typeof VersionUsersUserAssignmentRecordsPostVersionEnum[keyof typeof VersionUsersUserAssignmentRecordsPostVersionEnum];
/**
 * @export
 */
export const VersionUsersUserAssignmentRecordsPostIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Position: 'position',
    Specialty: 'specialty',
    Status: 'status',
    Unit: 'unit',
    Unit2: 'unit.*'
} as const;
export type VersionUsersUserAssignmentRecordsPostIncludeEnum = typeof VersionUsersUserAssignmentRecordsPostIncludeEnum[keyof typeof VersionUsersUserAssignmentRecordsPostIncludeEnum];
