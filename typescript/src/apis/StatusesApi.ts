/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Status,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
  VersionStatusesBatchPatchRequest,
  VersionStatusesBatchPost200Response,
  VersionStatusesBatchPostRequest,
  VersionStatusesGet200Response,
  VersionStatusesPost201Response,
} from '../models/index';
import {
    StatusFromJSON,
    StatusToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
    VersionStatusesBatchPatchRequestFromJSON,
    VersionStatusesBatchPatchRequestToJSON,
    VersionStatusesBatchPost200ResponseFromJSON,
    VersionStatusesBatchPost200ResponseToJSON,
    VersionStatusesBatchPostRequestFromJSON,
    VersionStatusesBatchPostRequestToJSON,
    VersionStatusesGet200ResponseFromJSON,
    VersionStatusesGet200ResponseToJSON,
    VersionStatusesPost201ResponseFromJSON,
    VersionStatusesPost201ResponseToJSON,
} from '../models/index';

export interface VersionStatusesBatchDeleteRequest {
    version: VersionStatusesBatchDeleteVersionEnum;
    include?: VersionStatusesBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionStatusesBatchPatchOperationRequest {
    version: VersionStatusesBatchPatchOperationVersionEnum;
    include?: VersionStatusesBatchPatchOperationIncludeEnum;
    versionStatusesBatchPatchRequest?: VersionStatusesBatchPatchRequest;
}

export interface VersionStatusesBatchPostOperationRequest {
    version: VersionStatusesBatchPostOperationVersionEnum;
    include?: VersionStatusesBatchPostOperationIncludeEnum;
    versionStatusesBatchPostRequest?: VersionStatusesBatchPostRequest;
}

export interface VersionStatusesGetRequest {
    version: VersionStatusesGetVersionEnum;
}

export interface VersionStatusesPostRequest {
    version: VersionStatusesPostVersionEnum;
    status?: Status;
}

export interface VersionStatusesStatusDeleteRequest {
    version: VersionStatusesStatusDeleteVersionEnum;
    status: number;
    include?: VersionStatusesStatusDeleteIncludeEnum;
}

export interface VersionStatusesStatusGetRequest {
    version: VersionStatusesStatusGetVersionEnum;
    status: number;
    include?: VersionStatusesStatusGetIncludeEnum;
}

export interface VersionStatusesStatusPatchRequest {
    version: VersionStatusesStatusPatchVersionEnum;
    status: number;
    include?: VersionStatusesStatusPatchIncludeEnum;
    status2?: Status;
}

/**
 * 
 */
export class StatusesApi extends runtime.BaseAPI {

    /**
     * Delete a batch of statuses
     */
    async versionStatusesBatchDeleteRaw(requestParameters: VersionStatusesBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionStatusesBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionStatusesBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/statuses/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionStatusesBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of statuses
     */
    async versionStatusesBatchDelete(requestParameters: VersionStatusesBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionStatusesBatchPost200Response> {
        const response = await this.versionStatusesBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of statuses
     */
    async versionStatusesBatchPatchRaw(requestParameters: VersionStatusesBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionStatusesBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionStatusesBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/statuses/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionStatusesBatchPatchRequestToJSON(requestParameters['versionStatusesBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionStatusesBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of statuses
     */
    async versionStatusesBatchPatch(requestParameters: VersionStatusesBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionStatusesBatchPost200Response> {
        const response = await this.versionStatusesBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of statuses
     */
    async versionStatusesBatchPostRaw(requestParameters: VersionStatusesBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionStatusesBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionStatusesBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/statuses/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionStatusesBatchPostRequestToJSON(requestParameters['versionStatusesBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionStatusesBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of statuses
     */
    async versionStatusesBatchPost(requestParameters: VersionStatusesBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionStatusesBatchPost200Response> {
        const response = await this.versionStatusesBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of statuses
     */
    async versionStatusesGetRaw(requestParameters: VersionStatusesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionStatusesGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionStatusesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/statuses`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionStatusesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of statuses
     */
    async versionStatusesGet(requestParameters: VersionStatusesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionStatusesGet200Response> {
        const response = await this.versionStatusesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create status
     */
    async versionStatusesPostRaw(requestParameters: VersionStatusesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionStatusesPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionStatusesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/statuses`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StatusToJSON(requestParameters['status']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionStatusesPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create status
     */
    async versionStatusesPost(requestParameters: VersionStatusesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionStatusesPost201Response> {
        const response = await this.versionStatusesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete status
     */
    async versionStatusesStatusDeleteRaw(requestParameters: VersionStatusesStatusDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionStatusesPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionStatusesStatusDelete().'
            );
        }

        if (requestParameters['status'] == null) {
            throw new runtime.RequiredError(
                'status',
                'Required parameter "status" was null or undefined when calling versionStatusesStatusDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/statuses/{status}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"status"}}`, encodeURIComponent(String(requestParameters['status']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionStatusesPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete status
     */
    async versionStatusesStatusDelete(requestParameters: VersionStatusesStatusDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionStatusesPost201Response> {
        const response = await this.versionStatusesStatusDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get status
     */
    async versionStatusesStatusGetRaw(requestParameters: VersionStatusesStatusGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionStatusesPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionStatusesStatusGet().'
            );
        }

        if (requestParameters['status'] == null) {
            throw new runtime.RequiredError(
                'status',
                'Required parameter "status" was null or undefined when calling versionStatusesStatusGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/statuses/{status}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"status"}}`, encodeURIComponent(String(requestParameters['status']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionStatusesPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get status
     */
    async versionStatusesStatusGet(requestParameters: VersionStatusesStatusGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionStatusesPost201Response> {
        const response = await this.versionStatusesStatusGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update status
     */
    async versionStatusesStatusPatchRaw(requestParameters: VersionStatusesStatusPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionStatusesPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionStatusesStatusPatch().'
            );
        }

        if (requestParameters['status'] == null) {
            throw new runtime.RequiredError(
                'status',
                'Required parameter "status" was null or undefined when calling versionStatusesStatusPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/statuses/{status}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"status"}}`, encodeURIComponent(String(requestParameters['status']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: StatusToJSON(requestParameters['status2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionStatusesPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update status
     */
    async versionStatusesStatusPatch(requestParameters: VersionStatusesStatusPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionStatusesPost201Response> {
        const response = await this.versionStatusesStatusPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionStatusesBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionStatusesBatchDeleteVersionEnum = typeof VersionStatusesBatchDeleteVersionEnum[keyof typeof VersionStatusesBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionStatusesBatchDeleteIncludeEnum = {
    Submissions: 'submissions',
    Users: 'users'
} as const;
export type VersionStatusesBatchDeleteIncludeEnum = typeof VersionStatusesBatchDeleteIncludeEnum[keyof typeof VersionStatusesBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionStatusesBatchPatchOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionStatusesBatchPatchOperationVersionEnum = typeof VersionStatusesBatchPatchOperationVersionEnum[keyof typeof VersionStatusesBatchPatchOperationVersionEnum];
/**
 * @export
 */
export const VersionStatusesBatchPatchOperationIncludeEnum = {
    Submissions: 'submissions',
    Users: 'users'
} as const;
export type VersionStatusesBatchPatchOperationIncludeEnum = typeof VersionStatusesBatchPatchOperationIncludeEnum[keyof typeof VersionStatusesBatchPatchOperationIncludeEnum];
/**
 * @export
 */
export const VersionStatusesBatchPostOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionStatusesBatchPostOperationVersionEnum = typeof VersionStatusesBatchPostOperationVersionEnum[keyof typeof VersionStatusesBatchPostOperationVersionEnum];
/**
 * @export
 */
export const VersionStatusesBatchPostOperationIncludeEnum = {
    Submissions: 'submissions',
    Users: 'users'
} as const;
export type VersionStatusesBatchPostOperationIncludeEnum = typeof VersionStatusesBatchPostOperationIncludeEnum[keyof typeof VersionStatusesBatchPostOperationIncludeEnum];
/**
 * @export
 */
export const VersionStatusesGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionStatusesGetVersionEnum = typeof VersionStatusesGetVersionEnum[keyof typeof VersionStatusesGetVersionEnum];
/**
 * @export
 */
export const VersionStatusesPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionStatusesPostVersionEnum = typeof VersionStatusesPostVersionEnum[keyof typeof VersionStatusesPostVersionEnum];
/**
 * @export
 */
export const VersionStatusesStatusDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionStatusesStatusDeleteVersionEnum = typeof VersionStatusesStatusDeleteVersionEnum[keyof typeof VersionStatusesStatusDeleteVersionEnum];
/**
 * @export
 */
export const VersionStatusesStatusDeleteIncludeEnum = {
    Submissions: 'submissions',
    Users: 'users'
} as const;
export type VersionStatusesStatusDeleteIncludeEnum = typeof VersionStatusesStatusDeleteIncludeEnum[keyof typeof VersionStatusesStatusDeleteIncludeEnum];
/**
 * @export
 */
export const VersionStatusesStatusGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionStatusesStatusGetVersionEnum = typeof VersionStatusesStatusGetVersionEnum[keyof typeof VersionStatusesStatusGetVersionEnum];
/**
 * @export
 */
export const VersionStatusesStatusGetIncludeEnum = {
    Submissions: 'submissions',
    Users: 'users'
} as const;
export type VersionStatusesStatusGetIncludeEnum = typeof VersionStatusesStatusGetIncludeEnum[keyof typeof VersionStatusesStatusGetIncludeEnum];
/**
 * @export
 */
export const VersionStatusesStatusPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionStatusesStatusPatchVersionEnum = typeof VersionStatusesStatusPatchVersionEnum[keyof typeof VersionStatusesStatusPatchVersionEnum];
/**
 * @export
 */
export const VersionStatusesStatusPatchIncludeEnum = {
    Submissions: 'submissions',
    Users: 'users'
} as const;
export type VersionStatusesStatusPatchIncludeEnum = typeof VersionStatusesStatusPatchIncludeEnum[keyof typeof VersionStatusesStatusPatchIncludeEnum];
