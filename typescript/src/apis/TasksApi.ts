/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Task,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
  VersionTasksBatchPatchRequest,
  VersionTasksBatchPost200Response,
  VersionTasksBatchPostRequest,
  VersionTasksGet200Response,
  VersionTasksPost201Response,
} from '../models/index';
import {
    TaskFromJSON,
    TaskToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
    VersionTasksBatchPatchRequestFromJSON,
    VersionTasksBatchPatchRequestToJSON,
    VersionTasksBatchPost200ResponseFromJSON,
    VersionTasksBatchPost200ResponseToJSON,
    VersionTasksBatchPostRequestFromJSON,
    VersionTasksBatchPostRequestToJSON,
    VersionTasksGet200ResponseFromJSON,
    VersionTasksGet200ResponseToJSON,
    VersionTasksPost201ResponseFromJSON,
    VersionTasksPost201ResponseToJSON,
} from '../models/index';

export interface VersionTasksBatchDeleteRequest {
    version: VersionTasksBatchDeleteVersionEnum;
    include?: VersionTasksBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionTasksBatchPatchOperationRequest {
    version: VersionTasksBatchPatchOperationVersionEnum;
    include?: VersionTasksBatchPatchOperationIncludeEnum;
    versionTasksBatchPatchRequest?: VersionTasksBatchPatchRequest;
}

export interface VersionTasksBatchPostOperationRequest {
    version: VersionTasksBatchPostOperationVersionEnum;
    include?: VersionTasksBatchPostOperationIncludeEnum;
    versionTasksBatchPostRequest?: VersionTasksBatchPostRequest;
}

export interface VersionTasksGetRequest {
    version: VersionTasksGetVersionEnum;
    include?: VersionTasksGetIncludeEnum;
}

export interface VersionTasksPostRequest {
    version: VersionTasksPostVersionEnum;
    include?: VersionTasksPostIncludeEnum;
    task?: Task;
}

export interface VersionTasksTaskDeleteRequest {
    version: VersionTasksTaskDeleteVersionEnum;
    task: number;
    include?: VersionTasksTaskDeleteIncludeEnum;
}

export interface VersionTasksTaskGetRequest {
    version: VersionTasksTaskGetVersionEnum;
    task: number;
    include?: VersionTasksTaskGetIncludeEnum;
}

export interface VersionTasksTaskPatchRequest {
    version: VersionTasksTaskPatchVersionEnum;
    task: number;
    include?: VersionTasksTaskPatchIncludeEnum;
    task2?: Task;
}

/**
 * 
 */
export class TasksApi extends runtime.BaseAPI {

    /**
     * Delete a batch of tasks
     */
    async versionTasksBatchDeleteRaw(requestParameters: VersionTasksBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionTasksBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionTasksBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/tasks/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionTasksBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of tasks
     */
    async versionTasksBatchDelete(requestParameters: VersionTasksBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionTasksBatchPost200Response> {
        const response = await this.versionTasksBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of tasks
     */
    async versionTasksBatchPatchRaw(requestParameters: VersionTasksBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionTasksBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionTasksBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/tasks/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionTasksBatchPatchRequestToJSON(requestParameters['versionTasksBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionTasksBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of tasks
     */
    async versionTasksBatchPatch(requestParameters: VersionTasksBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionTasksBatchPost200Response> {
        const response = await this.versionTasksBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of tasks
     */
    async versionTasksBatchPostRaw(requestParameters: VersionTasksBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionTasksBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionTasksBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/tasks/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionTasksBatchPostRequestToJSON(requestParameters['versionTasksBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionTasksBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of tasks
     */
    async versionTasksBatchPost(requestParameters: VersionTasksBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionTasksBatchPost200Response> {
        const response = await this.versionTasksBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of tasks
     */
    async versionTasksGetRaw(requestParameters: VersionTasksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionTasksGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionTasksGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/tasks`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionTasksGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of tasks
     */
    async versionTasksGet(requestParameters: VersionTasksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionTasksGet200Response> {
        const response = await this.versionTasksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create task
     */
    async versionTasksPostRaw(requestParameters: VersionTasksPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionTasksPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionTasksPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/tasks`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskToJSON(requestParameters['task']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionTasksPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create task
     */
    async versionTasksPost(requestParameters: VersionTasksPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionTasksPost201Response> {
        const response = await this.versionTasksPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete task
     */
    async versionTasksTaskDeleteRaw(requestParameters: VersionTasksTaskDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionTasksPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionTasksTaskDelete().'
            );
        }

        if (requestParameters['task'] == null) {
            throw new runtime.RequiredError(
                'task',
                'Required parameter "task" was null or undefined when calling versionTasksTaskDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/tasks/{task}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"task"}}`, encodeURIComponent(String(requestParameters['task']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionTasksPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete task
     */
    async versionTasksTaskDelete(requestParameters: VersionTasksTaskDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionTasksPost201Response> {
        const response = await this.versionTasksTaskDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get task
     */
    async versionTasksTaskGetRaw(requestParameters: VersionTasksTaskGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionTasksPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionTasksTaskGet().'
            );
        }

        if (requestParameters['task'] == null) {
            throw new runtime.RequiredError(
                'task',
                'Required parameter "task" was null or undefined when calling versionTasksTaskGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/tasks/{task}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"task"}}`, encodeURIComponent(String(requestParameters['task']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionTasksPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get task
     */
    async versionTasksTaskGet(requestParameters: VersionTasksTaskGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionTasksPost201Response> {
        const response = await this.versionTasksTaskGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update task
     */
    async versionTasksTaskPatchRaw(requestParameters: VersionTasksTaskPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionTasksPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionTasksTaskPatch().'
            );
        }

        if (requestParameters['task'] == null) {
            throw new runtime.RequiredError(
                'task',
                'Required parameter "task" was null or undefined when calling versionTasksTaskPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/tasks/{task}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"task"}}`, encodeURIComponent(String(requestParameters['task']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TaskToJSON(requestParameters['task2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionTasksPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update task
     */
    async versionTasksTaskPatch(requestParameters: VersionTasksTaskPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionTasksPost201Response> {
        const response = await this.versionTasksTaskPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionTasksBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionTasksBatchDeleteVersionEnum = typeof VersionTasksBatchDeleteVersionEnum[keyof typeof VersionTasksBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionTasksBatchDeleteIncludeEnum = {
    Attachments: 'attachments',
    Form: 'form',
    Users: 'users'
} as const;
export type VersionTasksBatchDeleteIncludeEnum = typeof VersionTasksBatchDeleteIncludeEnum[keyof typeof VersionTasksBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionTasksBatchPatchOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionTasksBatchPatchOperationVersionEnum = typeof VersionTasksBatchPatchOperationVersionEnum[keyof typeof VersionTasksBatchPatchOperationVersionEnum];
/**
 * @export
 */
export const VersionTasksBatchPatchOperationIncludeEnum = {
    Attachments: 'attachments',
    Form: 'form',
    Users: 'users'
} as const;
export type VersionTasksBatchPatchOperationIncludeEnum = typeof VersionTasksBatchPatchOperationIncludeEnum[keyof typeof VersionTasksBatchPatchOperationIncludeEnum];
/**
 * @export
 */
export const VersionTasksBatchPostOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionTasksBatchPostOperationVersionEnum = typeof VersionTasksBatchPostOperationVersionEnum[keyof typeof VersionTasksBatchPostOperationVersionEnum];
/**
 * @export
 */
export const VersionTasksBatchPostOperationIncludeEnum = {
    Attachments: 'attachments',
    Form: 'form',
    Users: 'users'
} as const;
export type VersionTasksBatchPostOperationIncludeEnum = typeof VersionTasksBatchPostOperationIncludeEnum[keyof typeof VersionTasksBatchPostOperationIncludeEnum];
/**
 * @export
 */
export const VersionTasksGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionTasksGetVersionEnum = typeof VersionTasksGetVersionEnum[keyof typeof VersionTasksGetVersionEnum];
/**
 * @export
 */
export const VersionTasksGetIncludeEnum = {
    Attachments: 'attachments',
    Form: 'form',
    Users: 'users'
} as const;
export type VersionTasksGetIncludeEnum = typeof VersionTasksGetIncludeEnum[keyof typeof VersionTasksGetIncludeEnum];
/**
 * @export
 */
export const VersionTasksPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionTasksPostVersionEnum = typeof VersionTasksPostVersionEnum[keyof typeof VersionTasksPostVersionEnum];
/**
 * @export
 */
export const VersionTasksPostIncludeEnum = {
    Attachments: 'attachments',
    Form: 'form',
    Users: 'users'
} as const;
export type VersionTasksPostIncludeEnum = typeof VersionTasksPostIncludeEnum[keyof typeof VersionTasksPostIncludeEnum];
/**
 * @export
 */
export const VersionTasksTaskDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionTasksTaskDeleteVersionEnum = typeof VersionTasksTaskDeleteVersionEnum[keyof typeof VersionTasksTaskDeleteVersionEnum];
/**
 * @export
 */
export const VersionTasksTaskDeleteIncludeEnum = {
    Attachments: 'attachments',
    Form: 'form',
    Users: 'users'
} as const;
export type VersionTasksTaskDeleteIncludeEnum = typeof VersionTasksTaskDeleteIncludeEnum[keyof typeof VersionTasksTaskDeleteIncludeEnum];
/**
 * @export
 */
export const VersionTasksTaskGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionTasksTaskGetVersionEnum = typeof VersionTasksTaskGetVersionEnum[keyof typeof VersionTasksTaskGetVersionEnum];
/**
 * @export
 */
export const VersionTasksTaskGetIncludeEnum = {
    Attachments: 'attachments',
    Form: 'form',
    Users: 'users'
} as const;
export type VersionTasksTaskGetIncludeEnum = typeof VersionTasksTaskGetIncludeEnum[keyof typeof VersionTasksTaskGetIncludeEnum];
/**
 * @export
 */
export const VersionTasksTaskPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionTasksTaskPatchVersionEnum = typeof VersionTasksTaskPatchVersionEnum[keyof typeof VersionTasksTaskPatchVersionEnum];
/**
 * @export
 */
export const VersionTasksTaskPatchIncludeEnum = {
    Attachments: 'attachments',
    Form: 'form',
    Users: 'users'
} as const;
export type VersionTasksTaskPatchIncludeEnum = typeof VersionTasksTaskPatchIncludeEnum[keyof typeof VersionTasksTaskPatchIncludeEnum];
