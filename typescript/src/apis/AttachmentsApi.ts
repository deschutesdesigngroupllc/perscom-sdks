/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Attachment,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionAttachmentsBatchPatchRequest,
  VersionAttachmentsBatchPost200Response,
  VersionAttachmentsBatchPostRequest,
  VersionAttachmentsGet200Response,
  VersionAttachmentsPost201Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
} from '../models/index';
import {
    AttachmentFromJSON,
    AttachmentToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionAttachmentsBatchPatchRequestFromJSON,
    VersionAttachmentsBatchPatchRequestToJSON,
    VersionAttachmentsBatchPost200ResponseFromJSON,
    VersionAttachmentsBatchPost200ResponseToJSON,
    VersionAttachmentsBatchPostRequestFromJSON,
    VersionAttachmentsBatchPostRequestToJSON,
    VersionAttachmentsGet200ResponseFromJSON,
    VersionAttachmentsGet200ResponseToJSON,
    VersionAttachmentsPost201ResponseFromJSON,
    VersionAttachmentsPost201ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
} from '../models/index';

export interface VersionAttachmentsAttachmentDeleteRequest {
    version: VersionAttachmentsAttachmentDeleteVersionEnum;
    attachment: number;
    include?: VersionAttachmentsAttachmentDeleteIncludeEnum;
}

export interface VersionAttachmentsAttachmentGetRequest {
    version: VersionAttachmentsAttachmentGetVersionEnum;
    attachment: number;
    include?: VersionAttachmentsAttachmentGetIncludeEnum;
}

export interface VersionAttachmentsAttachmentPatchRequest {
    version: VersionAttachmentsAttachmentPatchVersionEnum;
    attachment: number;
    include?: VersionAttachmentsAttachmentPatchIncludeEnum;
    attachment2?: Omit<Attachment, 'filename'|'model_type'|'model_id'|'path'|'attachment_url'>;
}

export interface VersionAttachmentsBatchDeleteRequest {
    version: VersionAttachmentsBatchDeleteVersionEnum;
    include?: VersionAttachmentsBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionAttachmentsBatchPatchOperationRequest {
    version: VersionAttachmentsBatchPatchOperationVersionEnum;
    include?: VersionAttachmentsBatchPatchOperationIncludeEnum;
    versionAttachmentsBatchPatchRequest?: VersionAttachmentsBatchPatchRequest;
}

export interface VersionAttachmentsBatchPostOperationRequest {
    version: VersionAttachmentsBatchPostOperationVersionEnum;
    include?: VersionAttachmentsBatchPostOperationIncludeEnum;
    versionAttachmentsBatchPostRequest?: VersionAttachmentsBatchPostRequest;
}

export interface VersionAttachmentsGetRequest {
    version: VersionAttachmentsGetVersionEnum;
    include?: VersionAttachmentsGetIncludeEnum;
}

export interface VersionAttachmentsPostRequest {
    version: VersionAttachmentsPostVersionEnum;
    include?: VersionAttachmentsPostIncludeEnum;
    attachment?: Omit<Attachment, 'filename'|'model_type'|'model_id'|'path'|'attachment_url'>;
}

/**
 * 
 */
export class AttachmentsApi extends runtime.BaseAPI {

    /**
     * Delete attachment
     */
    async versionAttachmentsAttachmentDeleteRaw(requestParameters: VersionAttachmentsAttachmentDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAttachmentsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAttachmentsAttachmentDelete().'
            );
        }

        if (requestParameters['attachment'] == null) {
            throw new runtime.RequiredError(
                'attachment',
                'Required parameter "attachment" was null or undefined when calling versionAttachmentsAttachmentDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/attachments/{attachment}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"attachment"}}`, encodeURIComponent(String(requestParameters['attachment']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAttachmentsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete attachment
     */
    async versionAttachmentsAttachmentDelete(requestParameters: VersionAttachmentsAttachmentDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAttachmentsPost201Response> {
        const response = await this.versionAttachmentsAttachmentDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get attachment
     */
    async versionAttachmentsAttachmentGetRaw(requestParameters: VersionAttachmentsAttachmentGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAttachmentsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAttachmentsAttachmentGet().'
            );
        }

        if (requestParameters['attachment'] == null) {
            throw new runtime.RequiredError(
                'attachment',
                'Required parameter "attachment" was null or undefined when calling versionAttachmentsAttachmentGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/attachments/{attachment}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"attachment"}}`, encodeURIComponent(String(requestParameters['attachment']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAttachmentsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get attachment
     */
    async versionAttachmentsAttachmentGet(requestParameters: VersionAttachmentsAttachmentGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAttachmentsPost201Response> {
        const response = await this.versionAttachmentsAttachmentGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update attachment
     */
    async versionAttachmentsAttachmentPatchRaw(requestParameters: VersionAttachmentsAttachmentPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAttachmentsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAttachmentsAttachmentPatch().'
            );
        }

        if (requestParameters['attachment'] == null) {
            throw new runtime.RequiredError(
                'attachment',
                'Required parameter "attachment" was null or undefined when calling versionAttachmentsAttachmentPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/attachments/{attachment}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"attachment"}}`, encodeURIComponent(String(requestParameters['attachment']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AttachmentToJSON(requestParameters['attachment2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAttachmentsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update attachment
     */
    async versionAttachmentsAttachmentPatch(requestParameters: VersionAttachmentsAttachmentPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAttachmentsPost201Response> {
        const response = await this.versionAttachmentsAttachmentPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a batch of attachments
     */
    async versionAttachmentsBatchDeleteRaw(requestParameters: VersionAttachmentsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAttachmentsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAttachmentsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/attachments/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAttachmentsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of attachments
     */
    async versionAttachmentsBatchDelete(requestParameters: VersionAttachmentsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAttachmentsBatchPost200Response> {
        const response = await this.versionAttachmentsBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of attachments
     */
    async versionAttachmentsBatchPatchRaw(requestParameters: VersionAttachmentsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAttachmentsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAttachmentsBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/attachments/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAttachmentsBatchPatchRequestToJSON(requestParameters['versionAttachmentsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAttachmentsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of attachments
     */
    async versionAttachmentsBatchPatch(requestParameters: VersionAttachmentsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAttachmentsBatchPost200Response> {
        const response = await this.versionAttachmentsBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of attachments
     */
    async versionAttachmentsBatchPostRaw(requestParameters: VersionAttachmentsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAttachmentsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAttachmentsBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/attachments/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAttachmentsBatchPostRequestToJSON(requestParameters['versionAttachmentsBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAttachmentsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of attachments
     */
    async versionAttachmentsBatchPost(requestParameters: VersionAttachmentsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAttachmentsBatchPost200Response> {
        const response = await this.versionAttachmentsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of attachments
     */
    async versionAttachmentsGetRaw(requestParameters: VersionAttachmentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAttachmentsGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAttachmentsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/attachments`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAttachmentsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of attachments
     */
    async versionAttachmentsGet(requestParameters: VersionAttachmentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAttachmentsGet200Response> {
        const response = await this.versionAttachmentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create attachment
     */
    async versionAttachmentsPostRaw(requestParameters: VersionAttachmentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAttachmentsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAttachmentsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/attachments`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AttachmentToJSON(requestParameters['attachment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAttachmentsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create attachment
     */
    async versionAttachmentsPost(requestParameters: VersionAttachmentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAttachmentsPost201Response> {
        const response = await this.versionAttachmentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionAttachmentsAttachmentDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAttachmentsAttachmentDeleteVersionEnum = typeof VersionAttachmentsAttachmentDeleteVersionEnum[keyof typeof VersionAttachmentsAttachmentDeleteVersionEnum];
/**
 * @export
 */
export const VersionAttachmentsAttachmentDeleteIncludeEnum = {
    Model: 'model'
} as const;
export type VersionAttachmentsAttachmentDeleteIncludeEnum = typeof VersionAttachmentsAttachmentDeleteIncludeEnum[keyof typeof VersionAttachmentsAttachmentDeleteIncludeEnum];
/**
 * @export
 */
export const VersionAttachmentsAttachmentGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAttachmentsAttachmentGetVersionEnum = typeof VersionAttachmentsAttachmentGetVersionEnum[keyof typeof VersionAttachmentsAttachmentGetVersionEnum];
/**
 * @export
 */
export const VersionAttachmentsAttachmentGetIncludeEnum = {
    Model: 'model'
} as const;
export type VersionAttachmentsAttachmentGetIncludeEnum = typeof VersionAttachmentsAttachmentGetIncludeEnum[keyof typeof VersionAttachmentsAttachmentGetIncludeEnum];
/**
 * @export
 */
export const VersionAttachmentsAttachmentPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAttachmentsAttachmentPatchVersionEnum = typeof VersionAttachmentsAttachmentPatchVersionEnum[keyof typeof VersionAttachmentsAttachmentPatchVersionEnum];
/**
 * @export
 */
export const VersionAttachmentsAttachmentPatchIncludeEnum = {
    Model: 'model'
} as const;
export type VersionAttachmentsAttachmentPatchIncludeEnum = typeof VersionAttachmentsAttachmentPatchIncludeEnum[keyof typeof VersionAttachmentsAttachmentPatchIncludeEnum];
/**
 * @export
 */
export const VersionAttachmentsBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAttachmentsBatchDeleteVersionEnum = typeof VersionAttachmentsBatchDeleteVersionEnum[keyof typeof VersionAttachmentsBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionAttachmentsBatchDeleteIncludeEnum = {
    Model: 'model'
} as const;
export type VersionAttachmentsBatchDeleteIncludeEnum = typeof VersionAttachmentsBatchDeleteIncludeEnum[keyof typeof VersionAttachmentsBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionAttachmentsBatchPatchOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAttachmentsBatchPatchOperationVersionEnum = typeof VersionAttachmentsBatchPatchOperationVersionEnum[keyof typeof VersionAttachmentsBatchPatchOperationVersionEnum];
/**
 * @export
 */
export const VersionAttachmentsBatchPatchOperationIncludeEnum = {
    Model: 'model'
} as const;
export type VersionAttachmentsBatchPatchOperationIncludeEnum = typeof VersionAttachmentsBatchPatchOperationIncludeEnum[keyof typeof VersionAttachmentsBatchPatchOperationIncludeEnum];
/**
 * @export
 */
export const VersionAttachmentsBatchPostOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAttachmentsBatchPostOperationVersionEnum = typeof VersionAttachmentsBatchPostOperationVersionEnum[keyof typeof VersionAttachmentsBatchPostOperationVersionEnum];
/**
 * @export
 */
export const VersionAttachmentsBatchPostOperationIncludeEnum = {
    Model: 'model'
} as const;
export type VersionAttachmentsBatchPostOperationIncludeEnum = typeof VersionAttachmentsBatchPostOperationIncludeEnum[keyof typeof VersionAttachmentsBatchPostOperationIncludeEnum];
/**
 * @export
 */
export const VersionAttachmentsGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAttachmentsGetVersionEnum = typeof VersionAttachmentsGetVersionEnum[keyof typeof VersionAttachmentsGetVersionEnum];
/**
 * @export
 */
export const VersionAttachmentsGetIncludeEnum = {
    Model: 'model'
} as const;
export type VersionAttachmentsGetIncludeEnum = typeof VersionAttachmentsGetIncludeEnum[keyof typeof VersionAttachmentsGetIncludeEnum];
/**
 * @export
 */
export const VersionAttachmentsPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAttachmentsPostVersionEnum = typeof VersionAttachmentsPostVersionEnum[keyof typeof VersionAttachmentsPostVersionEnum];
/**
 * @export
 */
export const VersionAttachmentsPostIncludeEnum = {
    Model: 'model'
} as const;
export type VersionAttachmentsPostIncludeEnum = typeof VersionAttachmentsPostIncludeEnum[keyof typeof VersionAttachmentsPostIncludeEnum];
