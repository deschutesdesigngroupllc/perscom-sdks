/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AwardRecord,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionAwardRecordsBatchPatchRequest,
  VersionAwardRecordsBatchPost200Response,
  VersionAwardRecordsBatchPostRequest,
  VersionAwardRecordsGet200Response,
  VersionAwardRecordsPost201Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
} from '../models/index';
import {
    AwardRecordFromJSON,
    AwardRecordToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionAwardRecordsBatchPatchRequestFromJSON,
    VersionAwardRecordsBatchPatchRequestToJSON,
    VersionAwardRecordsBatchPost200ResponseFromJSON,
    VersionAwardRecordsBatchPost200ResponseToJSON,
    VersionAwardRecordsBatchPostRequestFromJSON,
    VersionAwardRecordsBatchPostRequestToJSON,
    VersionAwardRecordsGet200ResponseFromJSON,
    VersionAwardRecordsGet200ResponseToJSON,
    VersionAwardRecordsPost201ResponseFromJSON,
    VersionAwardRecordsPost201ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
} from '../models/index';

export interface VersionAwardRecordsAwardRecordDeleteRequest {
    version: VersionAwardRecordsAwardRecordDeleteVersionEnum;
    awardRecord: number;
    include?: VersionAwardRecordsAwardRecordDeleteIncludeEnum;
}

export interface VersionAwardRecordsAwardRecordGetRequest {
    version: VersionAwardRecordsAwardRecordGetVersionEnum;
    awardRecord: number;
    include?: VersionAwardRecordsAwardRecordGetIncludeEnum;
}

export interface VersionAwardRecordsAwardRecordPatchRequest {
    version: VersionAwardRecordsAwardRecordPatchVersionEnum;
    awardRecord: number;
    include?: VersionAwardRecordsAwardRecordPatchIncludeEnum;
    awardRecord2?: AwardRecord;
}

export interface VersionAwardRecordsBatchDeleteRequest {
    version: VersionAwardRecordsBatchDeleteVersionEnum;
    include?: VersionAwardRecordsBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionAwardRecordsBatchPatchOperationRequest {
    version: VersionAwardRecordsBatchPatchOperationVersionEnum;
    include?: VersionAwardRecordsBatchPatchOperationIncludeEnum;
    versionAwardRecordsBatchPatchRequest?: VersionAwardRecordsBatchPatchRequest;
}

export interface VersionAwardRecordsBatchPostOperationRequest {
    version: VersionAwardRecordsBatchPostOperationVersionEnum;
    include?: VersionAwardRecordsBatchPostOperationIncludeEnum;
    versionAwardRecordsBatchPostRequest?: VersionAwardRecordsBatchPostRequest;
}

export interface VersionAwardRecordsGetRequest {
    version: VersionAwardRecordsGetVersionEnum;
    include?: VersionAwardRecordsGetIncludeEnum;
}

export interface VersionAwardRecordsPostRequest {
    version: VersionAwardRecordsPostVersionEnum;
    include?: VersionAwardRecordsPostIncludeEnum;
    awardRecord?: AwardRecord;
}

/**
 * 
 */
export class AwardRecordsApi extends runtime.BaseAPI {

    /**
     * Delete award record
     */
    async versionAwardRecordsAwardRecordDeleteRaw(requestParameters: VersionAwardRecordsAwardRecordDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAwardRecordsAwardRecordDelete().'
            );
        }

        if (requestParameters['awardRecord'] == null) {
            throw new runtime.RequiredError(
                'awardRecord',
                'Required parameter "awardRecord" was null or undefined when calling versionAwardRecordsAwardRecordDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/award-records/{award_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"award_record"}}`, encodeURIComponent(String(requestParameters['awardRecord']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete award record
     */
    async versionAwardRecordsAwardRecordDelete(requestParameters: VersionAwardRecordsAwardRecordDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardRecordsPost201Response> {
        const response = await this.versionAwardRecordsAwardRecordDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get award record
     */
    async versionAwardRecordsAwardRecordGetRaw(requestParameters: VersionAwardRecordsAwardRecordGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAwardRecordsAwardRecordGet().'
            );
        }

        if (requestParameters['awardRecord'] == null) {
            throw new runtime.RequiredError(
                'awardRecord',
                'Required parameter "awardRecord" was null or undefined when calling versionAwardRecordsAwardRecordGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/award-records/{award_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"award_record"}}`, encodeURIComponent(String(requestParameters['awardRecord']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get award record
     */
    async versionAwardRecordsAwardRecordGet(requestParameters: VersionAwardRecordsAwardRecordGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardRecordsPost201Response> {
        const response = await this.versionAwardRecordsAwardRecordGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update award record
     */
    async versionAwardRecordsAwardRecordPatchRaw(requestParameters: VersionAwardRecordsAwardRecordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAwardRecordsAwardRecordPatch().'
            );
        }

        if (requestParameters['awardRecord'] == null) {
            throw new runtime.RequiredError(
                'awardRecord',
                'Required parameter "awardRecord" was null or undefined when calling versionAwardRecordsAwardRecordPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/award-records/{award_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"award_record"}}`, encodeURIComponent(String(requestParameters['awardRecord']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AwardRecordToJSON(requestParameters['awardRecord2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update award record
     */
    async versionAwardRecordsAwardRecordPatch(requestParameters: VersionAwardRecordsAwardRecordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardRecordsPost201Response> {
        const response = await this.versionAwardRecordsAwardRecordPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a batch of award records
     */
    async versionAwardRecordsBatchDeleteRaw(requestParameters: VersionAwardRecordsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAwardRecordsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/award-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of award records
     */
    async versionAwardRecordsBatchDelete(requestParameters: VersionAwardRecordsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardRecordsBatchPost200Response> {
        const response = await this.versionAwardRecordsBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of award records
     */
    async versionAwardRecordsBatchPatchRaw(requestParameters: VersionAwardRecordsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAwardRecordsBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/award-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAwardRecordsBatchPatchRequestToJSON(requestParameters['versionAwardRecordsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of award records
     */
    async versionAwardRecordsBatchPatch(requestParameters: VersionAwardRecordsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardRecordsBatchPost200Response> {
        const response = await this.versionAwardRecordsBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of award records
     */
    async versionAwardRecordsBatchPostRaw(requestParameters: VersionAwardRecordsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAwardRecordsBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/award-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAwardRecordsBatchPostRequestToJSON(requestParameters['versionAwardRecordsBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of award records
     */
    async versionAwardRecordsBatchPost(requestParameters: VersionAwardRecordsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardRecordsBatchPost200Response> {
        const response = await this.versionAwardRecordsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of award records
     */
    async versionAwardRecordsGetRaw(requestParameters: VersionAwardRecordsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardRecordsGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAwardRecordsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/award-records`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardRecordsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of award records
     */
    async versionAwardRecordsGet(requestParameters: VersionAwardRecordsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardRecordsGet200Response> {
        const response = await this.versionAwardRecordsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create award record
     */
    async versionAwardRecordsPostRaw(requestParameters: VersionAwardRecordsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionAwardRecordsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/award-records`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwardRecordToJSON(requestParameters['awardRecord']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create award record
     */
    async versionAwardRecordsPost(requestParameters: VersionAwardRecordsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardRecordsPost201Response> {
        const response = await this.versionAwardRecordsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionAwardRecordsAwardRecordDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAwardRecordsAwardRecordDeleteVersionEnum = typeof VersionAwardRecordsAwardRecordDeleteVersionEnum[keyof typeof VersionAwardRecordsAwardRecordDeleteVersionEnum];
/**
 * @export
 */
export const VersionAwardRecordsAwardRecordDeleteIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Award: 'award',
    AwardImage: 'award.image',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionAwardRecordsAwardRecordDeleteIncludeEnum = typeof VersionAwardRecordsAwardRecordDeleteIncludeEnum[keyof typeof VersionAwardRecordsAwardRecordDeleteIncludeEnum];
/**
 * @export
 */
export const VersionAwardRecordsAwardRecordGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAwardRecordsAwardRecordGetVersionEnum = typeof VersionAwardRecordsAwardRecordGetVersionEnum[keyof typeof VersionAwardRecordsAwardRecordGetVersionEnum];
/**
 * @export
 */
export const VersionAwardRecordsAwardRecordGetIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Award: 'award',
    AwardImage: 'award.image',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionAwardRecordsAwardRecordGetIncludeEnum = typeof VersionAwardRecordsAwardRecordGetIncludeEnum[keyof typeof VersionAwardRecordsAwardRecordGetIncludeEnum];
/**
 * @export
 */
export const VersionAwardRecordsAwardRecordPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAwardRecordsAwardRecordPatchVersionEnum = typeof VersionAwardRecordsAwardRecordPatchVersionEnum[keyof typeof VersionAwardRecordsAwardRecordPatchVersionEnum];
/**
 * @export
 */
export const VersionAwardRecordsAwardRecordPatchIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Award: 'award',
    AwardImage: 'award.image',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionAwardRecordsAwardRecordPatchIncludeEnum = typeof VersionAwardRecordsAwardRecordPatchIncludeEnum[keyof typeof VersionAwardRecordsAwardRecordPatchIncludeEnum];
/**
 * @export
 */
export const VersionAwardRecordsBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAwardRecordsBatchDeleteVersionEnum = typeof VersionAwardRecordsBatchDeleteVersionEnum[keyof typeof VersionAwardRecordsBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionAwardRecordsBatchDeleteIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Award: 'award',
    AwardImage: 'award.image',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionAwardRecordsBatchDeleteIncludeEnum = typeof VersionAwardRecordsBatchDeleteIncludeEnum[keyof typeof VersionAwardRecordsBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionAwardRecordsBatchPatchOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAwardRecordsBatchPatchOperationVersionEnum = typeof VersionAwardRecordsBatchPatchOperationVersionEnum[keyof typeof VersionAwardRecordsBatchPatchOperationVersionEnum];
/**
 * @export
 */
export const VersionAwardRecordsBatchPatchOperationIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Award: 'award',
    AwardImage: 'award.image',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionAwardRecordsBatchPatchOperationIncludeEnum = typeof VersionAwardRecordsBatchPatchOperationIncludeEnum[keyof typeof VersionAwardRecordsBatchPatchOperationIncludeEnum];
/**
 * @export
 */
export const VersionAwardRecordsBatchPostOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAwardRecordsBatchPostOperationVersionEnum = typeof VersionAwardRecordsBatchPostOperationVersionEnum[keyof typeof VersionAwardRecordsBatchPostOperationVersionEnum];
/**
 * @export
 */
export const VersionAwardRecordsBatchPostOperationIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Award: 'award',
    AwardImage: 'award.image',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionAwardRecordsBatchPostOperationIncludeEnum = typeof VersionAwardRecordsBatchPostOperationIncludeEnum[keyof typeof VersionAwardRecordsBatchPostOperationIncludeEnum];
/**
 * @export
 */
export const VersionAwardRecordsGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAwardRecordsGetVersionEnum = typeof VersionAwardRecordsGetVersionEnum[keyof typeof VersionAwardRecordsGetVersionEnum];
/**
 * @export
 */
export const VersionAwardRecordsGetIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Award: 'award',
    AwardImage: 'award.image',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionAwardRecordsGetIncludeEnum = typeof VersionAwardRecordsGetIncludeEnum[keyof typeof VersionAwardRecordsGetIncludeEnum];
/**
 * @export
 */
export const VersionAwardRecordsPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionAwardRecordsPostVersionEnum = typeof VersionAwardRecordsPostVersionEnum[keyof typeof VersionAwardRecordsPostVersionEnum];
/**
 * @export
 */
export const VersionAwardRecordsPostIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Award: 'award',
    AwardImage: 'award.image',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    User: 'user',
    User2: 'user.*'
} as const;
export type VersionAwardRecordsPostIncludeEnum = typeof VersionAwardRecordsPostIncludeEnum[keyof typeof VersionAwardRecordsPostIncludeEnum];
