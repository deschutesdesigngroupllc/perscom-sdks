/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Status,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionCategoriesCategoryAwardsAttachPost200Response,
  VersionCategoriesCategoryAwardsAttachPostRequest,
  VersionCategoriesCategoryAwardsAwardPivotPatch200Response,
  VersionCategoriesCategoryAwardsAwardPivotPatchRequest,
  VersionCategoriesCategoryAwardsDetachDelete200Response,
  VersionCategoriesCategoryAwardsSyncPatch200Response,
  VersionCategoriesCategoryAwardsTogglePatch200Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
  VersionStatusesBatchPatchRequest,
  VersionStatusesBatchPost200Response,
  VersionStatusesBatchPostRequest,
  VersionStatusesGet200Response,
  VersionStatusesPost201Response,
} from '../models/index';
import {
    StatusFromJSON,
    StatusToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionCategoriesCategoryAwardsAttachPost200ResponseFromJSON,
    VersionCategoriesCategoryAwardsAttachPost200ResponseToJSON,
    VersionCategoriesCategoryAwardsAttachPostRequestFromJSON,
    VersionCategoriesCategoryAwardsAttachPostRequestToJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatch200ResponseFromJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatch200ResponseToJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatchRequestFromJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatchRequestToJSON,
    VersionCategoriesCategoryAwardsDetachDelete200ResponseFromJSON,
    VersionCategoriesCategoryAwardsDetachDelete200ResponseToJSON,
    VersionCategoriesCategoryAwardsSyncPatch200ResponseFromJSON,
    VersionCategoriesCategoryAwardsSyncPatch200ResponseToJSON,
    VersionCategoriesCategoryAwardsTogglePatch200ResponseFromJSON,
    VersionCategoriesCategoryAwardsTogglePatch200ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
    VersionStatusesBatchPatchRequestFromJSON,
    VersionStatusesBatchPatchRequestToJSON,
    VersionStatusesBatchPost200ResponseFromJSON,
    VersionStatusesBatchPost200ResponseToJSON,
    VersionStatusesBatchPostRequestFromJSON,
    VersionStatusesBatchPostRequestToJSON,
    VersionStatusesGet200ResponseFromJSON,
    VersionStatusesGet200ResponseToJSON,
    VersionStatusesPost201ResponseFromJSON,
    VersionStatusesPost201ResponseToJSON,
} from '../models/index';

export interface VersionUsersUserStatusRecordsAttachPostRequest {
    version: VersionUsersUserStatusRecordsAttachPostVersionEnum;
    user: number;
    include?: VersionUsersUserStatusRecordsAttachPostIncludeEnum;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

export interface VersionUsersUserStatusRecordsBatchDeleteRequest {
    version: VersionUsersUserStatusRecordsBatchDeleteVersionEnum;
    user: number;
    include?: VersionUsersUserStatusRecordsBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionUsersUserStatusRecordsBatchPatchRequest {
    version: VersionUsersUserStatusRecordsBatchPatchVersionEnum;
    user: number;
    include?: VersionUsersUserStatusRecordsBatchPatchIncludeEnum;
    versionStatusesBatchPatchRequest?: VersionStatusesBatchPatchRequest;
}

export interface VersionUsersUserStatusRecordsBatchPostRequest {
    version: VersionUsersUserStatusRecordsBatchPostVersionEnum;
    user: number;
    include?: VersionUsersUserStatusRecordsBatchPostIncludeEnum;
    versionStatusesBatchPostRequest?: VersionStatusesBatchPostRequest;
}

export interface VersionUsersUserStatusRecordsDetachDeleteRequest {
    version: VersionUsersUserStatusRecordsDetachDeleteVersionEnum;
    user: number;
    include?: VersionUsersUserStatusRecordsDetachDeleteIncludeEnum;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

export interface VersionUsersUserStatusRecordsGetRequest {
    version: VersionUsersUserStatusRecordsGetVersionEnum;
    user: number;
    include?: VersionUsersUserStatusRecordsGetIncludeEnum;
}

export interface VersionUsersUserStatusRecordsPostRequest {
    version: VersionUsersUserStatusRecordsPostVersionEnum;
    user: number;
    include?: VersionUsersUserStatusRecordsPostIncludeEnum;
    status?: Status;
}

export interface VersionUsersUserStatusRecordsStatusRecordDeleteRequest {
    version: VersionUsersUserStatusRecordsStatusRecordDeleteVersionEnum;
    user: number;
    statusRecord: number;
    include?: VersionUsersUserStatusRecordsStatusRecordDeleteIncludeEnum;
}

export interface VersionUsersUserStatusRecordsStatusRecordGetRequest {
    version: VersionUsersUserStatusRecordsStatusRecordGetVersionEnum;
    user: number;
    statusRecord: number;
    include?: VersionUsersUserStatusRecordsStatusRecordGetIncludeEnum;
}

export interface VersionUsersUserStatusRecordsStatusRecordPatchRequest {
    version: VersionUsersUserStatusRecordsStatusRecordPatchVersionEnum;
    user: number;
    statusRecord: number;
    include?: VersionUsersUserStatusRecordsStatusRecordPatchIncludeEnum;
    status?: Status;
}

export interface VersionUsersUserStatusRecordsStatusRecordPivotPatchRequest {
    version: VersionUsersUserStatusRecordsStatusRecordPivotPatchVersionEnum;
    user: number;
    statusRecord: number;
    include?: VersionUsersUserStatusRecordsStatusRecordPivotPatchIncludeEnum;
    versionCategoriesCategoryAwardsAwardPivotPatchRequest?: VersionCategoriesCategoryAwardsAwardPivotPatchRequest;
}

export interface VersionUsersUserStatusRecordsSyncPatchRequest {
    version: VersionUsersUserStatusRecordsSyncPatchVersionEnum;
    user: number;
    include?: VersionUsersUserStatusRecordsSyncPatchIncludeEnum;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

export interface VersionUsersUserStatusRecordsTogglePatchRequest {
    version: VersionUsersUserStatusRecordsTogglePatchVersionEnum;
    user: number;
    include?: VersionUsersUserStatusRecordsTogglePatchIncludeEnum;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

/**
 * 
 */
export class UsersStatusRecordsApi extends runtime.BaseAPI {

    /**
     * Attach statuses
     */
    async versionUsersUserStatusRecordsAttachPostRaw(requestParameters: VersionUsersUserStatusRecordsAttachPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsAttachPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserStatusRecordsAttachPost().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserStatusRecordsAttachPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/status-records/attach`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsAttachPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Attach statuses
     */
    async versionUsersUserStatusRecordsAttachPost(requestParameters: VersionUsersUserStatusRecordsAttachPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsAttachPost200Response> {
        const response = await this.versionUsersUserStatusRecordsAttachPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a batch of statuses
     */
    async versionUsersUserStatusRecordsBatchDeleteRaw(requestParameters: VersionUsersUserStatusRecordsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionStatusesBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserStatusRecordsBatchDelete().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserStatusRecordsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/status-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionStatusesBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of statuses
     */
    async versionUsersUserStatusRecordsBatchDelete(requestParameters: VersionUsersUserStatusRecordsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionStatusesBatchPost200Response> {
        const response = await this.versionUsersUserStatusRecordsBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of statuses
     */
    async versionUsersUserStatusRecordsBatchPatchRaw(requestParameters: VersionUsersUserStatusRecordsBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionStatusesBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserStatusRecordsBatchPatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserStatusRecordsBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/status-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionStatusesBatchPatchRequestToJSON(requestParameters['versionStatusesBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionStatusesBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of statuses
     */
    async versionUsersUserStatusRecordsBatchPatch(requestParameters: VersionUsersUserStatusRecordsBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionStatusesBatchPost200Response> {
        const response = await this.versionUsersUserStatusRecordsBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of statuses
     */
    async versionUsersUserStatusRecordsBatchPostRaw(requestParameters: VersionUsersUserStatusRecordsBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionStatusesBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserStatusRecordsBatchPost().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserStatusRecordsBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/status-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionStatusesBatchPostRequestToJSON(requestParameters['versionStatusesBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionStatusesBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of statuses
     */
    async versionUsersUserStatusRecordsBatchPost(requestParameters: VersionUsersUserStatusRecordsBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionStatusesBatchPost200Response> {
        const response = await this.versionUsersUserStatusRecordsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Detach statuses
     */
    async versionUsersUserStatusRecordsDetachDeleteRaw(requestParameters: VersionUsersUserStatusRecordsDetachDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsDetachDelete200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserStatusRecordsDetachDelete().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserStatusRecordsDetachDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/status-records/detach`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsDetachDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Detach statuses
     */
    async versionUsersUserStatusRecordsDetachDelete(requestParameters: VersionUsersUserStatusRecordsDetachDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsDetachDelete200Response> {
        const response = await this.versionUsersUserStatusRecordsDetachDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of statuses
     */
    async versionUsersUserStatusRecordsGetRaw(requestParameters: VersionUsersUserStatusRecordsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionStatusesGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserStatusRecordsGet().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserStatusRecordsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/status-records`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionStatusesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of statuses
     */
    async versionUsersUserStatusRecordsGet(requestParameters: VersionUsersUserStatusRecordsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionStatusesGet200Response> {
        const response = await this.versionUsersUserStatusRecordsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create status
     */
    async versionUsersUserStatusRecordsPostRaw(requestParameters: VersionUsersUserStatusRecordsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionStatusesPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserStatusRecordsPost().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserStatusRecordsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/status-records`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StatusToJSON(requestParameters['status']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionStatusesPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create status
     */
    async versionUsersUserStatusRecordsPost(requestParameters: VersionUsersUserStatusRecordsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionStatusesPost201Response> {
        const response = await this.versionUsersUserStatusRecordsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete status
     */
    async versionUsersUserStatusRecordsStatusRecordDeleteRaw(requestParameters: VersionUsersUserStatusRecordsStatusRecordDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionStatusesPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserStatusRecordsStatusRecordDelete().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserStatusRecordsStatusRecordDelete().'
            );
        }

        if (requestParameters['statusRecord'] == null) {
            throw new runtime.RequiredError(
                'statusRecord',
                'Required parameter "statusRecord" was null or undefined when calling versionUsersUserStatusRecordsStatusRecordDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/status-records/{status_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"status_record"}}`, encodeURIComponent(String(requestParameters['statusRecord']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionStatusesPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete status
     */
    async versionUsersUserStatusRecordsStatusRecordDelete(requestParameters: VersionUsersUserStatusRecordsStatusRecordDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionStatusesPost201Response> {
        const response = await this.versionUsersUserStatusRecordsStatusRecordDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get status
     */
    async versionUsersUserStatusRecordsStatusRecordGetRaw(requestParameters: VersionUsersUserStatusRecordsStatusRecordGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionStatusesPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserStatusRecordsStatusRecordGet().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserStatusRecordsStatusRecordGet().'
            );
        }

        if (requestParameters['statusRecord'] == null) {
            throw new runtime.RequiredError(
                'statusRecord',
                'Required parameter "statusRecord" was null or undefined when calling versionUsersUserStatusRecordsStatusRecordGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/status-records/{status_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"status_record"}}`, encodeURIComponent(String(requestParameters['statusRecord']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionStatusesPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get status
     */
    async versionUsersUserStatusRecordsStatusRecordGet(requestParameters: VersionUsersUserStatusRecordsStatusRecordGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionStatusesPost201Response> {
        const response = await this.versionUsersUserStatusRecordsStatusRecordGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update status
     */
    async versionUsersUserStatusRecordsStatusRecordPatchRaw(requestParameters: VersionUsersUserStatusRecordsStatusRecordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionStatusesPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserStatusRecordsStatusRecordPatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserStatusRecordsStatusRecordPatch().'
            );
        }

        if (requestParameters['statusRecord'] == null) {
            throw new runtime.RequiredError(
                'statusRecord',
                'Required parameter "statusRecord" was null or undefined when calling versionUsersUserStatusRecordsStatusRecordPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/status-records/{status_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"status_record"}}`, encodeURIComponent(String(requestParameters['statusRecord']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: StatusToJSON(requestParameters['status']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionStatusesPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update status
     */
    async versionUsersUserStatusRecordsStatusRecordPatch(requestParameters: VersionUsersUserStatusRecordsStatusRecordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionStatusesPost201Response> {
        const response = await this.versionUsersUserStatusRecordsStatusRecordPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update pivot
     */
    async versionUsersUserStatusRecordsStatusRecordPivotPatchRaw(requestParameters: VersionUsersUserStatusRecordsStatusRecordPivotPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsAwardPivotPatch200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserStatusRecordsStatusRecordPivotPatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserStatusRecordsStatusRecordPivotPatch().'
            );
        }

        if (requestParameters['statusRecord'] == null) {
            throw new runtime.RequiredError(
                'statusRecord',
                'Required parameter "statusRecord" was null or undefined when calling versionUsersUserStatusRecordsStatusRecordPivotPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/status-records/{status_record}/pivot`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"status_record"}}`, encodeURIComponent(String(requestParameters['statusRecord']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAwardPivotPatchRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAwardPivotPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsAwardPivotPatch200ResponseFromJSON(jsonValue));
    }

    /**
     * Update pivot
     */
    async versionUsersUserStatusRecordsStatusRecordPivotPatch(requestParameters: VersionUsersUserStatusRecordsStatusRecordPivotPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsAwardPivotPatch200Response> {
        const response = await this.versionUsersUserStatusRecordsStatusRecordPivotPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sync statuses
     */
    async versionUsersUserStatusRecordsSyncPatchRaw(requestParameters: VersionUsersUserStatusRecordsSyncPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsSyncPatch200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserStatusRecordsSyncPatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserStatusRecordsSyncPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/status-records/sync`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsSyncPatch200ResponseFromJSON(jsonValue));
    }

    /**
     * Sync statuses
     */
    async versionUsersUserStatusRecordsSyncPatch(requestParameters: VersionUsersUserStatusRecordsSyncPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsSyncPatch200Response> {
        const response = await this.versionUsersUserStatusRecordsSyncPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Toggle statuses
     */
    async versionUsersUserStatusRecordsTogglePatchRaw(requestParameters: VersionUsersUserStatusRecordsTogglePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsTogglePatch200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserStatusRecordsTogglePatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserStatusRecordsTogglePatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/status-records/toggle`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsTogglePatch200ResponseFromJSON(jsonValue));
    }

    /**
     * Toggle statuses
     */
    async versionUsersUserStatusRecordsTogglePatch(requestParameters: VersionUsersUserStatusRecordsTogglePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsTogglePatch200Response> {
        const response = await this.versionUsersUserStatusRecordsTogglePatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionUsersUserStatusRecordsAttachPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserStatusRecordsAttachPostVersionEnum = typeof VersionUsersUserStatusRecordsAttachPostVersionEnum[keyof typeof VersionUsersUserStatusRecordsAttachPostVersionEnum];
/**
 * @export
 */
export const VersionUsersUserStatusRecordsAttachPostIncludeEnum = {
    Record: 'record'
} as const;
export type VersionUsersUserStatusRecordsAttachPostIncludeEnum = typeof VersionUsersUserStatusRecordsAttachPostIncludeEnum[keyof typeof VersionUsersUserStatusRecordsAttachPostIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserStatusRecordsBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserStatusRecordsBatchDeleteVersionEnum = typeof VersionUsersUserStatusRecordsBatchDeleteVersionEnum[keyof typeof VersionUsersUserStatusRecordsBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersUserStatusRecordsBatchDeleteIncludeEnum = {
    Record: 'record'
} as const;
export type VersionUsersUserStatusRecordsBatchDeleteIncludeEnum = typeof VersionUsersUserStatusRecordsBatchDeleteIncludeEnum[keyof typeof VersionUsersUserStatusRecordsBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserStatusRecordsBatchPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserStatusRecordsBatchPatchVersionEnum = typeof VersionUsersUserStatusRecordsBatchPatchVersionEnum[keyof typeof VersionUsersUserStatusRecordsBatchPatchVersionEnum];
/**
 * @export
 */
export const VersionUsersUserStatusRecordsBatchPatchIncludeEnum = {
    Record: 'record'
} as const;
export type VersionUsersUserStatusRecordsBatchPatchIncludeEnum = typeof VersionUsersUserStatusRecordsBatchPatchIncludeEnum[keyof typeof VersionUsersUserStatusRecordsBatchPatchIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserStatusRecordsBatchPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserStatusRecordsBatchPostVersionEnum = typeof VersionUsersUserStatusRecordsBatchPostVersionEnum[keyof typeof VersionUsersUserStatusRecordsBatchPostVersionEnum];
/**
 * @export
 */
export const VersionUsersUserStatusRecordsBatchPostIncludeEnum = {
    Record: 'record'
} as const;
export type VersionUsersUserStatusRecordsBatchPostIncludeEnum = typeof VersionUsersUserStatusRecordsBatchPostIncludeEnum[keyof typeof VersionUsersUserStatusRecordsBatchPostIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserStatusRecordsDetachDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserStatusRecordsDetachDeleteVersionEnum = typeof VersionUsersUserStatusRecordsDetachDeleteVersionEnum[keyof typeof VersionUsersUserStatusRecordsDetachDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersUserStatusRecordsDetachDeleteIncludeEnum = {
    Record: 'record'
} as const;
export type VersionUsersUserStatusRecordsDetachDeleteIncludeEnum = typeof VersionUsersUserStatusRecordsDetachDeleteIncludeEnum[keyof typeof VersionUsersUserStatusRecordsDetachDeleteIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserStatusRecordsGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserStatusRecordsGetVersionEnum = typeof VersionUsersUserStatusRecordsGetVersionEnum[keyof typeof VersionUsersUserStatusRecordsGetVersionEnum];
/**
 * @export
 */
export const VersionUsersUserStatusRecordsGetIncludeEnum = {
    Record: 'record'
} as const;
export type VersionUsersUserStatusRecordsGetIncludeEnum = typeof VersionUsersUserStatusRecordsGetIncludeEnum[keyof typeof VersionUsersUserStatusRecordsGetIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserStatusRecordsPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserStatusRecordsPostVersionEnum = typeof VersionUsersUserStatusRecordsPostVersionEnum[keyof typeof VersionUsersUserStatusRecordsPostVersionEnum];
/**
 * @export
 */
export const VersionUsersUserStatusRecordsPostIncludeEnum = {
    Record: 'record'
} as const;
export type VersionUsersUserStatusRecordsPostIncludeEnum = typeof VersionUsersUserStatusRecordsPostIncludeEnum[keyof typeof VersionUsersUserStatusRecordsPostIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserStatusRecordsStatusRecordDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserStatusRecordsStatusRecordDeleteVersionEnum = typeof VersionUsersUserStatusRecordsStatusRecordDeleteVersionEnum[keyof typeof VersionUsersUserStatusRecordsStatusRecordDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersUserStatusRecordsStatusRecordDeleteIncludeEnum = {
    Record: 'record'
} as const;
export type VersionUsersUserStatusRecordsStatusRecordDeleteIncludeEnum = typeof VersionUsersUserStatusRecordsStatusRecordDeleteIncludeEnum[keyof typeof VersionUsersUserStatusRecordsStatusRecordDeleteIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserStatusRecordsStatusRecordGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserStatusRecordsStatusRecordGetVersionEnum = typeof VersionUsersUserStatusRecordsStatusRecordGetVersionEnum[keyof typeof VersionUsersUserStatusRecordsStatusRecordGetVersionEnum];
/**
 * @export
 */
export const VersionUsersUserStatusRecordsStatusRecordGetIncludeEnum = {
    Record: 'record'
} as const;
export type VersionUsersUserStatusRecordsStatusRecordGetIncludeEnum = typeof VersionUsersUserStatusRecordsStatusRecordGetIncludeEnum[keyof typeof VersionUsersUserStatusRecordsStatusRecordGetIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserStatusRecordsStatusRecordPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserStatusRecordsStatusRecordPatchVersionEnum = typeof VersionUsersUserStatusRecordsStatusRecordPatchVersionEnum[keyof typeof VersionUsersUserStatusRecordsStatusRecordPatchVersionEnum];
/**
 * @export
 */
export const VersionUsersUserStatusRecordsStatusRecordPatchIncludeEnum = {
    Record: 'record'
} as const;
export type VersionUsersUserStatusRecordsStatusRecordPatchIncludeEnum = typeof VersionUsersUserStatusRecordsStatusRecordPatchIncludeEnum[keyof typeof VersionUsersUserStatusRecordsStatusRecordPatchIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserStatusRecordsStatusRecordPivotPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserStatusRecordsStatusRecordPivotPatchVersionEnum = typeof VersionUsersUserStatusRecordsStatusRecordPivotPatchVersionEnum[keyof typeof VersionUsersUserStatusRecordsStatusRecordPivotPatchVersionEnum];
/**
 * @export
 */
export const VersionUsersUserStatusRecordsStatusRecordPivotPatchIncludeEnum = {
    Record: 'record'
} as const;
export type VersionUsersUserStatusRecordsStatusRecordPivotPatchIncludeEnum = typeof VersionUsersUserStatusRecordsStatusRecordPivotPatchIncludeEnum[keyof typeof VersionUsersUserStatusRecordsStatusRecordPivotPatchIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserStatusRecordsSyncPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserStatusRecordsSyncPatchVersionEnum = typeof VersionUsersUserStatusRecordsSyncPatchVersionEnum[keyof typeof VersionUsersUserStatusRecordsSyncPatchVersionEnum];
/**
 * @export
 */
export const VersionUsersUserStatusRecordsSyncPatchIncludeEnum = {
    Record: 'record'
} as const;
export type VersionUsersUserStatusRecordsSyncPatchIncludeEnum = typeof VersionUsersUserStatusRecordsSyncPatchIncludeEnum[keyof typeof VersionUsersUserStatusRecordsSyncPatchIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserStatusRecordsTogglePatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserStatusRecordsTogglePatchVersionEnum = typeof VersionUsersUserStatusRecordsTogglePatchVersionEnum[keyof typeof VersionUsersUserStatusRecordsTogglePatchVersionEnum];
/**
 * @export
 */
export const VersionUsersUserStatusRecordsTogglePatchIncludeEnum = {
    Record: 'record'
} as const;
export type VersionUsersUserStatusRecordsTogglePatchIncludeEnum = typeof VersionUsersUserStatusRecordsTogglePatchIncludeEnum[keyof typeof VersionUsersUserStatusRecordsTogglePatchIncludeEnum];
