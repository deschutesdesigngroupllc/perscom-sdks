/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ServiceRecord,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
  VersionServiceRecordsBatchPatchRequest,
  VersionServiceRecordsBatchPost200Response,
  VersionServiceRecordsBatchPostRequest,
  VersionServiceRecordsGet200Response,
  VersionServiceRecordsPost201Response,
} from '../models/index';
import {
    ServiceRecordFromJSON,
    ServiceRecordToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
    VersionServiceRecordsBatchPatchRequestFromJSON,
    VersionServiceRecordsBatchPatchRequestToJSON,
    VersionServiceRecordsBatchPost200ResponseFromJSON,
    VersionServiceRecordsBatchPost200ResponseToJSON,
    VersionServiceRecordsBatchPostRequestFromJSON,
    VersionServiceRecordsBatchPostRequestToJSON,
    VersionServiceRecordsGet200ResponseFromJSON,
    VersionServiceRecordsGet200ResponseToJSON,
    VersionServiceRecordsPost201ResponseFromJSON,
    VersionServiceRecordsPost201ResponseToJSON,
} from '../models/index';

export interface VersionUsersUserServiceRecordsAssociatePostRequest {
    version: VersionUsersUserServiceRecordsAssociatePostVersionEnum;
    user: number;
    include?: VersionUsersUserServiceRecordsAssociatePostIncludeEnum;
}

export interface VersionUsersUserServiceRecordsBatchDeleteRequest {
    version: VersionUsersUserServiceRecordsBatchDeleteVersionEnum;
    user: number;
    include?: VersionUsersUserServiceRecordsBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionUsersUserServiceRecordsBatchPatchRequest {
    version: VersionUsersUserServiceRecordsBatchPatchVersionEnum;
    user: number;
    include?: VersionUsersUserServiceRecordsBatchPatchIncludeEnum;
    versionServiceRecordsBatchPatchRequest?: VersionServiceRecordsBatchPatchRequest;
}

export interface VersionUsersUserServiceRecordsBatchPostRequest {
    version: VersionUsersUserServiceRecordsBatchPostVersionEnum;
    user: number;
    include?: VersionUsersUserServiceRecordsBatchPostIncludeEnum;
    versionServiceRecordsBatchPostRequest?: VersionServiceRecordsBatchPostRequest;
}

export interface VersionUsersUserServiceRecordsGetRequest {
    version: VersionUsersUserServiceRecordsGetVersionEnum;
    user: number;
    include?: VersionUsersUserServiceRecordsGetIncludeEnum;
}

export interface VersionUsersUserServiceRecordsPostRequest {
    version: VersionUsersUserServiceRecordsPostVersionEnum;
    user: number;
    include?: VersionUsersUserServiceRecordsPostIncludeEnum;
    serviceRecord?: ServiceRecord;
}

export interface VersionUsersUserServiceRecordsServiceRecordDeleteRequest {
    version: VersionUsersUserServiceRecordsServiceRecordDeleteVersionEnum;
    user: number;
    serviceRecord: number;
    include?: VersionUsersUserServiceRecordsServiceRecordDeleteIncludeEnum;
}

export interface VersionUsersUserServiceRecordsServiceRecordDissociateDeleteRequest {
    version: VersionUsersUserServiceRecordsServiceRecordDissociateDeleteVersionEnum;
    user: number;
    serviceRecord: number;
    include?: VersionUsersUserServiceRecordsServiceRecordDissociateDeleteIncludeEnum;
}

export interface VersionUsersUserServiceRecordsServiceRecordGetRequest {
    version: VersionUsersUserServiceRecordsServiceRecordGetVersionEnum;
    user: number;
    serviceRecord: number;
    include?: VersionUsersUserServiceRecordsServiceRecordGetIncludeEnum;
}

export interface VersionUsersUserServiceRecordsServiceRecordPatchRequest {
    version: VersionUsersUserServiceRecordsServiceRecordPatchVersionEnum;
    user: number;
    serviceRecord: number;
    include?: VersionUsersUserServiceRecordsServiceRecordPatchIncludeEnum;
    serviceRecord2?: ServiceRecord;
}

/**
 * 
 */
export class UsersServiceRecordsApi extends runtime.BaseAPI {

    /**
     * Associate service record with user
     */
    async versionUsersUserServiceRecordsAssociatePostRaw(requestParameters: VersionUsersUserServiceRecordsAssociatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionServiceRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserServiceRecordsAssociatePost().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserServiceRecordsAssociatePost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/service-records/associate`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionServiceRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Associate service record with user
     */
    async versionUsersUserServiceRecordsAssociatePost(requestParameters: VersionUsersUserServiceRecordsAssociatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionServiceRecordsPost201Response> {
        const response = await this.versionUsersUserServiceRecordsAssociatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a batch of service records
     */
    async versionUsersUserServiceRecordsBatchDeleteRaw(requestParameters: VersionUsersUserServiceRecordsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionServiceRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserServiceRecordsBatchDelete().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserServiceRecordsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/service-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionServiceRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of service records
     */
    async versionUsersUserServiceRecordsBatchDelete(requestParameters: VersionUsersUserServiceRecordsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionServiceRecordsBatchPost200Response> {
        const response = await this.versionUsersUserServiceRecordsBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of service records
     */
    async versionUsersUserServiceRecordsBatchPatchRaw(requestParameters: VersionUsersUserServiceRecordsBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionServiceRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserServiceRecordsBatchPatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserServiceRecordsBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/service-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionServiceRecordsBatchPatchRequestToJSON(requestParameters['versionServiceRecordsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionServiceRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of service records
     */
    async versionUsersUserServiceRecordsBatchPatch(requestParameters: VersionUsersUserServiceRecordsBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionServiceRecordsBatchPost200Response> {
        const response = await this.versionUsersUserServiceRecordsBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of service records
     */
    async versionUsersUserServiceRecordsBatchPostRaw(requestParameters: VersionUsersUserServiceRecordsBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionServiceRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserServiceRecordsBatchPost().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserServiceRecordsBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/service-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionServiceRecordsBatchPostRequestToJSON(requestParameters['versionServiceRecordsBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionServiceRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of service records
     */
    async versionUsersUserServiceRecordsBatchPost(requestParameters: VersionUsersUserServiceRecordsBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionServiceRecordsBatchPost200Response> {
        const response = await this.versionUsersUserServiceRecordsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of service records
     */
    async versionUsersUserServiceRecordsGetRaw(requestParameters: VersionUsersUserServiceRecordsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionServiceRecordsGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserServiceRecordsGet().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserServiceRecordsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/service-records`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionServiceRecordsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of service records
     */
    async versionUsersUserServiceRecordsGet(requestParameters: VersionUsersUserServiceRecordsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionServiceRecordsGet200Response> {
        const response = await this.versionUsersUserServiceRecordsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create service record
     */
    async versionUsersUserServiceRecordsPostRaw(requestParameters: VersionUsersUserServiceRecordsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionServiceRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserServiceRecordsPost().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserServiceRecordsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/service-records`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceRecordToJSON(requestParameters['serviceRecord']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionServiceRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create service record
     */
    async versionUsersUserServiceRecordsPost(requestParameters: VersionUsersUserServiceRecordsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionServiceRecordsPost201Response> {
        const response = await this.versionUsersUserServiceRecordsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete service record
     */
    async versionUsersUserServiceRecordsServiceRecordDeleteRaw(requestParameters: VersionUsersUserServiceRecordsServiceRecordDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionServiceRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserServiceRecordsServiceRecordDelete().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserServiceRecordsServiceRecordDelete().'
            );
        }

        if (requestParameters['serviceRecord'] == null) {
            throw new runtime.RequiredError(
                'serviceRecord',
                'Required parameter "serviceRecord" was null or undefined when calling versionUsersUserServiceRecordsServiceRecordDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/service-records/{service_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"service_record"}}`, encodeURIComponent(String(requestParameters['serviceRecord']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionServiceRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete service record
     */
    async versionUsersUserServiceRecordsServiceRecordDelete(requestParameters: VersionUsersUserServiceRecordsServiceRecordDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionServiceRecordsPost201Response> {
        const response = await this.versionUsersUserServiceRecordsServiceRecordDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Dissociate service record from user
     */
    async versionUsersUserServiceRecordsServiceRecordDissociateDeleteRaw(requestParameters: VersionUsersUserServiceRecordsServiceRecordDissociateDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionServiceRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserServiceRecordsServiceRecordDissociateDelete().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserServiceRecordsServiceRecordDissociateDelete().'
            );
        }

        if (requestParameters['serviceRecord'] == null) {
            throw new runtime.RequiredError(
                'serviceRecord',
                'Required parameter "serviceRecord" was null or undefined when calling versionUsersUserServiceRecordsServiceRecordDissociateDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/service-records/{service_record}/dissociate`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"service_record"}}`, encodeURIComponent(String(requestParameters['serviceRecord']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionServiceRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Dissociate service record from user
     */
    async versionUsersUserServiceRecordsServiceRecordDissociateDelete(requestParameters: VersionUsersUserServiceRecordsServiceRecordDissociateDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionServiceRecordsPost201Response> {
        const response = await this.versionUsersUserServiceRecordsServiceRecordDissociateDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get service record
     */
    async versionUsersUserServiceRecordsServiceRecordGetRaw(requestParameters: VersionUsersUserServiceRecordsServiceRecordGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionServiceRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserServiceRecordsServiceRecordGet().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserServiceRecordsServiceRecordGet().'
            );
        }

        if (requestParameters['serviceRecord'] == null) {
            throw new runtime.RequiredError(
                'serviceRecord',
                'Required parameter "serviceRecord" was null or undefined when calling versionUsersUserServiceRecordsServiceRecordGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/service-records/{service_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"service_record"}}`, encodeURIComponent(String(requestParameters['serviceRecord']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionServiceRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get service record
     */
    async versionUsersUserServiceRecordsServiceRecordGet(requestParameters: VersionUsersUserServiceRecordsServiceRecordGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionServiceRecordsPost201Response> {
        const response = await this.versionUsersUserServiceRecordsServiceRecordGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update service record
     */
    async versionUsersUserServiceRecordsServiceRecordPatchRaw(requestParameters: VersionUsersUserServiceRecordsServiceRecordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionServiceRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserServiceRecordsServiceRecordPatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserServiceRecordsServiceRecordPatch().'
            );
        }

        if (requestParameters['serviceRecord'] == null) {
            throw new runtime.RequiredError(
                'serviceRecord',
                'Required parameter "serviceRecord" was null or undefined when calling versionUsersUserServiceRecordsServiceRecordPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/service-records/{service_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"service_record"}}`, encodeURIComponent(String(requestParameters['serviceRecord']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceRecordToJSON(requestParameters['serviceRecord2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionServiceRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update service record
     */
    async versionUsersUserServiceRecordsServiceRecordPatch(requestParameters: VersionUsersUserServiceRecordsServiceRecordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionServiceRecordsPost201Response> {
        const response = await this.versionUsersUserServiceRecordsServiceRecordPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionUsersUserServiceRecordsAssociatePostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserServiceRecordsAssociatePostVersionEnum = typeof VersionUsersUserServiceRecordsAssociatePostVersionEnum[keyof typeof VersionUsersUserServiceRecordsAssociatePostVersionEnum];
/**
 * @export
 */
export const VersionUsersUserServiceRecordsAssociatePostIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document'
} as const;
export type VersionUsersUserServiceRecordsAssociatePostIncludeEnum = typeof VersionUsersUserServiceRecordsAssociatePostIncludeEnum[keyof typeof VersionUsersUserServiceRecordsAssociatePostIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserServiceRecordsBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserServiceRecordsBatchDeleteVersionEnum = typeof VersionUsersUserServiceRecordsBatchDeleteVersionEnum[keyof typeof VersionUsersUserServiceRecordsBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersUserServiceRecordsBatchDeleteIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document'
} as const;
export type VersionUsersUserServiceRecordsBatchDeleteIncludeEnum = typeof VersionUsersUserServiceRecordsBatchDeleteIncludeEnum[keyof typeof VersionUsersUserServiceRecordsBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserServiceRecordsBatchPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserServiceRecordsBatchPatchVersionEnum = typeof VersionUsersUserServiceRecordsBatchPatchVersionEnum[keyof typeof VersionUsersUserServiceRecordsBatchPatchVersionEnum];
/**
 * @export
 */
export const VersionUsersUserServiceRecordsBatchPatchIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document'
} as const;
export type VersionUsersUserServiceRecordsBatchPatchIncludeEnum = typeof VersionUsersUserServiceRecordsBatchPatchIncludeEnum[keyof typeof VersionUsersUserServiceRecordsBatchPatchIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserServiceRecordsBatchPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserServiceRecordsBatchPostVersionEnum = typeof VersionUsersUserServiceRecordsBatchPostVersionEnum[keyof typeof VersionUsersUserServiceRecordsBatchPostVersionEnum];
/**
 * @export
 */
export const VersionUsersUserServiceRecordsBatchPostIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document'
} as const;
export type VersionUsersUserServiceRecordsBatchPostIncludeEnum = typeof VersionUsersUserServiceRecordsBatchPostIncludeEnum[keyof typeof VersionUsersUserServiceRecordsBatchPostIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserServiceRecordsGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserServiceRecordsGetVersionEnum = typeof VersionUsersUserServiceRecordsGetVersionEnum[keyof typeof VersionUsersUserServiceRecordsGetVersionEnum];
/**
 * @export
 */
export const VersionUsersUserServiceRecordsGetIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document'
} as const;
export type VersionUsersUserServiceRecordsGetIncludeEnum = typeof VersionUsersUserServiceRecordsGetIncludeEnum[keyof typeof VersionUsersUserServiceRecordsGetIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserServiceRecordsPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserServiceRecordsPostVersionEnum = typeof VersionUsersUserServiceRecordsPostVersionEnum[keyof typeof VersionUsersUserServiceRecordsPostVersionEnum];
/**
 * @export
 */
export const VersionUsersUserServiceRecordsPostIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document'
} as const;
export type VersionUsersUserServiceRecordsPostIncludeEnum = typeof VersionUsersUserServiceRecordsPostIncludeEnum[keyof typeof VersionUsersUserServiceRecordsPostIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserServiceRecordsServiceRecordDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserServiceRecordsServiceRecordDeleteVersionEnum = typeof VersionUsersUserServiceRecordsServiceRecordDeleteVersionEnum[keyof typeof VersionUsersUserServiceRecordsServiceRecordDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersUserServiceRecordsServiceRecordDeleteIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document'
} as const;
export type VersionUsersUserServiceRecordsServiceRecordDeleteIncludeEnum = typeof VersionUsersUserServiceRecordsServiceRecordDeleteIncludeEnum[keyof typeof VersionUsersUserServiceRecordsServiceRecordDeleteIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserServiceRecordsServiceRecordDissociateDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserServiceRecordsServiceRecordDissociateDeleteVersionEnum = typeof VersionUsersUserServiceRecordsServiceRecordDissociateDeleteVersionEnum[keyof typeof VersionUsersUserServiceRecordsServiceRecordDissociateDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersUserServiceRecordsServiceRecordDissociateDeleteIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document'
} as const;
export type VersionUsersUserServiceRecordsServiceRecordDissociateDeleteIncludeEnum = typeof VersionUsersUserServiceRecordsServiceRecordDissociateDeleteIncludeEnum[keyof typeof VersionUsersUserServiceRecordsServiceRecordDissociateDeleteIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserServiceRecordsServiceRecordGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserServiceRecordsServiceRecordGetVersionEnum = typeof VersionUsersUserServiceRecordsServiceRecordGetVersionEnum[keyof typeof VersionUsersUserServiceRecordsServiceRecordGetVersionEnum];
/**
 * @export
 */
export const VersionUsersUserServiceRecordsServiceRecordGetIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document'
} as const;
export type VersionUsersUserServiceRecordsServiceRecordGetIncludeEnum = typeof VersionUsersUserServiceRecordsServiceRecordGetIncludeEnum[keyof typeof VersionUsersUserServiceRecordsServiceRecordGetIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserServiceRecordsServiceRecordPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserServiceRecordsServiceRecordPatchVersionEnum = typeof VersionUsersUserServiceRecordsServiceRecordPatchVersionEnum[keyof typeof VersionUsersUserServiceRecordsServiceRecordPatchVersionEnum];
/**
 * @export
 */
export const VersionUsersUserServiceRecordsServiceRecordPatchIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document'
} as const;
export type VersionUsersUserServiceRecordsServiceRecordPatchIncludeEnum = typeof VersionUsersUserServiceRecordsServiceRecordPatchIncludeEnum[keyof typeof VersionUsersUserServiceRecordsServiceRecordPatchIncludeEnum];
