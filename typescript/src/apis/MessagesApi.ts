/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Message,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
  VersionMessagesBatchPatchRequest,
  VersionMessagesBatchPost200Response,
  VersionMessagesBatchPostRequest,
  VersionMessagesGet200Response,
  VersionMessagesPost201Response,
} from '../models/index';
import {
    MessageFromJSON,
    MessageToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
    VersionMessagesBatchPatchRequestFromJSON,
    VersionMessagesBatchPatchRequestToJSON,
    VersionMessagesBatchPost200ResponseFromJSON,
    VersionMessagesBatchPost200ResponseToJSON,
    VersionMessagesBatchPostRequestFromJSON,
    VersionMessagesBatchPostRequestToJSON,
    VersionMessagesGet200ResponseFromJSON,
    VersionMessagesGet200ResponseToJSON,
    VersionMessagesPost201ResponseFromJSON,
    VersionMessagesPost201ResponseToJSON,
} from '../models/index';

export interface VersionMessagesBatchDeleteRequest {
    version: VersionMessagesBatchDeleteVersionEnum;
    include?: VersionMessagesBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionMessagesBatchPatchOperationRequest {
    version: VersionMessagesBatchPatchOperationVersionEnum;
    include?: VersionMessagesBatchPatchOperationIncludeEnum;
    versionMessagesBatchPatchRequest?: VersionMessagesBatchPatchRequest;
}

export interface VersionMessagesBatchPostOperationRequest {
    version: VersionMessagesBatchPostOperationVersionEnum;
    include?: VersionMessagesBatchPostOperationIncludeEnum;
    versionMessagesBatchPostRequest?: VersionMessagesBatchPostRequest;
}

export interface VersionMessagesGetRequest {
    version: VersionMessagesGetVersionEnum;
    include?: VersionMessagesGetIncludeEnum;
}

export interface VersionMessagesMessageDeleteRequest {
    version: VersionMessagesMessageDeleteVersionEnum;
    message: number;
    include?: VersionMessagesMessageDeleteIncludeEnum;
}

export interface VersionMessagesMessageGetRequest {
    version: VersionMessagesMessageGetVersionEnum;
    message: number;
    include?: VersionMessagesMessageGetIncludeEnum;
}

export interface VersionMessagesMessagePatchRequest {
    version: VersionMessagesMessagePatchVersionEnum;
    message: number;
    include?: VersionMessagesMessagePatchIncludeEnum;
    message2?: Message;
}

export interface VersionMessagesPostRequest {
    version: VersionMessagesPostVersionEnum;
    include?: VersionMessagesPostIncludeEnum;
    message?: Message;
}

/**
 * 
 */
export class MessagesApi extends runtime.BaseAPI {

    /**
     * Delete a batch of messages
     */
    async versionMessagesBatchDeleteRaw(requestParameters: VersionMessagesBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionMessagesBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionMessagesBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/messages/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionMessagesBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of messages
     */
    async versionMessagesBatchDelete(requestParameters: VersionMessagesBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionMessagesBatchPost200Response> {
        const response = await this.versionMessagesBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of messages
     */
    async versionMessagesBatchPatchRaw(requestParameters: VersionMessagesBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionMessagesBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionMessagesBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/messages/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionMessagesBatchPatchRequestToJSON(requestParameters['versionMessagesBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionMessagesBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of messages
     */
    async versionMessagesBatchPatch(requestParameters: VersionMessagesBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionMessagesBatchPost200Response> {
        const response = await this.versionMessagesBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of messages
     */
    async versionMessagesBatchPostRaw(requestParameters: VersionMessagesBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionMessagesBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionMessagesBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/messages/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionMessagesBatchPostRequestToJSON(requestParameters['versionMessagesBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionMessagesBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of messages
     */
    async versionMessagesBatchPost(requestParameters: VersionMessagesBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionMessagesBatchPost200Response> {
        const response = await this.versionMessagesBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of messages
     */
    async versionMessagesGetRaw(requestParameters: VersionMessagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionMessagesGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionMessagesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/messages`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionMessagesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of messages
     */
    async versionMessagesGet(requestParameters: VersionMessagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionMessagesGet200Response> {
        const response = await this.versionMessagesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete message
     */
    async versionMessagesMessageDeleteRaw(requestParameters: VersionMessagesMessageDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionMessagesPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionMessagesMessageDelete().'
            );
        }

        if (requestParameters['message'] == null) {
            throw new runtime.RequiredError(
                'message',
                'Required parameter "message" was null or undefined when calling versionMessagesMessageDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/messages/{message}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"message"}}`, encodeURIComponent(String(requestParameters['message']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionMessagesPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete message
     */
    async versionMessagesMessageDelete(requestParameters: VersionMessagesMessageDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionMessagesPost201Response> {
        const response = await this.versionMessagesMessageDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get message
     */
    async versionMessagesMessageGetRaw(requestParameters: VersionMessagesMessageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionMessagesPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionMessagesMessageGet().'
            );
        }

        if (requestParameters['message'] == null) {
            throw new runtime.RequiredError(
                'message',
                'Required parameter "message" was null or undefined when calling versionMessagesMessageGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/messages/{message}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"message"}}`, encodeURIComponent(String(requestParameters['message']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionMessagesPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get message
     */
    async versionMessagesMessageGet(requestParameters: VersionMessagesMessageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionMessagesPost201Response> {
        const response = await this.versionMessagesMessageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update message
     */
    async versionMessagesMessagePatchRaw(requestParameters: VersionMessagesMessagePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionMessagesPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionMessagesMessagePatch().'
            );
        }

        if (requestParameters['message'] == null) {
            throw new runtime.RequiredError(
                'message',
                'Required parameter "message" was null or undefined when calling versionMessagesMessagePatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/messages/{message}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"message"}}`, encodeURIComponent(String(requestParameters['message']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: MessageToJSON(requestParameters['message2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionMessagesPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update message
     */
    async versionMessagesMessagePatch(requestParameters: VersionMessagesMessagePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionMessagesPost201Response> {
        const response = await this.versionMessagesMessagePatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create message
     */
    async versionMessagesPostRaw(requestParameters: VersionMessagesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionMessagesPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionMessagesPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/messages`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MessageToJSON(requestParameters['message']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionMessagesPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create message
     */
    async versionMessagesPost(requestParameters: VersionMessagesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionMessagesPost201Response> {
        const response = await this.versionMessagesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionMessagesBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionMessagesBatchDeleteVersionEnum = typeof VersionMessagesBatchDeleteVersionEnum[keyof typeof VersionMessagesBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionMessagesBatchDeleteIncludeEnum = {
    Schedule: 'schedule'
} as const;
export type VersionMessagesBatchDeleteIncludeEnum = typeof VersionMessagesBatchDeleteIncludeEnum[keyof typeof VersionMessagesBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionMessagesBatchPatchOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionMessagesBatchPatchOperationVersionEnum = typeof VersionMessagesBatchPatchOperationVersionEnum[keyof typeof VersionMessagesBatchPatchOperationVersionEnum];
/**
 * @export
 */
export const VersionMessagesBatchPatchOperationIncludeEnum = {
    Schedule: 'schedule'
} as const;
export type VersionMessagesBatchPatchOperationIncludeEnum = typeof VersionMessagesBatchPatchOperationIncludeEnum[keyof typeof VersionMessagesBatchPatchOperationIncludeEnum];
/**
 * @export
 */
export const VersionMessagesBatchPostOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionMessagesBatchPostOperationVersionEnum = typeof VersionMessagesBatchPostOperationVersionEnum[keyof typeof VersionMessagesBatchPostOperationVersionEnum];
/**
 * @export
 */
export const VersionMessagesBatchPostOperationIncludeEnum = {
    Schedule: 'schedule'
} as const;
export type VersionMessagesBatchPostOperationIncludeEnum = typeof VersionMessagesBatchPostOperationIncludeEnum[keyof typeof VersionMessagesBatchPostOperationIncludeEnum];
/**
 * @export
 */
export const VersionMessagesGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionMessagesGetVersionEnum = typeof VersionMessagesGetVersionEnum[keyof typeof VersionMessagesGetVersionEnum];
/**
 * @export
 */
export const VersionMessagesGetIncludeEnum = {
    Schedule: 'schedule'
} as const;
export type VersionMessagesGetIncludeEnum = typeof VersionMessagesGetIncludeEnum[keyof typeof VersionMessagesGetIncludeEnum];
/**
 * @export
 */
export const VersionMessagesMessageDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionMessagesMessageDeleteVersionEnum = typeof VersionMessagesMessageDeleteVersionEnum[keyof typeof VersionMessagesMessageDeleteVersionEnum];
/**
 * @export
 */
export const VersionMessagesMessageDeleteIncludeEnum = {
    Schedule: 'schedule'
} as const;
export type VersionMessagesMessageDeleteIncludeEnum = typeof VersionMessagesMessageDeleteIncludeEnum[keyof typeof VersionMessagesMessageDeleteIncludeEnum];
/**
 * @export
 */
export const VersionMessagesMessageGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionMessagesMessageGetVersionEnum = typeof VersionMessagesMessageGetVersionEnum[keyof typeof VersionMessagesMessageGetVersionEnum];
/**
 * @export
 */
export const VersionMessagesMessageGetIncludeEnum = {
    Schedule: 'schedule'
} as const;
export type VersionMessagesMessageGetIncludeEnum = typeof VersionMessagesMessageGetIncludeEnum[keyof typeof VersionMessagesMessageGetIncludeEnum];
/**
 * @export
 */
export const VersionMessagesMessagePatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionMessagesMessagePatchVersionEnum = typeof VersionMessagesMessagePatchVersionEnum[keyof typeof VersionMessagesMessagePatchVersionEnum];
/**
 * @export
 */
export const VersionMessagesMessagePatchIncludeEnum = {
    Schedule: 'schedule'
} as const;
export type VersionMessagesMessagePatchIncludeEnum = typeof VersionMessagesMessagePatchIncludeEnum[keyof typeof VersionMessagesMessagePatchIncludeEnum];
/**
 * @export
 */
export const VersionMessagesPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionMessagesPostVersionEnum = typeof VersionMessagesPostVersionEnum[keyof typeof VersionMessagesPostVersionEnum];
/**
 * @export
 */
export const VersionMessagesPostIncludeEnum = {
    Schedule: 'schedule'
} as const;
export type VersionMessagesPostIncludeEnum = typeof VersionMessagesPostIncludeEnum[keyof typeof VersionMessagesPostIncludeEnum];
