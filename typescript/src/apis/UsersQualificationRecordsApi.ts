/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  QualificationRecord,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
  VersionQualificationRecordsBatchPatchRequest,
  VersionQualificationRecordsBatchPost200Response,
  VersionQualificationRecordsBatchPostRequest,
  VersionQualificationRecordsGet200Response,
  VersionQualificationRecordsPost201Response,
} from '../models/index';
import {
    QualificationRecordFromJSON,
    QualificationRecordToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
    VersionQualificationRecordsBatchPatchRequestFromJSON,
    VersionQualificationRecordsBatchPatchRequestToJSON,
    VersionQualificationRecordsBatchPost200ResponseFromJSON,
    VersionQualificationRecordsBatchPost200ResponseToJSON,
    VersionQualificationRecordsBatchPostRequestFromJSON,
    VersionQualificationRecordsBatchPostRequestToJSON,
    VersionQualificationRecordsGet200ResponseFromJSON,
    VersionQualificationRecordsGet200ResponseToJSON,
    VersionQualificationRecordsPost201ResponseFromJSON,
    VersionQualificationRecordsPost201ResponseToJSON,
} from '../models/index';

export interface VersionUsersUserQualificationRecordsAssociatePostRequest {
    version: VersionUsersUserQualificationRecordsAssociatePostVersionEnum;
    user: number;
    include?: VersionUsersUserQualificationRecordsAssociatePostIncludeEnum;
}

export interface VersionUsersUserQualificationRecordsBatchDeleteRequest {
    version: VersionUsersUserQualificationRecordsBatchDeleteVersionEnum;
    user: number;
    include?: VersionUsersUserQualificationRecordsBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionUsersUserQualificationRecordsBatchPatchRequest {
    version: VersionUsersUserQualificationRecordsBatchPatchVersionEnum;
    user: number;
    include?: VersionUsersUserQualificationRecordsBatchPatchIncludeEnum;
    versionQualificationRecordsBatchPatchRequest?: VersionQualificationRecordsBatchPatchRequest;
}

export interface VersionUsersUserQualificationRecordsBatchPostRequest {
    version: VersionUsersUserQualificationRecordsBatchPostVersionEnum;
    user: number;
    include?: VersionUsersUserQualificationRecordsBatchPostIncludeEnum;
    versionQualificationRecordsBatchPostRequest?: VersionQualificationRecordsBatchPostRequest;
}

export interface VersionUsersUserQualificationRecordsGetRequest {
    version: VersionUsersUserQualificationRecordsGetVersionEnum;
    user: number;
    include?: VersionUsersUserQualificationRecordsGetIncludeEnum;
}

export interface VersionUsersUserQualificationRecordsPostRequest {
    version: VersionUsersUserQualificationRecordsPostVersionEnum;
    user: number;
    include?: VersionUsersUserQualificationRecordsPostIncludeEnum;
    qualificationRecord?: QualificationRecord;
}

export interface VersionUsersUserQualificationRecordsQualificationRecordDeleteRequest {
    version: VersionUsersUserQualificationRecordsQualificationRecordDeleteVersionEnum;
    user: number;
    qualificationRecord: number;
    include?: VersionUsersUserQualificationRecordsQualificationRecordDeleteIncludeEnum;
}

export interface VersionUsersUserQualificationRecordsQualificationRecordDissociateDeleteRequest {
    version: VersionUsersUserQualificationRecordsQualificationRecordDissociateDeleteVersionEnum;
    user: number;
    qualificationRecord: number;
    include?: VersionUsersUserQualificationRecordsQualificationRecordDissociateDeleteIncludeEnum;
}

export interface VersionUsersUserQualificationRecordsQualificationRecordGetRequest {
    version: VersionUsersUserQualificationRecordsQualificationRecordGetVersionEnum;
    user: number;
    qualificationRecord: number;
    include?: VersionUsersUserQualificationRecordsQualificationRecordGetIncludeEnum;
}

export interface VersionUsersUserQualificationRecordsQualificationRecordPatchRequest {
    version: VersionUsersUserQualificationRecordsQualificationRecordPatchVersionEnum;
    user: number;
    qualificationRecord: number;
    include?: VersionUsersUserQualificationRecordsQualificationRecordPatchIncludeEnum;
    qualificationRecord2?: QualificationRecord;
}

/**
 * 
 */
export class UsersQualificationRecordsApi extends runtime.BaseAPI {

    /**
     * Associate qualification record with user
     */
    async versionUsersUserQualificationRecordsAssociatePostRaw(requestParameters: VersionUsersUserQualificationRecordsAssociatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionQualificationRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserQualificationRecordsAssociatePost().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserQualificationRecordsAssociatePost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/qualification-records/associate`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionQualificationRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Associate qualification record with user
     */
    async versionUsersUserQualificationRecordsAssociatePost(requestParameters: VersionUsersUserQualificationRecordsAssociatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionQualificationRecordsPost201Response> {
        const response = await this.versionUsersUserQualificationRecordsAssociatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a batch of qualification records
     */
    async versionUsersUserQualificationRecordsBatchDeleteRaw(requestParameters: VersionUsersUserQualificationRecordsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionQualificationRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserQualificationRecordsBatchDelete().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserQualificationRecordsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/qualification-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionQualificationRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of qualification records
     */
    async versionUsersUserQualificationRecordsBatchDelete(requestParameters: VersionUsersUserQualificationRecordsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionQualificationRecordsBatchPost200Response> {
        const response = await this.versionUsersUserQualificationRecordsBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of qualification records
     */
    async versionUsersUserQualificationRecordsBatchPatchRaw(requestParameters: VersionUsersUserQualificationRecordsBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionQualificationRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserQualificationRecordsBatchPatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserQualificationRecordsBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/qualification-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionQualificationRecordsBatchPatchRequestToJSON(requestParameters['versionQualificationRecordsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionQualificationRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of qualification records
     */
    async versionUsersUserQualificationRecordsBatchPatch(requestParameters: VersionUsersUserQualificationRecordsBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionQualificationRecordsBatchPost200Response> {
        const response = await this.versionUsersUserQualificationRecordsBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of qualification records
     */
    async versionUsersUserQualificationRecordsBatchPostRaw(requestParameters: VersionUsersUserQualificationRecordsBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionQualificationRecordsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserQualificationRecordsBatchPost().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserQualificationRecordsBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/qualification-records/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionQualificationRecordsBatchPostRequestToJSON(requestParameters['versionQualificationRecordsBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionQualificationRecordsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of qualification records
     */
    async versionUsersUserQualificationRecordsBatchPost(requestParameters: VersionUsersUserQualificationRecordsBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionQualificationRecordsBatchPost200Response> {
        const response = await this.versionUsersUserQualificationRecordsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of qualification records
     */
    async versionUsersUserQualificationRecordsGetRaw(requestParameters: VersionUsersUserQualificationRecordsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionQualificationRecordsGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserQualificationRecordsGet().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserQualificationRecordsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/qualification-records`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionQualificationRecordsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of qualification records
     */
    async versionUsersUserQualificationRecordsGet(requestParameters: VersionUsersUserQualificationRecordsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionQualificationRecordsGet200Response> {
        const response = await this.versionUsersUserQualificationRecordsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create qualification record
     */
    async versionUsersUserQualificationRecordsPostRaw(requestParameters: VersionUsersUserQualificationRecordsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionQualificationRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserQualificationRecordsPost().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserQualificationRecordsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/qualification-records`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QualificationRecordToJSON(requestParameters['qualificationRecord']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionQualificationRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create qualification record
     */
    async versionUsersUserQualificationRecordsPost(requestParameters: VersionUsersUserQualificationRecordsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionQualificationRecordsPost201Response> {
        const response = await this.versionUsersUserQualificationRecordsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete qualification record
     */
    async versionUsersUserQualificationRecordsQualificationRecordDeleteRaw(requestParameters: VersionUsersUserQualificationRecordsQualificationRecordDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionQualificationRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserQualificationRecordsQualificationRecordDelete().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserQualificationRecordsQualificationRecordDelete().'
            );
        }

        if (requestParameters['qualificationRecord'] == null) {
            throw new runtime.RequiredError(
                'qualificationRecord',
                'Required parameter "qualificationRecord" was null or undefined when calling versionUsersUserQualificationRecordsQualificationRecordDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/qualification-records/{qualification_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"qualification_record"}}`, encodeURIComponent(String(requestParameters['qualificationRecord']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionQualificationRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete qualification record
     */
    async versionUsersUserQualificationRecordsQualificationRecordDelete(requestParameters: VersionUsersUserQualificationRecordsQualificationRecordDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionQualificationRecordsPost201Response> {
        const response = await this.versionUsersUserQualificationRecordsQualificationRecordDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Dissociate qualification record from user
     */
    async versionUsersUserQualificationRecordsQualificationRecordDissociateDeleteRaw(requestParameters: VersionUsersUserQualificationRecordsQualificationRecordDissociateDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionQualificationRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserQualificationRecordsQualificationRecordDissociateDelete().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserQualificationRecordsQualificationRecordDissociateDelete().'
            );
        }

        if (requestParameters['qualificationRecord'] == null) {
            throw new runtime.RequiredError(
                'qualificationRecord',
                'Required parameter "qualificationRecord" was null or undefined when calling versionUsersUserQualificationRecordsQualificationRecordDissociateDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/qualification-records/{qualification_record}/dissociate`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"qualification_record"}}`, encodeURIComponent(String(requestParameters['qualificationRecord']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionQualificationRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Dissociate qualification record from user
     */
    async versionUsersUserQualificationRecordsQualificationRecordDissociateDelete(requestParameters: VersionUsersUserQualificationRecordsQualificationRecordDissociateDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionQualificationRecordsPost201Response> {
        const response = await this.versionUsersUserQualificationRecordsQualificationRecordDissociateDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get qualification record
     */
    async versionUsersUserQualificationRecordsQualificationRecordGetRaw(requestParameters: VersionUsersUserQualificationRecordsQualificationRecordGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionQualificationRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserQualificationRecordsQualificationRecordGet().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserQualificationRecordsQualificationRecordGet().'
            );
        }

        if (requestParameters['qualificationRecord'] == null) {
            throw new runtime.RequiredError(
                'qualificationRecord',
                'Required parameter "qualificationRecord" was null or undefined when calling versionUsersUserQualificationRecordsQualificationRecordGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/qualification-records/{qualification_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"qualification_record"}}`, encodeURIComponent(String(requestParameters['qualificationRecord']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionQualificationRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get qualification record
     */
    async versionUsersUserQualificationRecordsQualificationRecordGet(requestParameters: VersionUsersUserQualificationRecordsQualificationRecordGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionQualificationRecordsPost201Response> {
        const response = await this.versionUsersUserQualificationRecordsQualificationRecordGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update qualification record
     */
    async versionUsersUserQualificationRecordsQualificationRecordPatchRaw(requestParameters: VersionUsersUserQualificationRecordsQualificationRecordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionQualificationRecordsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserQualificationRecordsQualificationRecordPatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserQualificationRecordsQualificationRecordPatch().'
            );
        }

        if (requestParameters['qualificationRecord'] == null) {
            throw new runtime.RequiredError(
                'qualificationRecord',
                'Required parameter "qualificationRecord" was null or undefined when calling versionUsersUserQualificationRecordsQualificationRecordPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/qualification-records/{qualification_record}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"qualification_record"}}`, encodeURIComponent(String(requestParameters['qualificationRecord']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: QualificationRecordToJSON(requestParameters['qualificationRecord2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionQualificationRecordsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update qualification record
     */
    async versionUsersUserQualificationRecordsQualificationRecordPatch(requestParameters: VersionUsersUserQualificationRecordsQualificationRecordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionQualificationRecordsPost201Response> {
        const response = await this.versionUsersUserQualificationRecordsQualificationRecordPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionUsersUserQualificationRecordsAssociatePostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserQualificationRecordsAssociatePostVersionEnum = typeof VersionUsersUserQualificationRecordsAssociatePostVersionEnum[keyof typeof VersionUsersUserQualificationRecordsAssociatePostVersionEnum];
/**
 * @export
 */
export const VersionUsersUserQualificationRecordsAssociatePostIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Qualification: 'qualification',
    QualificationImage: 'qualification.image'
} as const;
export type VersionUsersUserQualificationRecordsAssociatePostIncludeEnum = typeof VersionUsersUserQualificationRecordsAssociatePostIncludeEnum[keyof typeof VersionUsersUserQualificationRecordsAssociatePostIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserQualificationRecordsBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserQualificationRecordsBatchDeleteVersionEnum = typeof VersionUsersUserQualificationRecordsBatchDeleteVersionEnum[keyof typeof VersionUsersUserQualificationRecordsBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersUserQualificationRecordsBatchDeleteIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Qualification: 'qualification',
    QualificationImage: 'qualification.image'
} as const;
export type VersionUsersUserQualificationRecordsBatchDeleteIncludeEnum = typeof VersionUsersUserQualificationRecordsBatchDeleteIncludeEnum[keyof typeof VersionUsersUserQualificationRecordsBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserQualificationRecordsBatchPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserQualificationRecordsBatchPatchVersionEnum = typeof VersionUsersUserQualificationRecordsBatchPatchVersionEnum[keyof typeof VersionUsersUserQualificationRecordsBatchPatchVersionEnum];
/**
 * @export
 */
export const VersionUsersUserQualificationRecordsBatchPatchIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Qualification: 'qualification',
    QualificationImage: 'qualification.image'
} as const;
export type VersionUsersUserQualificationRecordsBatchPatchIncludeEnum = typeof VersionUsersUserQualificationRecordsBatchPatchIncludeEnum[keyof typeof VersionUsersUserQualificationRecordsBatchPatchIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserQualificationRecordsBatchPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserQualificationRecordsBatchPostVersionEnum = typeof VersionUsersUserQualificationRecordsBatchPostVersionEnum[keyof typeof VersionUsersUserQualificationRecordsBatchPostVersionEnum];
/**
 * @export
 */
export const VersionUsersUserQualificationRecordsBatchPostIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Qualification: 'qualification',
    QualificationImage: 'qualification.image'
} as const;
export type VersionUsersUserQualificationRecordsBatchPostIncludeEnum = typeof VersionUsersUserQualificationRecordsBatchPostIncludeEnum[keyof typeof VersionUsersUserQualificationRecordsBatchPostIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserQualificationRecordsGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserQualificationRecordsGetVersionEnum = typeof VersionUsersUserQualificationRecordsGetVersionEnum[keyof typeof VersionUsersUserQualificationRecordsGetVersionEnum];
/**
 * @export
 */
export const VersionUsersUserQualificationRecordsGetIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Qualification: 'qualification',
    QualificationImage: 'qualification.image'
} as const;
export type VersionUsersUserQualificationRecordsGetIncludeEnum = typeof VersionUsersUserQualificationRecordsGetIncludeEnum[keyof typeof VersionUsersUserQualificationRecordsGetIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserQualificationRecordsPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserQualificationRecordsPostVersionEnum = typeof VersionUsersUserQualificationRecordsPostVersionEnum[keyof typeof VersionUsersUserQualificationRecordsPostVersionEnum];
/**
 * @export
 */
export const VersionUsersUserQualificationRecordsPostIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Qualification: 'qualification',
    QualificationImage: 'qualification.image'
} as const;
export type VersionUsersUserQualificationRecordsPostIncludeEnum = typeof VersionUsersUserQualificationRecordsPostIncludeEnum[keyof typeof VersionUsersUserQualificationRecordsPostIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserQualificationRecordsQualificationRecordDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserQualificationRecordsQualificationRecordDeleteVersionEnum = typeof VersionUsersUserQualificationRecordsQualificationRecordDeleteVersionEnum[keyof typeof VersionUsersUserQualificationRecordsQualificationRecordDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersUserQualificationRecordsQualificationRecordDeleteIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Qualification: 'qualification',
    QualificationImage: 'qualification.image'
} as const;
export type VersionUsersUserQualificationRecordsQualificationRecordDeleteIncludeEnum = typeof VersionUsersUserQualificationRecordsQualificationRecordDeleteIncludeEnum[keyof typeof VersionUsersUserQualificationRecordsQualificationRecordDeleteIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserQualificationRecordsQualificationRecordDissociateDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserQualificationRecordsQualificationRecordDissociateDeleteVersionEnum = typeof VersionUsersUserQualificationRecordsQualificationRecordDissociateDeleteVersionEnum[keyof typeof VersionUsersUserQualificationRecordsQualificationRecordDissociateDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersUserQualificationRecordsQualificationRecordDissociateDeleteIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Qualification: 'qualification',
    QualificationImage: 'qualification.image'
} as const;
export type VersionUsersUserQualificationRecordsQualificationRecordDissociateDeleteIncludeEnum = typeof VersionUsersUserQualificationRecordsQualificationRecordDissociateDeleteIncludeEnum[keyof typeof VersionUsersUserQualificationRecordsQualificationRecordDissociateDeleteIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserQualificationRecordsQualificationRecordGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserQualificationRecordsQualificationRecordGetVersionEnum = typeof VersionUsersUserQualificationRecordsQualificationRecordGetVersionEnum[keyof typeof VersionUsersUserQualificationRecordsQualificationRecordGetVersionEnum];
/**
 * @export
 */
export const VersionUsersUserQualificationRecordsQualificationRecordGetIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Qualification: 'qualification',
    QualificationImage: 'qualification.image'
} as const;
export type VersionUsersUserQualificationRecordsQualificationRecordGetIncludeEnum = typeof VersionUsersUserQualificationRecordsQualificationRecordGetIncludeEnum[keyof typeof VersionUsersUserQualificationRecordsQualificationRecordGetIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserQualificationRecordsQualificationRecordPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserQualificationRecordsQualificationRecordPatchVersionEnum = typeof VersionUsersUserQualificationRecordsQualificationRecordPatchVersionEnum[keyof typeof VersionUsersUserQualificationRecordsQualificationRecordPatchVersionEnum];
/**
 * @export
 */
export const VersionUsersUserQualificationRecordsQualificationRecordPatchIncludeEnum = {
    Attachments: 'attachments',
    Author: 'author',
    Author2: 'author.*',
    Comments: 'comments',
    Comments2: 'comments.*',
    Document: 'document',
    Qualification: 'qualification',
    QualificationImage: 'qualification.image'
} as const;
export type VersionUsersUserQualificationRecordsQualificationRecordPatchIncludeEnum = typeof VersionUsersUserQualificationRecordsQualificationRecordPatchIncludeEnum[keyof typeof VersionUsersUserQualificationRecordsQualificationRecordPatchIncludeEnum];
