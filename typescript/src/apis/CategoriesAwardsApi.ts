/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Award,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionAwardsBatchPatchRequest,
  VersionAwardsBatchPost200Response,
  VersionAwardsBatchPostRequest,
  VersionAwardsGet200Response,
  VersionAwardsPost201Response,
  VersionCategoriesCategoryAwardsAttachPost200Response,
  VersionCategoriesCategoryAwardsAttachPostRequest,
  VersionCategoriesCategoryAwardsAwardPivotPatch200Response,
  VersionCategoriesCategoryAwardsAwardPivotPatchRequest,
  VersionCategoriesCategoryAwardsDetachDelete200Response,
  VersionCategoriesCategoryAwardsSyncPatch200Response,
  VersionCategoriesCategoryAwardsTogglePatch200Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
} from '../models/index';
import {
    AwardFromJSON,
    AwardToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionAwardsBatchPatchRequestFromJSON,
    VersionAwardsBatchPatchRequestToJSON,
    VersionAwardsBatchPost200ResponseFromJSON,
    VersionAwardsBatchPost200ResponseToJSON,
    VersionAwardsBatchPostRequestFromJSON,
    VersionAwardsBatchPostRequestToJSON,
    VersionAwardsGet200ResponseFromJSON,
    VersionAwardsGet200ResponseToJSON,
    VersionAwardsPost201ResponseFromJSON,
    VersionAwardsPost201ResponseToJSON,
    VersionCategoriesCategoryAwardsAttachPost200ResponseFromJSON,
    VersionCategoriesCategoryAwardsAttachPost200ResponseToJSON,
    VersionCategoriesCategoryAwardsAttachPostRequestFromJSON,
    VersionCategoriesCategoryAwardsAttachPostRequestToJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatch200ResponseFromJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatch200ResponseToJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatchRequestFromJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatchRequestToJSON,
    VersionCategoriesCategoryAwardsDetachDelete200ResponseFromJSON,
    VersionCategoriesCategoryAwardsDetachDelete200ResponseToJSON,
    VersionCategoriesCategoryAwardsSyncPatch200ResponseFromJSON,
    VersionCategoriesCategoryAwardsSyncPatch200ResponseToJSON,
    VersionCategoriesCategoryAwardsTogglePatch200ResponseFromJSON,
    VersionCategoriesCategoryAwardsTogglePatch200ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
} from '../models/index';

export interface VersionCategoriesCategoryAwardsAttachPostOperationRequest {
    version: VersionCategoriesCategoryAwardsAttachPostOperationVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryAwardsAttachPostOperationIncludeEnum;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

export interface VersionCategoriesCategoryAwardsAwardDeleteRequest {
    version: VersionCategoriesCategoryAwardsAwardDeleteVersionEnum;
    category: number;
    award: number;
    include?: VersionCategoriesCategoryAwardsAwardDeleteIncludeEnum;
}

export interface VersionCategoriesCategoryAwardsAwardGetRequest {
    version: VersionCategoriesCategoryAwardsAwardGetVersionEnum;
    category: number;
    award: number;
    include?: VersionCategoriesCategoryAwardsAwardGetIncludeEnum;
}

export interface VersionCategoriesCategoryAwardsAwardPatchRequest {
    version: VersionCategoriesCategoryAwardsAwardPatchVersionEnum;
    category: number;
    award: number;
    include?: VersionCategoriesCategoryAwardsAwardPatchIncludeEnum;
    award2?: Award;
}

export interface VersionCategoriesCategoryAwardsAwardPivotPatchOperationRequest {
    version: VersionCategoriesCategoryAwardsAwardPivotPatchOperationVersionEnum;
    category: number;
    award: number;
    include?: VersionCategoriesCategoryAwardsAwardPivotPatchOperationIncludeEnum;
    versionCategoriesCategoryAwardsAwardPivotPatchRequest?: VersionCategoriesCategoryAwardsAwardPivotPatchRequest;
}

export interface VersionCategoriesCategoryAwardsBatchDeleteRequest {
    version: VersionCategoriesCategoryAwardsBatchDeleteVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryAwardsBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionCategoriesCategoryAwardsBatchPatchRequest {
    version: VersionCategoriesCategoryAwardsBatchPatchVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryAwardsBatchPatchIncludeEnum;
    versionAwardsBatchPatchRequest?: VersionAwardsBatchPatchRequest;
}

export interface VersionCategoriesCategoryAwardsBatchPostRequest {
    version: VersionCategoriesCategoryAwardsBatchPostVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryAwardsBatchPostIncludeEnum;
    versionAwardsBatchPostRequest?: VersionAwardsBatchPostRequest;
}

export interface VersionCategoriesCategoryAwardsDetachDeleteRequest {
    version: VersionCategoriesCategoryAwardsDetachDeleteVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryAwardsDetachDeleteIncludeEnum;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

export interface VersionCategoriesCategoryAwardsGetRequest {
    version: VersionCategoriesCategoryAwardsGetVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryAwardsGetIncludeEnum;
}

export interface VersionCategoriesCategoryAwardsPostRequest {
    version: VersionCategoriesCategoryAwardsPostVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryAwardsPostIncludeEnum;
    award?: Award;
}

export interface VersionCategoriesCategoryAwardsSyncPatchRequest {
    version: VersionCategoriesCategoryAwardsSyncPatchVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryAwardsSyncPatchIncludeEnum;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

export interface VersionCategoriesCategoryAwardsTogglePatchRequest {
    version: VersionCategoriesCategoryAwardsTogglePatchVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryAwardsTogglePatchIncludeEnum;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

/**
 * 
 */
export class CategoriesAwardsApi extends runtime.BaseAPI {

    /**
     * Attach awards
     */
    async versionCategoriesCategoryAwardsAttachPostRaw(requestParameters: VersionCategoriesCategoryAwardsAttachPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsAttachPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryAwardsAttachPost().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryAwardsAttachPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/awards/attach`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsAttachPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Attach awards
     */
    async versionCategoriesCategoryAwardsAttachPost(requestParameters: VersionCategoriesCategoryAwardsAttachPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsAttachPost200Response> {
        const response = await this.versionCategoriesCategoryAwardsAttachPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete award
     */
    async versionCategoriesCategoryAwardsAwardDeleteRaw(requestParameters: VersionCategoriesCategoryAwardsAwardDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryAwardsAwardDelete().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryAwardsAwardDelete().'
            );
        }

        if (requestParameters['award'] == null) {
            throw new runtime.RequiredError(
                'award',
                'Required parameter "award" was null or undefined when calling versionCategoriesCategoryAwardsAwardDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/awards/{award}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))).replace(`{${"award"}}`, encodeURIComponent(String(requestParameters['award']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete award
     */
    async versionCategoriesCategoryAwardsAwardDelete(requestParameters: VersionCategoriesCategoryAwardsAwardDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardsPost201Response> {
        const response = await this.versionCategoriesCategoryAwardsAwardDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get award
     */
    async versionCategoriesCategoryAwardsAwardGetRaw(requestParameters: VersionCategoriesCategoryAwardsAwardGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryAwardsAwardGet().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryAwardsAwardGet().'
            );
        }

        if (requestParameters['award'] == null) {
            throw new runtime.RequiredError(
                'award',
                'Required parameter "award" was null or undefined when calling versionCategoriesCategoryAwardsAwardGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/awards/{award}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))).replace(`{${"award"}}`, encodeURIComponent(String(requestParameters['award']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get award
     */
    async versionCategoriesCategoryAwardsAwardGet(requestParameters: VersionCategoriesCategoryAwardsAwardGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardsPost201Response> {
        const response = await this.versionCategoriesCategoryAwardsAwardGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update award
     */
    async versionCategoriesCategoryAwardsAwardPatchRaw(requestParameters: VersionCategoriesCategoryAwardsAwardPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryAwardsAwardPatch().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryAwardsAwardPatch().'
            );
        }

        if (requestParameters['award'] == null) {
            throw new runtime.RequiredError(
                'award',
                'Required parameter "award" was null or undefined when calling versionCategoriesCategoryAwardsAwardPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/awards/{award}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))).replace(`{${"award"}}`, encodeURIComponent(String(requestParameters['award']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AwardToJSON(requestParameters['award2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update award
     */
    async versionCategoriesCategoryAwardsAwardPatch(requestParameters: VersionCategoriesCategoryAwardsAwardPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardsPost201Response> {
        const response = await this.versionCategoriesCategoryAwardsAwardPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update pivot
     */
    async versionCategoriesCategoryAwardsAwardPivotPatchRaw(requestParameters: VersionCategoriesCategoryAwardsAwardPivotPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsAwardPivotPatch200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryAwardsAwardPivotPatch().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryAwardsAwardPivotPatch().'
            );
        }

        if (requestParameters['award'] == null) {
            throw new runtime.RequiredError(
                'award',
                'Required parameter "award" was null or undefined when calling versionCategoriesCategoryAwardsAwardPivotPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/awards/{award}/pivot`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))).replace(`{${"award"}}`, encodeURIComponent(String(requestParameters['award']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAwardPivotPatchRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAwardPivotPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsAwardPivotPatch200ResponseFromJSON(jsonValue));
    }

    /**
     * Update pivot
     */
    async versionCategoriesCategoryAwardsAwardPivotPatch(requestParameters: VersionCategoriesCategoryAwardsAwardPivotPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsAwardPivotPatch200Response> {
        const response = await this.versionCategoriesCategoryAwardsAwardPivotPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a batch of awards
     */
    async versionCategoriesCategoryAwardsBatchDeleteRaw(requestParameters: VersionCategoriesCategoryAwardsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryAwardsBatchDelete().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryAwardsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/awards/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of awards
     */
    async versionCategoriesCategoryAwardsBatchDelete(requestParameters: VersionCategoriesCategoryAwardsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardsBatchPost200Response> {
        const response = await this.versionCategoriesCategoryAwardsBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of awards
     */
    async versionCategoriesCategoryAwardsBatchPatchRaw(requestParameters: VersionCategoriesCategoryAwardsBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryAwardsBatchPatch().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryAwardsBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/awards/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAwardsBatchPatchRequestToJSON(requestParameters['versionAwardsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of awards
     */
    async versionCategoriesCategoryAwardsBatchPatch(requestParameters: VersionCategoriesCategoryAwardsBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardsBatchPost200Response> {
        const response = await this.versionCategoriesCategoryAwardsBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of awards
     */
    async versionCategoriesCategoryAwardsBatchPostRaw(requestParameters: VersionCategoriesCategoryAwardsBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryAwardsBatchPost().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryAwardsBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/awards/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAwardsBatchPostRequestToJSON(requestParameters['versionAwardsBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of awards
     */
    async versionCategoriesCategoryAwardsBatchPost(requestParameters: VersionCategoriesCategoryAwardsBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardsBatchPost200Response> {
        const response = await this.versionCategoriesCategoryAwardsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Detach awards
     */
    async versionCategoriesCategoryAwardsDetachDeleteRaw(requestParameters: VersionCategoriesCategoryAwardsDetachDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsDetachDelete200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryAwardsDetachDelete().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryAwardsDetachDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/awards/detach`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsDetachDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Detach awards
     */
    async versionCategoriesCategoryAwardsDetachDelete(requestParameters: VersionCategoriesCategoryAwardsDetachDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsDetachDelete200Response> {
        const response = await this.versionCategoriesCategoryAwardsDetachDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of awards
     */
    async versionCategoriesCategoryAwardsGetRaw(requestParameters: VersionCategoriesCategoryAwardsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardsGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryAwardsGet().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryAwardsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/awards`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of awards
     */
    async versionCategoriesCategoryAwardsGet(requestParameters: VersionCategoriesCategoryAwardsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardsGet200Response> {
        const response = await this.versionCategoriesCategoryAwardsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create award
     */
    async versionCategoriesCategoryAwardsPostRaw(requestParameters: VersionCategoriesCategoryAwardsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionAwardsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryAwardsPost().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryAwardsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/awards`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwardToJSON(requestParameters['award']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionAwardsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create award
     */
    async versionCategoriesCategoryAwardsPost(requestParameters: VersionCategoriesCategoryAwardsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionAwardsPost201Response> {
        const response = await this.versionCategoriesCategoryAwardsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sync awards
     */
    async versionCategoriesCategoryAwardsSyncPatchRaw(requestParameters: VersionCategoriesCategoryAwardsSyncPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsSyncPatch200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryAwardsSyncPatch().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryAwardsSyncPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/awards/sync`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsSyncPatch200ResponseFromJSON(jsonValue));
    }

    /**
     * Sync awards
     */
    async versionCategoriesCategoryAwardsSyncPatch(requestParameters: VersionCategoriesCategoryAwardsSyncPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsSyncPatch200Response> {
        const response = await this.versionCategoriesCategoryAwardsSyncPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Toggle awards
     */
    async versionCategoriesCategoryAwardsTogglePatchRaw(requestParameters: VersionCategoriesCategoryAwardsTogglePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsTogglePatch200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryAwardsTogglePatch().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryAwardsTogglePatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/awards/toggle`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsTogglePatch200ResponseFromJSON(jsonValue));
    }

    /**
     * Toggle awards
     */
    async versionCategoriesCategoryAwardsTogglePatch(requestParameters: VersionCategoriesCategoryAwardsTogglePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsTogglePatch200Response> {
        const response = await this.versionCategoriesCategoryAwardsTogglePatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionCategoriesCategoryAwardsAttachPostOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryAwardsAttachPostOperationVersionEnum = typeof VersionCategoriesCategoryAwardsAttachPostOperationVersionEnum[keyof typeof VersionCategoriesCategoryAwardsAttachPostOperationVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryAwardsAttachPostOperationIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryAwardsAttachPostOperationIncludeEnum = typeof VersionCategoriesCategoryAwardsAttachPostOperationIncludeEnum[keyof typeof VersionCategoriesCategoryAwardsAttachPostOperationIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryAwardsAwardDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryAwardsAwardDeleteVersionEnum = typeof VersionCategoriesCategoryAwardsAwardDeleteVersionEnum[keyof typeof VersionCategoriesCategoryAwardsAwardDeleteVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryAwardsAwardDeleteIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryAwardsAwardDeleteIncludeEnum = typeof VersionCategoriesCategoryAwardsAwardDeleteIncludeEnum[keyof typeof VersionCategoriesCategoryAwardsAwardDeleteIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryAwardsAwardGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryAwardsAwardGetVersionEnum = typeof VersionCategoriesCategoryAwardsAwardGetVersionEnum[keyof typeof VersionCategoriesCategoryAwardsAwardGetVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryAwardsAwardGetIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryAwardsAwardGetIncludeEnum = typeof VersionCategoriesCategoryAwardsAwardGetIncludeEnum[keyof typeof VersionCategoriesCategoryAwardsAwardGetIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryAwardsAwardPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryAwardsAwardPatchVersionEnum = typeof VersionCategoriesCategoryAwardsAwardPatchVersionEnum[keyof typeof VersionCategoriesCategoryAwardsAwardPatchVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryAwardsAwardPatchIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryAwardsAwardPatchIncludeEnum = typeof VersionCategoriesCategoryAwardsAwardPatchIncludeEnum[keyof typeof VersionCategoriesCategoryAwardsAwardPatchIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryAwardsAwardPivotPatchOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryAwardsAwardPivotPatchOperationVersionEnum = typeof VersionCategoriesCategoryAwardsAwardPivotPatchOperationVersionEnum[keyof typeof VersionCategoriesCategoryAwardsAwardPivotPatchOperationVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryAwardsAwardPivotPatchOperationIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryAwardsAwardPivotPatchOperationIncludeEnum = typeof VersionCategoriesCategoryAwardsAwardPivotPatchOperationIncludeEnum[keyof typeof VersionCategoriesCategoryAwardsAwardPivotPatchOperationIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryAwardsBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryAwardsBatchDeleteVersionEnum = typeof VersionCategoriesCategoryAwardsBatchDeleteVersionEnum[keyof typeof VersionCategoriesCategoryAwardsBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryAwardsBatchDeleteIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryAwardsBatchDeleteIncludeEnum = typeof VersionCategoriesCategoryAwardsBatchDeleteIncludeEnum[keyof typeof VersionCategoriesCategoryAwardsBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryAwardsBatchPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryAwardsBatchPatchVersionEnum = typeof VersionCategoriesCategoryAwardsBatchPatchVersionEnum[keyof typeof VersionCategoriesCategoryAwardsBatchPatchVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryAwardsBatchPatchIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryAwardsBatchPatchIncludeEnum = typeof VersionCategoriesCategoryAwardsBatchPatchIncludeEnum[keyof typeof VersionCategoriesCategoryAwardsBatchPatchIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryAwardsBatchPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryAwardsBatchPostVersionEnum = typeof VersionCategoriesCategoryAwardsBatchPostVersionEnum[keyof typeof VersionCategoriesCategoryAwardsBatchPostVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryAwardsBatchPostIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryAwardsBatchPostIncludeEnum = typeof VersionCategoriesCategoryAwardsBatchPostIncludeEnum[keyof typeof VersionCategoriesCategoryAwardsBatchPostIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryAwardsDetachDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryAwardsDetachDeleteVersionEnum = typeof VersionCategoriesCategoryAwardsDetachDeleteVersionEnum[keyof typeof VersionCategoriesCategoryAwardsDetachDeleteVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryAwardsDetachDeleteIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryAwardsDetachDeleteIncludeEnum = typeof VersionCategoriesCategoryAwardsDetachDeleteIncludeEnum[keyof typeof VersionCategoriesCategoryAwardsDetachDeleteIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryAwardsGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryAwardsGetVersionEnum = typeof VersionCategoriesCategoryAwardsGetVersionEnum[keyof typeof VersionCategoriesCategoryAwardsGetVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryAwardsGetIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryAwardsGetIncludeEnum = typeof VersionCategoriesCategoryAwardsGetIncludeEnum[keyof typeof VersionCategoriesCategoryAwardsGetIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryAwardsPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryAwardsPostVersionEnum = typeof VersionCategoriesCategoryAwardsPostVersionEnum[keyof typeof VersionCategoriesCategoryAwardsPostVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryAwardsPostIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryAwardsPostIncludeEnum = typeof VersionCategoriesCategoryAwardsPostIncludeEnum[keyof typeof VersionCategoriesCategoryAwardsPostIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryAwardsSyncPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryAwardsSyncPatchVersionEnum = typeof VersionCategoriesCategoryAwardsSyncPatchVersionEnum[keyof typeof VersionCategoriesCategoryAwardsSyncPatchVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryAwardsSyncPatchIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryAwardsSyncPatchIncludeEnum = typeof VersionCategoriesCategoryAwardsSyncPatchIncludeEnum[keyof typeof VersionCategoriesCategoryAwardsSyncPatchIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryAwardsTogglePatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryAwardsTogglePatchVersionEnum = typeof VersionCategoriesCategoryAwardsTogglePatchVersionEnum[keyof typeof VersionCategoriesCategoryAwardsTogglePatchVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryAwardsTogglePatchIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryAwardsTogglePatchIncludeEnum = typeof VersionCategoriesCategoryAwardsTogglePatchIncludeEnum[keyof typeof VersionCategoriesCategoryAwardsTogglePatchIncludeEnum];
