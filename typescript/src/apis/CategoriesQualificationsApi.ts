/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Qualification,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionCategoriesCategoryAwardsAttachPost200Response,
  VersionCategoriesCategoryAwardsAttachPostRequest,
  VersionCategoriesCategoryAwardsAwardPivotPatch200Response,
  VersionCategoriesCategoryAwardsAwardPivotPatchRequest,
  VersionCategoriesCategoryAwardsDetachDelete200Response,
  VersionCategoriesCategoryAwardsSyncPatch200Response,
  VersionCategoriesCategoryAwardsTogglePatch200Response,
  VersionCategoriesCategoryQualificationsBatchPatchRequest,
  VersionCategoriesCategoryQualificationsBatchPost200Response,
  VersionCategoriesCategoryQualificationsBatchPostRequest,
  VersionCategoriesCategoryQualificationsGet200Response,
  VersionCategoriesCategoryQualificationsPost201Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
} from '../models/index';
import {
    QualificationFromJSON,
    QualificationToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionCategoriesCategoryAwardsAttachPost200ResponseFromJSON,
    VersionCategoriesCategoryAwardsAttachPost200ResponseToJSON,
    VersionCategoriesCategoryAwardsAttachPostRequestFromJSON,
    VersionCategoriesCategoryAwardsAttachPostRequestToJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatch200ResponseFromJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatch200ResponseToJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatchRequestFromJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatchRequestToJSON,
    VersionCategoriesCategoryAwardsDetachDelete200ResponseFromJSON,
    VersionCategoriesCategoryAwardsDetachDelete200ResponseToJSON,
    VersionCategoriesCategoryAwardsSyncPatch200ResponseFromJSON,
    VersionCategoriesCategoryAwardsSyncPatch200ResponseToJSON,
    VersionCategoriesCategoryAwardsTogglePatch200ResponseFromJSON,
    VersionCategoriesCategoryAwardsTogglePatch200ResponseToJSON,
    VersionCategoriesCategoryQualificationsBatchPatchRequestFromJSON,
    VersionCategoriesCategoryQualificationsBatchPatchRequestToJSON,
    VersionCategoriesCategoryQualificationsBatchPost200ResponseFromJSON,
    VersionCategoriesCategoryQualificationsBatchPost200ResponseToJSON,
    VersionCategoriesCategoryQualificationsBatchPostRequestFromJSON,
    VersionCategoriesCategoryQualificationsBatchPostRequestToJSON,
    VersionCategoriesCategoryQualificationsGet200ResponseFromJSON,
    VersionCategoriesCategoryQualificationsGet200ResponseToJSON,
    VersionCategoriesCategoryQualificationsPost201ResponseFromJSON,
    VersionCategoriesCategoryQualificationsPost201ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
} from '../models/index';

export interface VersionCategoriesCategoryQualificationsAttachPostRequest {
    version: VersionCategoriesCategoryQualificationsAttachPostVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryQualificationsAttachPostIncludeEnum;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

export interface VersionCategoriesCategoryQualificationsBatchDeleteRequest {
    version: VersionCategoriesCategoryQualificationsBatchDeleteVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryQualificationsBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionCategoriesCategoryQualificationsBatchPatchOperationRequest {
    version: VersionCategoriesCategoryQualificationsBatchPatchOperationVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryQualificationsBatchPatchOperationIncludeEnum;
    versionCategoriesCategoryQualificationsBatchPatchRequest?: VersionCategoriesCategoryQualificationsBatchPatchRequest;
}

export interface VersionCategoriesCategoryQualificationsBatchPostOperationRequest {
    version: VersionCategoriesCategoryQualificationsBatchPostOperationVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryQualificationsBatchPostOperationIncludeEnum;
    versionCategoriesCategoryQualificationsBatchPostRequest?: VersionCategoriesCategoryQualificationsBatchPostRequest;
}

export interface VersionCategoriesCategoryQualificationsDetachDeleteRequest {
    version: VersionCategoriesCategoryQualificationsDetachDeleteVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryQualificationsDetachDeleteIncludeEnum;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

export interface VersionCategoriesCategoryQualificationsGetRequest {
    version: VersionCategoriesCategoryQualificationsGetVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryQualificationsGetIncludeEnum;
}

export interface VersionCategoriesCategoryQualificationsPostRequest {
    version: VersionCategoriesCategoryQualificationsPostVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryQualificationsPostIncludeEnum;
    qualification?: Qualification;
}

export interface VersionCategoriesCategoryQualificationsQualificationDeleteRequest {
    version: VersionCategoriesCategoryQualificationsQualificationDeleteVersionEnum;
    category: number;
    qualification: number;
    include?: VersionCategoriesCategoryQualificationsQualificationDeleteIncludeEnum;
}

export interface VersionCategoriesCategoryQualificationsQualificationGetRequest {
    version: VersionCategoriesCategoryQualificationsQualificationGetVersionEnum;
    category: number;
    qualification: number;
    include?: VersionCategoriesCategoryQualificationsQualificationGetIncludeEnum;
}

export interface VersionCategoriesCategoryQualificationsQualificationPatchRequest {
    version: VersionCategoriesCategoryQualificationsQualificationPatchVersionEnum;
    category: number;
    qualification: number;
    include?: VersionCategoriesCategoryQualificationsQualificationPatchIncludeEnum;
    qualification2?: Qualification;
}

export interface VersionCategoriesCategoryQualificationsQualificationPivotPatchRequest {
    version: VersionCategoriesCategoryQualificationsQualificationPivotPatchVersionEnum;
    category: number;
    qualification: number;
    include?: VersionCategoriesCategoryQualificationsQualificationPivotPatchIncludeEnum;
    versionCategoriesCategoryAwardsAwardPivotPatchRequest?: VersionCategoriesCategoryAwardsAwardPivotPatchRequest;
}

export interface VersionCategoriesCategoryQualificationsSyncPatchRequest {
    version: VersionCategoriesCategoryQualificationsSyncPatchVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryQualificationsSyncPatchIncludeEnum;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

export interface VersionCategoriesCategoryQualificationsTogglePatchRequest {
    version: VersionCategoriesCategoryQualificationsTogglePatchVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryQualificationsTogglePatchIncludeEnum;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

/**
 * 
 */
export class CategoriesQualificationsApi extends runtime.BaseAPI {

    /**
     * Attach qualifications
     */
    async versionCategoriesCategoryQualificationsAttachPostRaw(requestParameters: VersionCategoriesCategoryQualificationsAttachPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsAttachPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryQualificationsAttachPost().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryQualificationsAttachPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/qualifications/attach`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsAttachPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Attach qualifications
     */
    async versionCategoriesCategoryQualificationsAttachPost(requestParameters: VersionCategoriesCategoryQualificationsAttachPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsAttachPost200Response> {
        const response = await this.versionCategoriesCategoryQualificationsAttachPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a batch of qualifications
     */
    async versionCategoriesCategoryQualificationsBatchDeleteRaw(requestParameters: VersionCategoriesCategoryQualificationsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryQualificationsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryQualificationsBatchDelete().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryQualificationsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/qualifications/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryQualificationsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of qualifications
     */
    async versionCategoriesCategoryQualificationsBatchDelete(requestParameters: VersionCategoriesCategoryQualificationsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryQualificationsBatchPost200Response> {
        const response = await this.versionCategoriesCategoryQualificationsBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of qualifications
     */
    async versionCategoriesCategoryQualificationsBatchPatchRaw(requestParameters: VersionCategoriesCategoryQualificationsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryQualificationsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryQualificationsBatchPatch().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryQualificationsBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/qualifications/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryQualificationsBatchPatchRequestToJSON(requestParameters['versionCategoriesCategoryQualificationsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryQualificationsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of qualifications
     */
    async versionCategoriesCategoryQualificationsBatchPatch(requestParameters: VersionCategoriesCategoryQualificationsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryQualificationsBatchPost200Response> {
        const response = await this.versionCategoriesCategoryQualificationsBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of qualifications
     */
    async versionCategoriesCategoryQualificationsBatchPostRaw(requestParameters: VersionCategoriesCategoryQualificationsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryQualificationsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryQualificationsBatchPost().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryQualificationsBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/qualifications/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryQualificationsBatchPostRequestToJSON(requestParameters['versionCategoriesCategoryQualificationsBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryQualificationsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of qualifications
     */
    async versionCategoriesCategoryQualificationsBatchPost(requestParameters: VersionCategoriesCategoryQualificationsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryQualificationsBatchPost200Response> {
        const response = await this.versionCategoriesCategoryQualificationsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Detach qualifications
     */
    async versionCategoriesCategoryQualificationsDetachDeleteRaw(requestParameters: VersionCategoriesCategoryQualificationsDetachDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsDetachDelete200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryQualificationsDetachDelete().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryQualificationsDetachDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/qualifications/detach`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsDetachDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Detach qualifications
     */
    async versionCategoriesCategoryQualificationsDetachDelete(requestParameters: VersionCategoriesCategoryQualificationsDetachDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsDetachDelete200Response> {
        const response = await this.versionCategoriesCategoryQualificationsDetachDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of qualifications
     */
    async versionCategoriesCategoryQualificationsGetRaw(requestParameters: VersionCategoriesCategoryQualificationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryQualificationsGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryQualificationsGet().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryQualificationsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/qualifications`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryQualificationsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of qualifications
     */
    async versionCategoriesCategoryQualificationsGet(requestParameters: VersionCategoriesCategoryQualificationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryQualificationsGet200Response> {
        const response = await this.versionCategoriesCategoryQualificationsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create qualification
     */
    async versionCategoriesCategoryQualificationsPostRaw(requestParameters: VersionCategoriesCategoryQualificationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryQualificationsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryQualificationsPost().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryQualificationsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/qualifications`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QualificationToJSON(requestParameters['qualification']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryQualificationsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create qualification
     */
    async versionCategoriesCategoryQualificationsPost(requestParameters: VersionCategoriesCategoryQualificationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryQualificationsPost201Response> {
        const response = await this.versionCategoriesCategoryQualificationsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete qualification
     */
    async versionCategoriesCategoryQualificationsQualificationDeleteRaw(requestParameters: VersionCategoriesCategoryQualificationsQualificationDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryQualificationsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryQualificationsQualificationDelete().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryQualificationsQualificationDelete().'
            );
        }

        if (requestParameters['qualification'] == null) {
            throw new runtime.RequiredError(
                'qualification',
                'Required parameter "qualification" was null or undefined when calling versionCategoriesCategoryQualificationsQualificationDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/qualifications/{qualification}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))).replace(`{${"qualification"}}`, encodeURIComponent(String(requestParameters['qualification']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryQualificationsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete qualification
     */
    async versionCategoriesCategoryQualificationsQualificationDelete(requestParameters: VersionCategoriesCategoryQualificationsQualificationDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryQualificationsPost201Response> {
        const response = await this.versionCategoriesCategoryQualificationsQualificationDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get qualification
     */
    async versionCategoriesCategoryQualificationsQualificationGetRaw(requestParameters: VersionCategoriesCategoryQualificationsQualificationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryQualificationsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryQualificationsQualificationGet().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryQualificationsQualificationGet().'
            );
        }

        if (requestParameters['qualification'] == null) {
            throw new runtime.RequiredError(
                'qualification',
                'Required parameter "qualification" was null or undefined when calling versionCategoriesCategoryQualificationsQualificationGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/qualifications/{qualification}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))).replace(`{${"qualification"}}`, encodeURIComponent(String(requestParameters['qualification']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryQualificationsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get qualification
     */
    async versionCategoriesCategoryQualificationsQualificationGet(requestParameters: VersionCategoriesCategoryQualificationsQualificationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryQualificationsPost201Response> {
        const response = await this.versionCategoriesCategoryQualificationsQualificationGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update qualification
     */
    async versionCategoriesCategoryQualificationsQualificationPatchRaw(requestParameters: VersionCategoriesCategoryQualificationsQualificationPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryQualificationsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryQualificationsQualificationPatch().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryQualificationsQualificationPatch().'
            );
        }

        if (requestParameters['qualification'] == null) {
            throw new runtime.RequiredError(
                'qualification',
                'Required parameter "qualification" was null or undefined when calling versionCategoriesCategoryQualificationsQualificationPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/qualifications/{qualification}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))).replace(`{${"qualification"}}`, encodeURIComponent(String(requestParameters['qualification']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: QualificationToJSON(requestParameters['qualification2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryQualificationsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update qualification
     */
    async versionCategoriesCategoryQualificationsQualificationPatch(requestParameters: VersionCategoriesCategoryQualificationsQualificationPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryQualificationsPost201Response> {
        const response = await this.versionCategoriesCategoryQualificationsQualificationPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update pivot
     */
    async versionCategoriesCategoryQualificationsQualificationPivotPatchRaw(requestParameters: VersionCategoriesCategoryQualificationsQualificationPivotPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsAwardPivotPatch200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryQualificationsQualificationPivotPatch().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryQualificationsQualificationPivotPatch().'
            );
        }

        if (requestParameters['qualification'] == null) {
            throw new runtime.RequiredError(
                'qualification',
                'Required parameter "qualification" was null or undefined when calling versionCategoriesCategoryQualificationsQualificationPivotPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/qualifications/{qualification}/pivot`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))).replace(`{${"qualification"}}`, encodeURIComponent(String(requestParameters['qualification']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAwardPivotPatchRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAwardPivotPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsAwardPivotPatch200ResponseFromJSON(jsonValue));
    }

    /**
     * Update pivot
     */
    async versionCategoriesCategoryQualificationsQualificationPivotPatch(requestParameters: VersionCategoriesCategoryQualificationsQualificationPivotPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsAwardPivotPatch200Response> {
        const response = await this.versionCategoriesCategoryQualificationsQualificationPivotPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sync qualifications
     */
    async versionCategoriesCategoryQualificationsSyncPatchRaw(requestParameters: VersionCategoriesCategoryQualificationsSyncPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsSyncPatch200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryQualificationsSyncPatch().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryQualificationsSyncPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/qualifications/sync`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsSyncPatch200ResponseFromJSON(jsonValue));
    }

    /**
     * Sync qualifications
     */
    async versionCategoriesCategoryQualificationsSyncPatch(requestParameters: VersionCategoriesCategoryQualificationsSyncPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsSyncPatch200Response> {
        const response = await this.versionCategoriesCategoryQualificationsSyncPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Toggle qualifications
     */
    async versionCategoriesCategoryQualificationsTogglePatchRaw(requestParameters: VersionCategoriesCategoryQualificationsTogglePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsTogglePatch200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryQualificationsTogglePatch().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryQualificationsTogglePatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/qualifications/toggle`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsTogglePatch200ResponseFromJSON(jsonValue));
    }

    /**
     * Toggle qualifications
     */
    async versionCategoriesCategoryQualificationsTogglePatch(requestParameters: VersionCategoriesCategoryQualificationsTogglePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsTogglePatch200Response> {
        const response = await this.versionCategoriesCategoryQualificationsTogglePatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionCategoriesCategoryQualificationsAttachPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryQualificationsAttachPostVersionEnum = typeof VersionCategoriesCategoryQualificationsAttachPostVersionEnum[keyof typeof VersionCategoriesCategoryQualificationsAttachPostVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryQualificationsAttachPostIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryQualificationsAttachPostIncludeEnum = typeof VersionCategoriesCategoryQualificationsAttachPostIncludeEnum[keyof typeof VersionCategoriesCategoryQualificationsAttachPostIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryQualificationsBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryQualificationsBatchDeleteVersionEnum = typeof VersionCategoriesCategoryQualificationsBatchDeleteVersionEnum[keyof typeof VersionCategoriesCategoryQualificationsBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryQualificationsBatchDeleteIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryQualificationsBatchDeleteIncludeEnum = typeof VersionCategoriesCategoryQualificationsBatchDeleteIncludeEnum[keyof typeof VersionCategoriesCategoryQualificationsBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryQualificationsBatchPatchOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryQualificationsBatchPatchOperationVersionEnum = typeof VersionCategoriesCategoryQualificationsBatchPatchOperationVersionEnum[keyof typeof VersionCategoriesCategoryQualificationsBatchPatchOperationVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryQualificationsBatchPatchOperationIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryQualificationsBatchPatchOperationIncludeEnum = typeof VersionCategoriesCategoryQualificationsBatchPatchOperationIncludeEnum[keyof typeof VersionCategoriesCategoryQualificationsBatchPatchOperationIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryQualificationsBatchPostOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryQualificationsBatchPostOperationVersionEnum = typeof VersionCategoriesCategoryQualificationsBatchPostOperationVersionEnum[keyof typeof VersionCategoriesCategoryQualificationsBatchPostOperationVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryQualificationsBatchPostOperationIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryQualificationsBatchPostOperationIncludeEnum = typeof VersionCategoriesCategoryQualificationsBatchPostOperationIncludeEnum[keyof typeof VersionCategoriesCategoryQualificationsBatchPostOperationIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryQualificationsDetachDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryQualificationsDetachDeleteVersionEnum = typeof VersionCategoriesCategoryQualificationsDetachDeleteVersionEnum[keyof typeof VersionCategoriesCategoryQualificationsDetachDeleteVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryQualificationsDetachDeleteIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryQualificationsDetachDeleteIncludeEnum = typeof VersionCategoriesCategoryQualificationsDetachDeleteIncludeEnum[keyof typeof VersionCategoriesCategoryQualificationsDetachDeleteIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryQualificationsGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryQualificationsGetVersionEnum = typeof VersionCategoriesCategoryQualificationsGetVersionEnum[keyof typeof VersionCategoriesCategoryQualificationsGetVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryQualificationsGetIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryQualificationsGetIncludeEnum = typeof VersionCategoriesCategoryQualificationsGetIncludeEnum[keyof typeof VersionCategoriesCategoryQualificationsGetIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryQualificationsPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryQualificationsPostVersionEnum = typeof VersionCategoriesCategoryQualificationsPostVersionEnum[keyof typeof VersionCategoriesCategoryQualificationsPostVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryQualificationsPostIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryQualificationsPostIncludeEnum = typeof VersionCategoriesCategoryQualificationsPostIncludeEnum[keyof typeof VersionCategoriesCategoryQualificationsPostIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryQualificationsQualificationDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryQualificationsQualificationDeleteVersionEnum = typeof VersionCategoriesCategoryQualificationsQualificationDeleteVersionEnum[keyof typeof VersionCategoriesCategoryQualificationsQualificationDeleteVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryQualificationsQualificationDeleteIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryQualificationsQualificationDeleteIncludeEnum = typeof VersionCategoriesCategoryQualificationsQualificationDeleteIncludeEnum[keyof typeof VersionCategoriesCategoryQualificationsQualificationDeleteIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryQualificationsQualificationGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryQualificationsQualificationGetVersionEnum = typeof VersionCategoriesCategoryQualificationsQualificationGetVersionEnum[keyof typeof VersionCategoriesCategoryQualificationsQualificationGetVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryQualificationsQualificationGetIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryQualificationsQualificationGetIncludeEnum = typeof VersionCategoriesCategoryQualificationsQualificationGetIncludeEnum[keyof typeof VersionCategoriesCategoryQualificationsQualificationGetIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryQualificationsQualificationPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryQualificationsQualificationPatchVersionEnum = typeof VersionCategoriesCategoryQualificationsQualificationPatchVersionEnum[keyof typeof VersionCategoriesCategoryQualificationsQualificationPatchVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryQualificationsQualificationPatchIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryQualificationsQualificationPatchIncludeEnum = typeof VersionCategoriesCategoryQualificationsQualificationPatchIncludeEnum[keyof typeof VersionCategoriesCategoryQualificationsQualificationPatchIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryQualificationsQualificationPivotPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryQualificationsQualificationPivotPatchVersionEnum = typeof VersionCategoriesCategoryQualificationsQualificationPivotPatchVersionEnum[keyof typeof VersionCategoriesCategoryQualificationsQualificationPivotPatchVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryQualificationsQualificationPivotPatchIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryQualificationsQualificationPivotPatchIncludeEnum = typeof VersionCategoriesCategoryQualificationsQualificationPivotPatchIncludeEnum[keyof typeof VersionCategoriesCategoryQualificationsQualificationPivotPatchIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryQualificationsSyncPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryQualificationsSyncPatchVersionEnum = typeof VersionCategoriesCategoryQualificationsSyncPatchVersionEnum[keyof typeof VersionCategoriesCategoryQualificationsSyncPatchVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryQualificationsSyncPatchIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryQualificationsSyncPatchIncludeEnum = typeof VersionCategoriesCategoryQualificationsSyncPatchIncludeEnum[keyof typeof VersionCategoriesCategoryQualificationsSyncPatchIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryQualificationsTogglePatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryQualificationsTogglePatchVersionEnum = typeof VersionCategoriesCategoryQualificationsTogglePatchVersionEnum[keyof typeof VersionCategoriesCategoryQualificationsTogglePatchVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryQualificationsTogglePatchIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryQualificationsTogglePatchIncludeEnum = typeof VersionCategoriesCategoryQualificationsTogglePatchIncludeEnum[keyof typeof VersionCategoriesCategoryQualificationsTogglePatchIncludeEnum];
