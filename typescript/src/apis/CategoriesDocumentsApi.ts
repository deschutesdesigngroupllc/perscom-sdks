/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Document,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionCategoriesCategoryAwardsAttachPost200Response,
  VersionCategoriesCategoryAwardsAttachPostRequest,
  VersionCategoriesCategoryAwardsAwardPivotPatch200Response,
  VersionCategoriesCategoryAwardsAwardPivotPatchRequest,
  VersionCategoriesCategoryAwardsDetachDelete200Response,
  VersionCategoriesCategoryAwardsSyncPatch200Response,
  VersionCategoriesCategoryAwardsTogglePatch200Response,
  VersionCategoriesCategoryDocumentsBatchPatchRequest,
  VersionCategoriesCategoryDocumentsBatchPost200Response,
  VersionCategoriesCategoryDocumentsBatchPostRequest,
  VersionCategoriesCategoryDocumentsGet200Response,
  VersionCategoriesCategoryDocumentsPost201Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
} from '../models/index';
import {
    DocumentFromJSON,
    DocumentToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionCategoriesCategoryAwardsAttachPost200ResponseFromJSON,
    VersionCategoriesCategoryAwardsAttachPost200ResponseToJSON,
    VersionCategoriesCategoryAwardsAttachPostRequestFromJSON,
    VersionCategoriesCategoryAwardsAttachPostRequestToJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatch200ResponseFromJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatch200ResponseToJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatchRequestFromJSON,
    VersionCategoriesCategoryAwardsAwardPivotPatchRequestToJSON,
    VersionCategoriesCategoryAwardsDetachDelete200ResponseFromJSON,
    VersionCategoriesCategoryAwardsDetachDelete200ResponseToJSON,
    VersionCategoriesCategoryAwardsSyncPatch200ResponseFromJSON,
    VersionCategoriesCategoryAwardsSyncPatch200ResponseToJSON,
    VersionCategoriesCategoryAwardsTogglePatch200ResponseFromJSON,
    VersionCategoriesCategoryAwardsTogglePatch200ResponseToJSON,
    VersionCategoriesCategoryDocumentsBatchPatchRequestFromJSON,
    VersionCategoriesCategoryDocumentsBatchPatchRequestToJSON,
    VersionCategoriesCategoryDocumentsBatchPost200ResponseFromJSON,
    VersionCategoriesCategoryDocumentsBatchPost200ResponseToJSON,
    VersionCategoriesCategoryDocumentsBatchPostRequestFromJSON,
    VersionCategoriesCategoryDocumentsBatchPostRequestToJSON,
    VersionCategoriesCategoryDocumentsGet200ResponseFromJSON,
    VersionCategoriesCategoryDocumentsGet200ResponseToJSON,
    VersionCategoriesCategoryDocumentsPost201ResponseFromJSON,
    VersionCategoriesCategoryDocumentsPost201ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
} from '../models/index';

export interface VersionCategoriesCategoryDocumentsAttachPostRequest {
    version: VersionCategoriesCategoryDocumentsAttachPostVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryDocumentsAttachPostIncludeEnum;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

export interface VersionCategoriesCategoryDocumentsBatchDeleteRequest {
    version: VersionCategoriesCategoryDocumentsBatchDeleteVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryDocumentsBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionCategoriesCategoryDocumentsBatchPatchOperationRequest {
    version: VersionCategoriesCategoryDocumentsBatchPatchOperationVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryDocumentsBatchPatchOperationIncludeEnum;
    versionCategoriesCategoryDocumentsBatchPatchRequest?: VersionCategoriesCategoryDocumentsBatchPatchRequest;
}

export interface VersionCategoriesCategoryDocumentsBatchPostOperationRequest {
    version: VersionCategoriesCategoryDocumentsBatchPostOperationVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryDocumentsBatchPostOperationIncludeEnum;
    versionCategoriesCategoryDocumentsBatchPostRequest?: VersionCategoriesCategoryDocumentsBatchPostRequest;
}

export interface VersionCategoriesCategoryDocumentsDetachDeleteRequest {
    version: VersionCategoriesCategoryDocumentsDetachDeleteVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryDocumentsDetachDeleteIncludeEnum;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

export interface VersionCategoriesCategoryDocumentsDocumentDeleteRequest {
    version: VersionCategoriesCategoryDocumentsDocumentDeleteVersionEnum;
    category: number;
    document: number;
    include?: VersionCategoriesCategoryDocumentsDocumentDeleteIncludeEnum;
}

export interface VersionCategoriesCategoryDocumentsDocumentGetRequest {
    version: VersionCategoriesCategoryDocumentsDocumentGetVersionEnum;
    category: number;
    document: number;
    include?: VersionCategoriesCategoryDocumentsDocumentGetIncludeEnum;
}

export interface VersionCategoriesCategoryDocumentsDocumentPatchRequest {
    version: VersionCategoriesCategoryDocumentsDocumentPatchVersionEnum;
    category: number;
    document: number;
    include?: VersionCategoriesCategoryDocumentsDocumentPatchIncludeEnum;
    document2?: Document;
}

export interface VersionCategoriesCategoryDocumentsDocumentPivotPatchRequest {
    version: VersionCategoriesCategoryDocumentsDocumentPivotPatchVersionEnum;
    category: number;
    document: number;
    include?: VersionCategoriesCategoryDocumentsDocumentPivotPatchIncludeEnum;
    versionCategoriesCategoryAwardsAwardPivotPatchRequest?: VersionCategoriesCategoryAwardsAwardPivotPatchRequest;
}

export interface VersionCategoriesCategoryDocumentsGetRequest {
    version: VersionCategoriesCategoryDocumentsGetVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryDocumentsGetIncludeEnum;
}

export interface VersionCategoriesCategoryDocumentsPostRequest {
    version: VersionCategoriesCategoryDocumentsPostVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryDocumentsPostIncludeEnum;
    document?: Document;
}

export interface VersionCategoriesCategoryDocumentsSyncPatchRequest {
    version: VersionCategoriesCategoryDocumentsSyncPatchVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryDocumentsSyncPatchIncludeEnum;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

export interface VersionCategoriesCategoryDocumentsTogglePatchRequest {
    version: VersionCategoriesCategoryDocumentsTogglePatchVersionEnum;
    category: number;
    include?: VersionCategoriesCategoryDocumentsTogglePatchIncludeEnum;
    versionCategoriesCategoryAwardsAttachPostRequest?: VersionCategoriesCategoryAwardsAttachPostRequest;
}

/**
 * 
 */
export class CategoriesDocumentsApi extends runtime.BaseAPI {

    /**
     * Attach documents
     */
    async versionCategoriesCategoryDocumentsAttachPostRaw(requestParameters: VersionCategoriesCategoryDocumentsAttachPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsAttachPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryDocumentsAttachPost().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryDocumentsAttachPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/documents/attach`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsAttachPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Attach documents
     */
    async versionCategoriesCategoryDocumentsAttachPost(requestParameters: VersionCategoriesCategoryDocumentsAttachPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsAttachPost200Response> {
        const response = await this.versionCategoriesCategoryDocumentsAttachPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a batch of documents
     */
    async versionCategoriesCategoryDocumentsBatchDeleteRaw(requestParameters: VersionCategoriesCategoryDocumentsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryDocumentsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryDocumentsBatchDelete().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryDocumentsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/documents/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryDocumentsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of documents
     */
    async versionCategoriesCategoryDocumentsBatchDelete(requestParameters: VersionCategoriesCategoryDocumentsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryDocumentsBatchPost200Response> {
        const response = await this.versionCategoriesCategoryDocumentsBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of documents
     */
    async versionCategoriesCategoryDocumentsBatchPatchRaw(requestParameters: VersionCategoriesCategoryDocumentsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryDocumentsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryDocumentsBatchPatch().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryDocumentsBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/documents/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryDocumentsBatchPatchRequestToJSON(requestParameters['versionCategoriesCategoryDocumentsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryDocumentsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of documents
     */
    async versionCategoriesCategoryDocumentsBatchPatch(requestParameters: VersionCategoriesCategoryDocumentsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryDocumentsBatchPost200Response> {
        const response = await this.versionCategoriesCategoryDocumentsBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of documents
     */
    async versionCategoriesCategoryDocumentsBatchPostRaw(requestParameters: VersionCategoriesCategoryDocumentsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryDocumentsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryDocumentsBatchPost().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryDocumentsBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/documents/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryDocumentsBatchPostRequestToJSON(requestParameters['versionCategoriesCategoryDocumentsBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryDocumentsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of documents
     */
    async versionCategoriesCategoryDocumentsBatchPost(requestParameters: VersionCategoriesCategoryDocumentsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryDocumentsBatchPost200Response> {
        const response = await this.versionCategoriesCategoryDocumentsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Detach documents
     */
    async versionCategoriesCategoryDocumentsDetachDeleteRaw(requestParameters: VersionCategoriesCategoryDocumentsDetachDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsDetachDelete200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryDocumentsDetachDelete().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryDocumentsDetachDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/documents/detach`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsDetachDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Detach documents
     */
    async versionCategoriesCategoryDocumentsDetachDelete(requestParameters: VersionCategoriesCategoryDocumentsDetachDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsDetachDelete200Response> {
        const response = await this.versionCategoriesCategoryDocumentsDetachDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete document
     */
    async versionCategoriesCategoryDocumentsDocumentDeleteRaw(requestParameters: VersionCategoriesCategoryDocumentsDocumentDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryDocumentsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryDocumentsDocumentDelete().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryDocumentsDocumentDelete().'
            );
        }

        if (requestParameters['document'] == null) {
            throw new runtime.RequiredError(
                'document',
                'Required parameter "document" was null or undefined when calling versionCategoriesCategoryDocumentsDocumentDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/documents/{document}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))).replace(`{${"document"}}`, encodeURIComponent(String(requestParameters['document']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryDocumentsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete document
     */
    async versionCategoriesCategoryDocumentsDocumentDelete(requestParameters: VersionCategoriesCategoryDocumentsDocumentDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryDocumentsPost201Response> {
        const response = await this.versionCategoriesCategoryDocumentsDocumentDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get document
     */
    async versionCategoriesCategoryDocumentsDocumentGetRaw(requestParameters: VersionCategoriesCategoryDocumentsDocumentGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryDocumentsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryDocumentsDocumentGet().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryDocumentsDocumentGet().'
            );
        }

        if (requestParameters['document'] == null) {
            throw new runtime.RequiredError(
                'document',
                'Required parameter "document" was null or undefined when calling versionCategoriesCategoryDocumentsDocumentGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/documents/{document}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))).replace(`{${"document"}}`, encodeURIComponent(String(requestParameters['document']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryDocumentsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get document
     */
    async versionCategoriesCategoryDocumentsDocumentGet(requestParameters: VersionCategoriesCategoryDocumentsDocumentGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryDocumentsPost201Response> {
        const response = await this.versionCategoriesCategoryDocumentsDocumentGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update document
     */
    async versionCategoriesCategoryDocumentsDocumentPatchRaw(requestParameters: VersionCategoriesCategoryDocumentsDocumentPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryDocumentsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryDocumentsDocumentPatch().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryDocumentsDocumentPatch().'
            );
        }

        if (requestParameters['document'] == null) {
            throw new runtime.RequiredError(
                'document',
                'Required parameter "document" was null or undefined when calling versionCategoriesCategoryDocumentsDocumentPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/documents/{document}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))).replace(`{${"document"}}`, encodeURIComponent(String(requestParameters['document']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentToJSON(requestParameters['document2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryDocumentsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update document
     */
    async versionCategoriesCategoryDocumentsDocumentPatch(requestParameters: VersionCategoriesCategoryDocumentsDocumentPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryDocumentsPost201Response> {
        const response = await this.versionCategoriesCategoryDocumentsDocumentPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update pivot
     */
    async versionCategoriesCategoryDocumentsDocumentPivotPatchRaw(requestParameters: VersionCategoriesCategoryDocumentsDocumentPivotPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsAwardPivotPatch200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryDocumentsDocumentPivotPatch().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryDocumentsDocumentPivotPatch().'
            );
        }

        if (requestParameters['document'] == null) {
            throw new runtime.RequiredError(
                'document',
                'Required parameter "document" was null or undefined when calling versionCategoriesCategoryDocumentsDocumentPivotPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/documents/{document}/pivot`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))).replace(`{${"document"}}`, encodeURIComponent(String(requestParameters['document']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAwardPivotPatchRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAwardPivotPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsAwardPivotPatch200ResponseFromJSON(jsonValue));
    }

    /**
     * Update pivot
     */
    async versionCategoriesCategoryDocumentsDocumentPivotPatch(requestParameters: VersionCategoriesCategoryDocumentsDocumentPivotPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsAwardPivotPatch200Response> {
        const response = await this.versionCategoriesCategoryDocumentsDocumentPivotPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of documents
     */
    async versionCategoriesCategoryDocumentsGetRaw(requestParameters: VersionCategoriesCategoryDocumentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryDocumentsGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryDocumentsGet().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryDocumentsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/documents`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryDocumentsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of documents
     */
    async versionCategoriesCategoryDocumentsGet(requestParameters: VersionCategoriesCategoryDocumentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryDocumentsGet200Response> {
        const response = await this.versionCategoriesCategoryDocumentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create document
     */
    async versionCategoriesCategoryDocumentsPostRaw(requestParameters: VersionCategoriesCategoryDocumentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryDocumentsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryDocumentsPost().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryDocumentsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/documents`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentToJSON(requestParameters['document']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryDocumentsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create document
     */
    async versionCategoriesCategoryDocumentsPost(requestParameters: VersionCategoriesCategoryDocumentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryDocumentsPost201Response> {
        const response = await this.versionCategoriesCategoryDocumentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sync documents
     */
    async versionCategoriesCategoryDocumentsSyncPatchRaw(requestParameters: VersionCategoriesCategoryDocumentsSyncPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsSyncPatch200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryDocumentsSyncPatch().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryDocumentsSyncPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/documents/sync`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsSyncPatch200ResponseFromJSON(jsonValue));
    }

    /**
     * Sync documents
     */
    async versionCategoriesCategoryDocumentsSyncPatch(requestParameters: VersionCategoriesCategoryDocumentsSyncPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsSyncPatch200Response> {
        const response = await this.versionCategoriesCategoryDocumentsSyncPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Toggle documents
     */
    async versionCategoriesCategoryDocumentsTogglePatchRaw(requestParameters: VersionCategoriesCategoryDocumentsTogglePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryAwardsTogglePatch200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCategoriesCategoryDocumentsTogglePatch().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling versionCategoriesCategoryDocumentsTogglePatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/categories/{category}/documents/toggle`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryAwardsAttachPostRequestToJSON(requestParameters['versionCategoriesCategoryAwardsAttachPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryAwardsTogglePatch200ResponseFromJSON(jsonValue));
    }

    /**
     * Toggle documents
     */
    async versionCategoriesCategoryDocumentsTogglePatch(requestParameters: VersionCategoriesCategoryDocumentsTogglePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryAwardsTogglePatch200Response> {
        const response = await this.versionCategoriesCategoryDocumentsTogglePatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionCategoriesCategoryDocumentsAttachPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryDocumentsAttachPostVersionEnum = typeof VersionCategoriesCategoryDocumentsAttachPostVersionEnum[keyof typeof VersionCategoriesCategoryDocumentsAttachPostVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryDocumentsAttachPostIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryDocumentsAttachPostIncludeEnum = typeof VersionCategoriesCategoryDocumentsAttachPostIncludeEnum[keyof typeof VersionCategoriesCategoryDocumentsAttachPostIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryDocumentsBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryDocumentsBatchDeleteVersionEnum = typeof VersionCategoriesCategoryDocumentsBatchDeleteVersionEnum[keyof typeof VersionCategoriesCategoryDocumentsBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryDocumentsBatchDeleteIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryDocumentsBatchDeleteIncludeEnum = typeof VersionCategoriesCategoryDocumentsBatchDeleteIncludeEnum[keyof typeof VersionCategoriesCategoryDocumentsBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryDocumentsBatchPatchOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryDocumentsBatchPatchOperationVersionEnum = typeof VersionCategoriesCategoryDocumentsBatchPatchOperationVersionEnum[keyof typeof VersionCategoriesCategoryDocumentsBatchPatchOperationVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryDocumentsBatchPatchOperationIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryDocumentsBatchPatchOperationIncludeEnum = typeof VersionCategoriesCategoryDocumentsBatchPatchOperationIncludeEnum[keyof typeof VersionCategoriesCategoryDocumentsBatchPatchOperationIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryDocumentsBatchPostOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryDocumentsBatchPostOperationVersionEnum = typeof VersionCategoriesCategoryDocumentsBatchPostOperationVersionEnum[keyof typeof VersionCategoriesCategoryDocumentsBatchPostOperationVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryDocumentsBatchPostOperationIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryDocumentsBatchPostOperationIncludeEnum = typeof VersionCategoriesCategoryDocumentsBatchPostOperationIncludeEnum[keyof typeof VersionCategoriesCategoryDocumentsBatchPostOperationIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryDocumentsDetachDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryDocumentsDetachDeleteVersionEnum = typeof VersionCategoriesCategoryDocumentsDetachDeleteVersionEnum[keyof typeof VersionCategoriesCategoryDocumentsDetachDeleteVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryDocumentsDetachDeleteIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryDocumentsDetachDeleteIncludeEnum = typeof VersionCategoriesCategoryDocumentsDetachDeleteIncludeEnum[keyof typeof VersionCategoriesCategoryDocumentsDetachDeleteIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryDocumentsDocumentDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryDocumentsDocumentDeleteVersionEnum = typeof VersionCategoriesCategoryDocumentsDocumentDeleteVersionEnum[keyof typeof VersionCategoriesCategoryDocumentsDocumentDeleteVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryDocumentsDocumentDeleteIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryDocumentsDocumentDeleteIncludeEnum = typeof VersionCategoriesCategoryDocumentsDocumentDeleteIncludeEnum[keyof typeof VersionCategoriesCategoryDocumentsDocumentDeleteIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryDocumentsDocumentGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryDocumentsDocumentGetVersionEnum = typeof VersionCategoriesCategoryDocumentsDocumentGetVersionEnum[keyof typeof VersionCategoriesCategoryDocumentsDocumentGetVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryDocumentsDocumentGetIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryDocumentsDocumentGetIncludeEnum = typeof VersionCategoriesCategoryDocumentsDocumentGetIncludeEnum[keyof typeof VersionCategoriesCategoryDocumentsDocumentGetIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryDocumentsDocumentPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryDocumentsDocumentPatchVersionEnum = typeof VersionCategoriesCategoryDocumentsDocumentPatchVersionEnum[keyof typeof VersionCategoriesCategoryDocumentsDocumentPatchVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryDocumentsDocumentPatchIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryDocumentsDocumentPatchIncludeEnum = typeof VersionCategoriesCategoryDocumentsDocumentPatchIncludeEnum[keyof typeof VersionCategoriesCategoryDocumentsDocumentPatchIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryDocumentsDocumentPivotPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryDocumentsDocumentPivotPatchVersionEnum = typeof VersionCategoriesCategoryDocumentsDocumentPivotPatchVersionEnum[keyof typeof VersionCategoriesCategoryDocumentsDocumentPivotPatchVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryDocumentsDocumentPivotPatchIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryDocumentsDocumentPivotPatchIncludeEnum = typeof VersionCategoriesCategoryDocumentsDocumentPivotPatchIncludeEnum[keyof typeof VersionCategoriesCategoryDocumentsDocumentPivotPatchIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryDocumentsGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryDocumentsGetVersionEnum = typeof VersionCategoriesCategoryDocumentsGetVersionEnum[keyof typeof VersionCategoriesCategoryDocumentsGetVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryDocumentsGetIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryDocumentsGetIncludeEnum = typeof VersionCategoriesCategoryDocumentsGetIncludeEnum[keyof typeof VersionCategoriesCategoryDocumentsGetIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryDocumentsPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryDocumentsPostVersionEnum = typeof VersionCategoriesCategoryDocumentsPostVersionEnum[keyof typeof VersionCategoriesCategoryDocumentsPostVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryDocumentsPostIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryDocumentsPostIncludeEnum = typeof VersionCategoriesCategoryDocumentsPostIncludeEnum[keyof typeof VersionCategoriesCategoryDocumentsPostIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryDocumentsSyncPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryDocumentsSyncPatchVersionEnum = typeof VersionCategoriesCategoryDocumentsSyncPatchVersionEnum[keyof typeof VersionCategoriesCategoryDocumentsSyncPatchVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryDocumentsSyncPatchIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryDocumentsSyncPatchIncludeEnum = typeof VersionCategoriesCategoryDocumentsSyncPatchIncludeEnum[keyof typeof VersionCategoriesCategoryDocumentsSyncPatchIncludeEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryDocumentsTogglePatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCategoriesCategoryDocumentsTogglePatchVersionEnum = typeof VersionCategoriesCategoryDocumentsTogglePatchVersionEnum[keyof typeof VersionCategoriesCategoryDocumentsTogglePatchVersionEnum];
/**
 * @export
 */
export const VersionCategoriesCategoryDocumentsTogglePatchIncludeEnum = {
    Image: 'image'
} as const;
export type VersionCategoriesCategoryDocumentsTogglePatchIncludeEnum = typeof VersionCategoriesCategoryDocumentsTogglePatchIncludeEnum[keyof typeof VersionCategoriesCategoryDocumentsTogglePatchIncludeEnum];
