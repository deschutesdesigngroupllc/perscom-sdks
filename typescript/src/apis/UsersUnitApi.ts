/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Unit,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
  VersionUnitsBatchPatchRequest,
  VersionUnitsBatchPost200Response,
  VersionUnitsPost201Response,
} from '../models/index';
import {
    UnitFromJSON,
    UnitToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
    VersionUnitsBatchPatchRequestFromJSON,
    VersionUnitsBatchPatchRequestToJSON,
    VersionUnitsBatchPost200ResponseFromJSON,
    VersionUnitsBatchPost200ResponseToJSON,
    VersionUnitsPost201ResponseFromJSON,
    VersionUnitsPost201ResponseToJSON,
} from '../models/index';

export interface VersionUsersUserUnitBatchDeleteRequest {
    version: VersionUsersUserUnitBatchDeleteVersionEnum;
    user: number;
    include?: VersionUsersUserUnitBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionUsersUserUnitBatchPatchRequest {
    version: VersionUsersUserUnitBatchPatchVersionEnum;
    user: number;
    include?: VersionUsersUserUnitBatchPatchIncludeEnum;
    versionUnitsBatchPatchRequest?: VersionUnitsBatchPatchRequest;
}

export interface VersionUsersUserUnitUnitDeleteRequest {
    version: VersionUsersUserUnitUnitDeleteVersionEnum;
    user: number;
    unit: number;
    include?: VersionUsersUserUnitUnitDeleteIncludeEnum;
}

export interface VersionUsersUserUnitUnitGetRequest {
    version: VersionUsersUserUnitUnitGetVersionEnum;
    user: number;
    unit: number;
    include?: VersionUsersUserUnitUnitGetIncludeEnum;
}

export interface VersionUsersUserUnitUnitPatchRequest {
    version: VersionUsersUserUnitUnitPatchVersionEnum;
    user: number;
    unit: number;
    include?: VersionUsersUserUnitUnitPatchIncludeEnum;
    unit2?: Unit;
}

/**
 * 
 */
export class UsersUnitApi extends runtime.BaseAPI {

    /**
     * Delete a batch of units
     */
    async versionUsersUserUnitBatchDeleteRaw(requestParameters: VersionUsersUserUnitBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionUnitsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserUnitBatchDelete().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserUnitBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/unit/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionUnitsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of units
     */
    async versionUsersUserUnitBatchDelete(requestParameters: VersionUsersUserUnitBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionUnitsBatchPost200Response> {
        const response = await this.versionUsersUserUnitBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of units
     */
    async versionUsersUserUnitBatchPatchRaw(requestParameters: VersionUsersUserUnitBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionUnitsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserUnitBatchPatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserUnitBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/unit/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionUnitsBatchPatchRequestToJSON(requestParameters['versionUnitsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionUnitsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of units
     */
    async versionUsersUserUnitBatchPatch(requestParameters: VersionUsersUserUnitBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionUnitsBatchPost200Response> {
        const response = await this.versionUsersUserUnitBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete unit
     */
    async versionUsersUserUnitUnitDeleteRaw(requestParameters: VersionUsersUserUnitUnitDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionUnitsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserUnitUnitDelete().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserUnitUnitDelete().'
            );
        }

        if (requestParameters['unit'] == null) {
            throw new runtime.RequiredError(
                'unit',
                'Required parameter "unit" was null or undefined when calling versionUsersUserUnitUnitDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/unit/{unit}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"unit"}}`, encodeURIComponent(String(requestParameters['unit']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionUnitsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete unit
     */
    async versionUsersUserUnitUnitDelete(requestParameters: VersionUsersUserUnitUnitDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionUnitsPost201Response> {
        const response = await this.versionUsersUserUnitUnitDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get unit
     */
    async versionUsersUserUnitUnitGetRaw(requestParameters: VersionUsersUserUnitUnitGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionUnitsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserUnitUnitGet().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserUnitUnitGet().'
            );
        }

        if (requestParameters['unit'] == null) {
            throw new runtime.RequiredError(
                'unit',
                'Required parameter "unit" was null or undefined when calling versionUsersUserUnitUnitGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/unit/{unit}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"unit"}}`, encodeURIComponent(String(requestParameters['unit']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionUnitsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get unit
     */
    async versionUsersUserUnitUnitGet(requestParameters: VersionUsersUserUnitUnitGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionUnitsPost201Response> {
        const response = await this.versionUsersUserUnitUnitGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update unit
     */
    async versionUsersUserUnitUnitPatchRaw(requestParameters: VersionUsersUserUnitUnitPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionUnitsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionUsersUserUnitUnitPatch().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling versionUsersUserUnitUnitPatch().'
            );
        }

        if (requestParameters['unit'] == null) {
            throw new runtime.RequiredError(
                'unit',
                'Required parameter "unit" was null or undefined when calling versionUsersUserUnitUnitPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/users/{user}/unit/{unit}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))).replace(`{${"unit"}}`, encodeURIComponent(String(requestParameters['unit']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UnitToJSON(requestParameters['unit2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionUnitsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update unit
     */
    async versionUsersUserUnitUnitPatch(requestParameters: VersionUsersUserUnitUnitPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionUnitsPost201Response> {
        const response = await this.versionUsersUserUnitUnitPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionUsersUserUnitBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserUnitBatchDeleteVersionEnum = typeof VersionUsersUserUnitBatchDeleteVersionEnum[keyof typeof VersionUsersUserUnitBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersUserUnitBatchDeleteIncludeEnum = {
    Image: 'image'
} as const;
export type VersionUsersUserUnitBatchDeleteIncludeEnum = typeof VersionUsersUserUnitBatchDeleteIncludeEnum[keyof typeof VersionUsersUserUnitBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserUnitBatchPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserUnitBatchPatchVersionEnum = typeof VersionUsersUserUnitBatchPatchVersionEnum[keyof typeof VersionUsersUserUnitBatchPatchVersionEnum];
/**
 * @export
 */
export const VersionUsersUserUnitBatchPatchIncludeEnum = {
    Image: 'image'
} as const;
export type VersionUsersUserUnitBatchPatchIncludeEnum = typeof VersionUsersUserUnitBatchPatchIncludeEnum[keyof typeof VersionUsersUserUnitBatchPatchIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserUnitUnitDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserUnitUnitDeleteVersionEnum = typeof VersionUsersUserUnitUnitDeleteVersionEnum[keyof typeof VersionUsersUserUnitUnitDeleteVersionEnum];
/**
 * @export
 */
export const VersionUsersUserUnitUnitDeleteIncludeEnum = {
    Image: 'image'
} as const;
export type VersionUsersUserUnitUnitDeleteIncludeEnum = typeof VersionUsersUserUnitUnitDeleteIncludeEnum[keyof typeof VersionUsersUserUnitUnitDeleteIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserUnitUnitGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserUnitUnitGetVersionEnum = typeof VersionUsersUserUnitUnitGetVersionEnum[keyof typeof VersionUsersUserUnitUnitGetVersionEnum];
/**
 * @export
 */
export const VersionUsersUserUnitUnitGetIncludeEnum = {
    Image: 'image'
} as const;
export type VersionUsersUserUnitUnitGetIncludeEnum = typeof VersionUsersUserUnitUnitGetIncludeEnum[keyof typeof VersionUsersUserUnitUnitGetIncludeEnum];
/**
 * @export
 */
export const VersionUsersUserUnitUnitPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionUsersUserUnitUnitPatchVersionEnum = typeof VersionUsersUserUnitUnitPatchVersionEnum[keyof typeof VersionUsersUserUnitUnitPatchVersionEnum];
/**
 * @export
 */
export const VersionUsersUserUnitUnitPatchIncludeEnum = {
    Image: 'image'
} as const;
export type VersionUsersUserUnitUnitPatchIncludeEnum = typeof VersionUsersUserUnitUnitPatchIncludeEnum[keyof typeof VersionUsersUserUnitUnitPatchIncludeEnum];
