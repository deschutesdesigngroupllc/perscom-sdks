/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Comment,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionCommentsBatchPatchRequest,
  VersionCommentsBatchPost200Response,
  VersionCommentsBatchPostRequest,
  VersionCommentsGet200Response,
  VersionCommentsPost201Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
} from '../models/index';
import {
    CommentFromJSON,
    CommentToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionCommentsBatchPatchRequestFromJSON,
    VersionCommentsBatchPatchRequestToJSON,
    VersionCommentsBatchPost200ResponseFromJSON,
    VersionCommentsBatchPost200ResponseToJSON,
    VersionCommentsBatchPostRequestFromJSON,
    VersionCommentsBatchPostRequestToJSON,
    VersionCommentsGet200ResponseFromJSON,
    VersionCommentsGet200ResponseToJSON,
    VersionCommentsPost201ResponseFromJSON,
    VersionCommentsPost201ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
} from '../models/index';

export interface VersionCommentsBatchDeleteRequest {
    version: VersionCommentsBatchDeleteVersionEnum;
    include?: VersionCommentsBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionCommentsBatchPatchOperationRequest {
    version: VersionCommentsBatchPatchOperationVersionEnum;
    include?: VersionCommentsBatchPatchOperationIncludeEnum;
    versionCommentsBatchPatchRequest?: VersionCommentsBatchPatchRequest;
}

export interface VersionCommentsBatchPostOperationRequest {
    version: VersionCommentsBatchPostOperationVersionEnum;
    include?: VersionCommentsBatchPostOperationIncludeEnum;
    versionCommentsBatchPostRequest?: VersionCommentsBatchPostRequest;
}

export interface VersionCommentsCommentDeleteRequest {
    version: VersionCommentsCommentDeleteVersionEnum;
    comment: number;
    include?: VersionCommentsCommentDeleteIncludeEnum;
}

export interface VersionCommentsCommentGetRequest {
    version: VersionCommentsCommentGetVersionEnum;
    comment: number;
    include?: VersionCommentsCommentGetIncludeEnum;
}

export interface VersionCommentsCommentPatchRequest {
    version: VersionCommentsCommentPatchVersionEnum;
    comment: number;
    include?: VersionCommentsCommentPatchIncludeEnum;
    comment2?: Comment;
}

export interface VersionCommentsGetRequest {
    version: VersionCommentsGetVersionEnum;
    include?: VersionCommentsGetIncludeEnum;
}

export interface VersionCommentsPostRequest {
    version: VersionCommentsPostVersionEnum;
    include?: VersionCommentsPostIncludeEnum;
    comment?: Comment;
}

/**
 * 
 */
export class CommentsApi extends runtime.BaseAPI {

    /**
     * Delete a batch of comments
     */
    async versionCommentsBatchDeleteRaw(requestParameters: VersionCommentsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCommentsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCommentsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/comments/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCommentsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of comments
     */
    async versionCommentsBatchDelete(requestParameters: VersionCommentsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCommentsBatchPost200Response> {
        const response = await this.versionCommentsBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of comments
     */
    async versionCommentsBatchPatchRaw(requestParameters: VersionCommentsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCommentsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCommentsBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/comments/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCommentsBatchPatchRequestToJSON(requestParameters['versionCommentsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCommentsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of comments
     */
    async versionCommentsBatchPatch(requestParameters: VersionCommentsBatchPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCommentsBatchPost200Response> {
        const response = await this.versionCommentsBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of comments
     */
    async versionCommentsBatchPostRaw(requestParameters: VersionCommentsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCommentsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCommentsBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/comments/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCommentsBatchPostRequestToJSON(requestParameters['versionCommentsBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCommentsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of comments
     */
    async versionCommentsBatchPost(requestParameters: VersionCommentsBatchPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCommentsBatchPost200Response> {
        const response = await this.versionCommentsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete comment
     */
    async versionCommentsCommentDeleteRaw(requestParameters: VersionCommentsCommentDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCommentsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCommentsCommentDelete().'
            );
        }

        if (requestParameters['comment'] == null) {
            throw new runtime.RequiredError(
                'comment',
                'Required parameter "comment" was null or undefined when calling versionCommentsCommentDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/comments/{comment}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"comment"}}`, encodeURIComponent(String(requestParameters['comment']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCommentsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete comment
     */
    async versionCommentsCommentDelete(requestParameters: VersionCommentsCommentDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCommentsPost201Response> {
        const response = await this.versionCommentsCommentDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get comment
     */
    async versionCommentsCommentGetRaw(requestParameters: VersionCommentsCommentGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCommentsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCommentsCommentGet().'
            );
        }

        if (requestParameters['comment'] == null) {
            throw new runtime.RequiredError(
                'comment',
                'Required parameter "comment" was null or undefined when calling versionCommentsCommentGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/comments/{comment}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"comment"}}`, encodeURIComponent(String(requestParameters['comment']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCommentsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get comment
     */
    async versionCommentsCommentGet(requestParameters: VersionCommentsCommentGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCommentsPost201Response> {
        const response = await this.versionCommentsCommentGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update comment
     */
    async versionCommentsCommentPatchRaw(requestParameters: VersionCommentsCommentPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCommentsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCommentsCommentPatch().'
            );
        }

        if (requestParameters['comment'] == null) {
            throw new runtime.RequiredError(
                'comment',
                'Required parameter "comment" was null or undefined when calling versionCommentsCommentPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/comments/{comment}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"comment"}}`, encodeURIComponent(String(requestParameters['comment']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CommentToJSON(requestParameters['comment2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCommentsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update comment
     */
    async versionCommentsCommentPatch(requestParameters: VersionCommentsCommentPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCommentsPost201Response> {
        const response = await this.versionCommentsCommentPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of comments
     */
    async versionCommentsGetRaw(requestParameters: VersionCommentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCommentsGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCommentsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/comments`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCommentsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of comments
     */
    async versionCommentsGet(requestParameters: VersionCommentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCommentsGet200Response> {
        const response = await this.versionCommentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create comment
     */
    async versionCommentsPostRaw(requestParameters: VersionCommentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCommentsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionCommentsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/comments`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommentToJSON(requestParameters['comment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCommentsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create comment
     */
    async versionCommentsPost(requestParameters: VersionCommentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCommentsPost201Response> {
        const response = await this.versionCommentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionCommentsBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCommentsBatchDeleteVersionEnum = typeof VersionCommentsBatchDeleteVersionEnum[keyof typeof VersionCommentsBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionCommentsBatchDeleteIncludeEnum = {
    Author: 'author',
    Commentable: 'commentable'
} as const;
export type VersionCommentsBatchDeleteIncludeEnum = typeof VersionCommentsBatchDeleteIncludeEnum[keyof typeof VersionCommentsBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionCommentsBatchPatchOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCommentsBatchPatchOperationVersionEnum = typeof VersionCommentsBatchPatchOperationVersionEnum[keyof typeof VersionCommentsBatchPatchOperationVersionEnum];
/**
 * @export
 */
export const VersionCommentsBatchPatchOperationIncludeEnum = {
    Author: 'author',
    Commentable: 'commentable'
} as const;
export type VersionCommentsBatchPatchOperationIncludeEnum = typeof VersionCommentsBatchPatchOperationIncludeEnum[keyof typeof VersionCommentsBatchPatchOperationIncludeEnum];
/**
 * @export
 */
export const VersionCommentsBatchPostOperationVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCommentsBatchPostOperationVersionEnum = typeof VersionCommentsBatchPostOperationVersionEnum[keyof typeof VersionCommentsBatchPostOperationVersionEnum];
/**
 * @export
 */
export const VersionCommentsBatchPostOperationIncludeEnum = {
    Author: 'author',
    Commentable: 'commentable'
} as const;
export type VersionCommentsBatchPostOperationIncludeEnum = typeof VersionCommentsBatchPostOperationIncludeEnum[keyof typeof VersionCommentsBatchPostOperationIncludeEnum];
/**
 * @export
 */
export const VersionCommentsCommentDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCommentsCommentDeleteVersionEnum = typeof VersionCommentsCommentDeleteVersionEnum[keyof typeof VersionCommentsCommentDeleteVersionEnum];
/**
 * @export
 */
export const VersionCommentsCommentDeleteIncludeEnum = {
    Author: 'author',
    Commentable: 'commentable'
} as const;
export type VersionCommentsCommentDeleteIncludeEnum = typeof VersionCommentsCommentDeleteIncludeEnum[keyof typeof VersionCommentsCommentDeleteIncludeEnum];
/**
 * @export
 */
export const VersionCommentsCommentGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCommentsCommentGetVersionEnum = typeof VersionCommentsCommentGetVersionEnum[keyof typeof VersionCommentsCommentGetVersionEnum];
/**
 * @export
 */
export const VersionCommentsCommentGetIncludeEnum = {
    Author: 'author',
    Commentable: 'commentable'
} as const;
export type VersionCommentsCommentGetIncludeEnum = typeof VersionCommentsCommentGetIncludeEnum[keyof typeof VersionCommentsCommentGetIncludeEnum];
/**
 * @export
 */
export const VersionCommentsCommentPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCommentsCommentPatchVersionEnum = typeof VersionCommentsCommentPatchVersionEnum[keyof typeof VersionCommentsCommentPatchVersionEnum];
/**
 * @export
 */
export const VersionCommentsCommentPatchIncludeEnum = {
    Author: 'author',
    Commentable: 'commentable'
} as const;
export type VersionCommentsCommentPatchIncludeEnum = typeof VersionCommentsCommentPatchIncludeEnum[keyof typeof VersionCommentsCommentPatchIncludeEnum];
/**
 * @export
 */
export const VersionCommentsGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCommentsGetVersionEnum = typeof VersionCommentsGetVersionEnum[keyof typeof VersionCommentsGetVersionEnum];
/**
 * @export
 */
export const VersionCommentsGetIncludeEnum = {
    Author: 'author',
    Commentable: 'commentable'
} as const;
export type VersionCommentsGetIncludeEnum = typeof VersionCommentsGetIncludeEnum[keyof typeof VersionCommentsGetIncludeEnum];
/**
 * @export
 */
export const VersionCommentsPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionCommentsPostVersionEnum = typeof VersionCommentsPostVersionEnum[keyof typeof VersionCommentsPostVersionEnum];
/**
 * @export
 */
export const VersionCommentsPostIncludeEnum = {
    Author: 'author',
    Commentable: 'commentable'
} as const;
export type VersionCommentsPostIncludeEnum = typeof VersionCommentsPostIncludeEnum[keyof typeof VersionCommentsPostIncludeEnum];
