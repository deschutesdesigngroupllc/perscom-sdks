/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Rank,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionCategoriesCategoryRanksBatchPatchRequest,
  VersionCategoriesCategoryRanksBatchPost200Response,
  VersionCategoriesCategoryRanksBatchPostRequest,
  VersionCategoriesCategoryRanksGet200Response,
  VersionCategoriesCategoryRanksPost201Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
} from '../models/index';
import {
    RankFromJSON,
    RankToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionCategoriesCategoryRanksBatchPatchRequestFromJSON,
    VersionCategoriesCategoryRanksBatchPatchRequestToJSON,
    VersionCategoriesCategoryRanksBatchPost200ResponseFromJSON,
    VersionCategoriesCategoryRanksBatchPost200ResponseToJSON,
    VersionCategoriesCategoryRanksBatchPostRequestFromJSON,
    VersionCategoriesCategoryRanksBatchPostRequestToJSON,
    VersionCategoriesCategoryRanksGet200ResponseFromJSON,
    VersionCategoriesCategoryRanksGet200ResponseToJSON,
    VersionCategoriesCategoryRanksPost201ResponseFromJSON,
    VersionCategoriesCategoryRanksPost201ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
} from '../models/index';

export interface VersionRanksBatchDeleteRequest {
    version: VersionRanksBatchDeleteVersionEnum;
    include?: VersionRanksBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionRanksBatchPatchRequest {
    version: VersionRanksBatchPatchVersionEnum;
    include?: VersionRanksBatchPatchIncludeEnum;
    versionCategoriesCategoryRanksBatchPatchRequest?: VersionCategoriesCategoryRanksBatchPatchRequest;
}

export interface VersionRanksBatchPostRequest {
    version: VersionRanksBatchPostVersionEnum;
    include?: VersionRanksBatchPostIncludeEnum;
    versionCategoriesCategoryRanksBatchPostRequest?: VersionCategoriesCategoryRanksBatchPostRequest;
}

export interface VersionRanksGetRequest {
    version: VersionRanksGetVersionEnum;
    include?: VersionRanksGetIncludeEnum;
}

export interface VersionRanksPostRequest {
    version: VersionRanksPostVersionEnum;
    include?: VersionRanksPostIncludeEnum;
    rank?: Rank;
}

export interface VersionRanksRankDeleteRequest {
    version: VersionRanksRankDeleteVersionEnum;
    rank: number;
    include?: VersionRanksRankDeleteIncludeEnum;
}

export interface VersionRanksRankGetRequest {
    version: VersionRanksRankGetVersionEnum;
    rank: number;
    include?: VersionRanksRankGetIncludeEnum;
}

export interface VersionRanksRankPatchRequest {
    version: VersionRanksRankPatchVersionEnum;
    rank: number;
    include?: VersionRanksRankPatchIncludeEnum;
    rank2?: Rank;
}

/**
 * 
 */
export class RanksApi extends runtime.BaseAPI {

    /**
     * Delete a batch of ranks
     */
    async versionRanksBatchDeleteRaw(requestParameters: VersionRanksBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryRanksBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionRanksBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/ranks/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryRanksBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of ranks
     */
    async versionRanksBatchDelete(requestParameters: VersionRanksBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryRanksBatchPost200Response> {
        const response = await this.versionRanksBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of ranks
     */
    async versionRanksBatchPatchRaw(requestParameters: VersionRanksBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryRanksBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionRanksBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/ranks/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryRanksBatchPatchRequestToJSON(requestParameters['versionCategoriesCategoryRanksBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryRanksBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of ranks
     */
    async versionRanksBatchPatch(requestParameters: VersionRanksBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryRanksBatchPost200Response> {
        const response = await this.versionRanksBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of ranks
     */
    async versionRanksBatchPostRaw(requestParameters: VersionRanksBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryRanksBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionRanksBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/ranks/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryRanksBatchPostRequestToJSON(requestParameters['versionCategoriesCategoryRanksBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryRanksBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of ranks
     */
    async versionRanksBatchPost(requestParameters: VersionRanksBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryRanksBatchPost200Response> {
        const response = await this.versionRanksBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of ranks
     */
    async versionRanksGetRaw(requestParameters: VersionRanksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryRanksGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionRanksGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/ranks`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryRanksGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of ranks
     */
    async versionRanksGet(requestParameters: VersionRanksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryRanksGet200Response> {
        const response = await this.versionRanksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create rank
     */
    async versionRanksPostRaw(requestParameters: VersionRanksPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryRanksPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionRanksPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/ranks`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RankToJSON(requestParameters['rank']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryRanksPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create rank
     */
    async versionRanksPost(requestParameters: VersionRanksPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryRanksPost201Response> {
        const response = await this.versionRanksPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete rank
     */
    async versionRanksRankDeleteRaw(requestParameters: VersionRanksRankDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryRanksPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionRanksRankDelete().'
            );
        }

        if (requestParameters['rank'] == null) {
            throw new runtime.RequiredError(
                'rank',
                'Required parameter "rank" was null or undefined when calling versionRanksRankDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/ranks/{rank}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"rank"}}`, encodeURIComponent(String(requestParameters['rank']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryRanksPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete rank
     */
    async versionRanksRankDelete(requestParameters: VersionRanksRankDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryRanksPost201Response> {
        const response = await this.versionRanksRankDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get rank
     */
    async versionRanksRankGetRaw(requestParameters: VersionRanksRankGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryRanksPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionRanksRankGet().'
            );
        }

        if (requestParameters['rank'] == null) {
            throw new runtime.RequiredError(
                'rank',
                'Required parameter "rank" was null or undefined when calling versionRanksRankGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/ranks/{rank}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"rank"}}`, encodeURIComponent(String(requestParameters['rank']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryRanksPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get rank
     */
    async versionRanksRankGet(requestParameters: VersionRanksRankGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryRanksPost201Response> {
        const response = await this.versionRanksRankGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update rank
     */
    async versionRanksRankPatchRaw(requestParameters: VersionRanksRankPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryRanksPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionRanksRankPatch().'
            );
        }

        if (requestParameters['rank'] == null) {
            throw new runtime.RequiredError(
                'rank',
                'Required parameter "rank" was null or undefined when calling versionRanksRankPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/ranks/{rank}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"rank"}}`, encodeURIComponent(String(requestParameters['rank']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RankToJSON(requestParameters['rank2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryRanksPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update rank
     */
    async versionRanksRankPatch(requestParameters: VersionRanksRankPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryRanksPost201Response> {
        const response = await this.versionRanksRankPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionRanksBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionRanksBatchDeleteVersionEnum = typeof VersionRanksBatchDeleteVersionEnum[keyof typeof VersionRanksBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionRanksBatchDeleteIncludeEnum = {
    Image: 'image'
} as const;
export type VersionRanksBatchDeleteIncludeEnum = typeof VersionRanksBatchDeleteIncludeEnum[keyof typeof VersionRanksBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionRanksBatchPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionRanksBatchPatchVersionEnum = typeof VersionRanksBatchPatchVersionEnum[keyof typeof VersionRanksBatchPatchVersionEnum];
/**
 * @export
 */
export const VersionRanksBatchPatchIncludeEnum = {
    Image: 'image'
} as const;
export type VersionRanksBatchPatchIncludeEnum = typeof VersionRanksBatchPatchIncludeEnum[keyof typeof VersionRanksBatchPatchIncludeEnum];
/**
 * @export
 */
export const VersionRanksBatchPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionRanksBatchPostVersionEnum = typeof VersionRanksBatchPostVersionEnum[keyof typeof VersionRanksBatchPostVersionEnum];
/**
 * @export
 */
export const VersionRanksBatchPostIncludeEnum = {
    Image: 'image'
} as const;
export type VersionRanksBatchPostIncludeEnum = typeof VersionRanksBatchPostIncludeEnum[keyof typeof VersionRanksBatchPostIncludeEnum];
/**
 * @export
 */
export const VersionRanksGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionRanksGetVersionEnum = typeof VersionRanksGetVersionEnum[keyof typeof VersionRanksGetVersionEnum];
/**
 * @export
 */
export const VersionRanksGetIncludeEnum = {
    Image: 'image'
} as const;
export type VersionRanksGetIncludeEnum = typeof VersionRanksGetIncludeEnum[keyof typeof VersionRanksGetIncludeEnum];
/**
 * @export
 */
export const VersionRanksPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionRanksPostVersionEnum = typeof VersionRanksPostVersionEnum[keyof typeof VersionRanksPostVersionEnum];
/**
 * @export
 */
export const VersionRanksPostIncludeEnum = {
    Image: 'image'
} as const;
export type VersionRanksPostIncludeEnum = typeof VersionRanksPostIncludeEnum[keyof typeof VersionRanksPostIncludeEnum];
/**
 * @export
 */
export const VersionRanksRankDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionRanksRankDeleteVersionEnum = typeof VersionRanksRankDeleteVersionEnum[keyof typeof VersionRanksRankDeleteVersionEnum];
/**
 * @export
 */
export const VersionRanksRankDeleteIncludeEnum = {
    Image: 'image'
} as const;
export type VersionRanksRankDeleteIncludeEnum = typeof VersionRanksRankDeleteIncludeEnum[keyof typeof VersionRanksRankDeleteIncludeEnum];
/**
 * @export
 */
export const VersionRanksRankGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionRanksRankGetVersionEnum = typeof VersionRanksRankGetVersionEnum[keyof typeof VersionRanksRankGetVersionEnum];
/**
 * @export
 */
export const VersionRanksRankGetIncludeEnum = {
    Image: 'image'
} as const;
export type VersionRanksRankGetIncludeEnum = typeof VersionRanksRankGetIncludeEnum[keyof typeof VersionRanksRankGetIncludeEnum];
/**
 * @export
 */
export const VersionRanksRankPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionRanksRankPatchVersionEnum = typeof VersionRanksRankPatchVersionEnum[keyof typeof VersionRanksRankPatchVersionEnum];
/**
 * @export
 */
export const VersionRanksRankPatchIncludeEnum = {
    Image: 'image'
} as const;
export type VersionRanksRankPatchIncludeEnum = typeof VersionRanksRankPatchIncludeEnum[keyof typeof VersionRanksRankPatchIncludeEnum];
