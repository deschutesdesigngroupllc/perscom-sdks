/* tslint:disable */
/* eslint-disable */
/**
 * PERSCOM Personnel Management System API
 * The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.
 *
 * The version of the OpenAPI document: v2
 * Contact: support@deschutesdesigngroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Form,
  VersionAnnouncementsAnnouncementGet404Response,
  VersionAnnouncementsBatchDeleteRequest,
  VersionAnnouncementsPost422Response,
  VersionCategoriesCategoryFormsBatchPatchRequest,
  VersionCategoriesCategoryFormsBatchPost200Response,
  VersionCategoriesCategoryFormsBatchPostRequest,
  VersionCategoriesCategoryFormsGet200Response,
  VersionCategoriesCategoryFormsPost201Response,
  VersionMeGet401Response,
  VersionMeGet402Response,
  VersionMeGet403Response,
  VersionMeGet429Response,
  VersionMeGet503Response,
} from '../models/index';
import {
    FormFromJSON,
    FormToJSON,
    VersionAnnouncementsAnnouncementGet404ResponseFromJSON,
    VersionAnnouncementsAnnouncementGet404ResponseToJSON,
    VersionAnnouncementsBatchDeleteRequestFromJSON,
    VersionAnnouncementsBatchDeleteRequestToJSON,
    VersionAnnouncementsPost422ResponseFromJSON,
    VersionAnnouncementsPost422ResponseToJSON,
    VersionCategoriesCategoryFormsBatchPatchRequestFromJSON,
    VersionCategoriesCategoryFormsBatchPatchRequestToJSON,
    VersionCategoriesCategoryFormsBatchPost200ResponseFromJSON,
    VersionCategoriesCategoryFormsBatchPost200ResponseToJSON,
    VersionCategoriesCategoryFormsBatchPostRequestFromJSON,
    VersionCategoriesCategoryFormsBatchPostRequestToJSON,
    VersionCategoriesCategoryFormsGet200ResponseFromJSON,
    VersionCategoriesCategoryFormsGet200ResponseToJSON,
    VersionCategoriesCategoryFormsPost201ResponseFromJSON,
    VersionCategoriesCategoryFormsPost201ResponseToJSON,
    VersionMeGet401ResponseFromJSON,
    VersionMeGet401ResponseToJSON,
    VersionMeGet402ResponseFromJSON,
    VersionMeGet402ResponseToJSON,
    VersionMeGet403ResponseFromJSON,
    VersionMeGet403ResponseToJSON,
    VersionMeGet429ResponseFromJSON,
    VersionMeGet429ResponseToJSON,
    VersionMeGet503ResponseFromJSON,
    VersionMeGet503ResponseToJSON,
} from '../models/index';

export interface VersionFormsBatchDeleteRequest {
    version: VersionFormsBatchDeleteVersionEnum;
    include?: VersionFormsBatchDeleteIncludeEnum;
    versionAnnouncementsBatchDeleteRequest?: VersionAnnouncementsBatchDeleteRequest;
}

export interface VersionFormsBatchPatchRequest {
    version: VersionFormsBatchPatchVersionEnum;
    include?: VersionFormsBatchPatchIncludeEnum;
    versionCategoriesCategoryFormsBatchPatchRequest?: VersionCategoriesCategoryFormsBatchPatchRequest;
}

export interface VersionFormsBatchPostRequest {
    version: VersionFormsBatchPostVersionEnum;
    include?: VersionFormsBatchPostIncludeEnum;
    versionCategoriesCategoryFormsBatchPostRequest?: VersionCategoriesCategoryFormsBatchPostRequest;
}

export interface VersionFormsFormDeleteRequest {
    version: VersionFormsFormDeleteVersionEnum;
    form: number;
    include?: VersionFormsFormDeleteIncludeEnum;
}

export interface VersionFormsFormGetRequest {
    version: VersionFormsFormGetVersionEnum;
    form: number;
    include?: VersionFormsFormGetIncludeEnum;
}

export interface VersionFormsFormPatchRequest {
    version: VersionFormsFormPatchVersionEnum;
    form: number;
    include?: VersionFormsFormPatchIncludeEnum;
    form2?: Form;
}

export interface VersionFormsGetRequest {
    version: VersionFormsGetVersionEnum;
    include?: VersionFormsGetIncludeEnum;
}

export interface VersionFormsPostRequest {
    version: VersionFormsPostVersionEnum;
    include?: VersionFormsPostIncludeEnum;
    form?: Form;
}

/**
 * 
 */
export class FormsApi extends runtime.BaseAPI {

    /**
     * Delete a batch of forms
     */
    async versionFormsBatchDeleteRaw(requestParameters: VersionFormsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryFormsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionFormsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/forms/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: VersionAnnouncementsBatchDeleteRequestToJSON(requestParameters['versionAnnouncementsBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryFormsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of forms
     */
    async versionFormsBatchDelete(requestParameters: VersionFormsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryFormsBatchPost200Response> {
        const response = await this.versionFormsBatchDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of forms
     */
    async versionFormsBatchPatchRaw(requestParameters: VersionFormsBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryFormsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionFormsBatchPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/forms/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryFormsBatchPatchRequestToJSON(requestParameters['versionCategoriesCategoryFormsBatchPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryFormsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of forms
     */
    async versionFormsBatchPatch(requestParameters: VersionFormsBatchPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryFormsBatchPost200Response> {
        const response = await this.versionFormsBatchPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a batch of forms
     */
    async versionFormsBatchPostRaw(requestParameters: VersionFormsBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryFormsBatchPost200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionFormsBatchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/forms/batch`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VersionCategoriesCategoryFormsBatchPostRequestToJSON(requestParameters['versionCategoriesCategoryFormsBatchPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryFormsBatchPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a batch of forms
     */
    async versionFormsBatchPost(requestParameters: VersionFormsBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryFormsBatchPost200Response> {
        const response = await this.versionFormsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete form
     */
    async versionFormsFormDeleteRaw(requestParameters: VersionFormsFormDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryFormsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionFormsFormDelete().'
            );
        }

        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling versionFormsFormDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/forms/{form}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters['form']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryFormsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Delete form
     */
    async versionFormsFormDelete(requestParameters: VersionFormsFormDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryFormsPost201Response> {
        const response = await this.versionFormsFormDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get form
     */
    async versionFormsFormGetRaw(requestParameters: VersionFormsFormGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryFormsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionFormsFormGet().'
            );
        }

        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling versionFormsFormGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/forms/{form}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters['form']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryFormsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Get form
     */
    async versionFormsFormGet(requestParameters: VersionFormsFormGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryFormsPost201Response> {
        const response = await this.versionFormsFormGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update form
     */
    async versionFormsFormPatchRaw(requestParameters: VersionFormsFormPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryFormsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionFormsFormPatch().'
            );
        }

        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling versionFormsFormPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/forms/{form}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters['form']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: FormToJSON(requestParameters['form2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryFormsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Update form
     */
    async versionFormsFormPatch(requestParameters: VersionFormsFormPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryFormsPost201Response> {
        const response = await this.versionFormsFormPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of forms
     */
    async versionFormsGetRaw(requestParameters: VersionFormsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryFormsGet200Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionFormsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/forms`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryFormsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of forms
     */
    async versionFormsGet(requestParameters: VersionFormsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryFormsGet200Response> {
        const response = await this.versionFormsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create form
     */
    async versionFormsPostRaw(requestParameters: VersionFormsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionCategoriesCategoryFormsPost201Response>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling versionFormsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{version}/forms`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FormToJSON(requestParameters['form']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionCategoriesCategoryFormsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create form
     */
    async versionFormsPost(requestParameters: VersionFormsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionCategoriesCategoryFormsPost201Response> {
        const response = await this.versionFormsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VersionFormsBatchDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionFormsBatchDeleteVersionEnum = typeof VersionFormsBatchDeleteVersionEnum[keyof typeof VersionFormsBatchDeleteVersionEnum];
/**
 * @export
 */
export const VersionFormsBatchDeleteIncludeEnum = {
    Fields: 'fields',
    Submissions: 'submissions',
    Submissions2: 'submissions.*',
    Tags: 'tags'
} as const;
export type VersionFormsBatchDeleteIncludeEnum = typeof VersionFormsBatchDeleteIncludeEnum[keyof typeof VersionFormsBatchDeleteIncludeEnum];
/**
 * @export
 */
export const VersionFormsBatchPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionFormsBatchPatchVersionEnum = typeof VersionFormsBatchPatchVersionEnum[keyof typeof VersionFormsBatchPatchVersionEnum];
/**
 * @export
 */
export const VersionFormsBatchPatchIncludeEnum = {
    Fields: 'fields',
    Submissions: 'submissions',
    Submissions2: 'submissions.*',
    Tags: 'tags'
} as const;
export type VersionFormsBatchPatchIncludeEnum = typeof VersionFormsBatchPatchIncludeEnum[keyof typeof VersionFormsBatchPatchIncludeEnum];
/**
 * @export
 */
export const VersionFormsBatchPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionFormsBatchPostVersionEnum = typeof VersionFormsBatchPostVersionEnum[keyof typeof VersionFormsBatchPostVersionEnum];
/**
 * @export
 */
export const VersionFormsBatchPostIncludeEnum = {
    Fields: 'fields',
    Submissions: 'submissions',
    Submissions2: 'submissions.*',
    Tags: 'tags'
} as const;
export type VersionFormsBatchPostIncludeEnum = typeof VersionFormsBatchPostIncludeEnum[keyof typeof VersionFormsBatchPostIncludeEnum];
/**
 * @export
 */
export const VersionFormsFormDeleteVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionFormsFormDeleteVersionEnum = typeof VersionFormsFormDeleteVersionEnum[keyof typeof VersionFormsFormDeleteVersionEnum];
/**
 * @export
 */
export const VersionFormsFormDeleteIncludeEnum = {
    Fields: 'fields',
    Submissions: 'submissions',
    Submissions2: 'submissions.*',
    Tags: 'tags'
} as const;
export type VersionFormsFormDeleteIncludeEnum = typeof VersionFormsFormDeleteIncludeEnum[keyof typeof VersionFormsFormDeleteIncludeEnum];
/**
 * @export
 */
export const VersionFormsFormGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionFormsFormGetVersionEnum = typeof VersionFormsFormGetVersionEnum[keyof typeof VersionFormsFormGetVersionEnum];
/**
 * @export
 */
export const VersionFormsFormGetIncludeEnum = {
    Fields: 'fields',
    Submissions: 'submissions',
    Submissions2: 'submissions.*',
    Tags: 'tags'
} as const;
export type VersionFormsFormGetIncludeEnum = typeof VersionFormsFormGetIncludeEnum[keyof typeof VersionFormsFormGetIncludeEnum];
/**
 * @export
 */
export const VersionFormsFormPatchVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionFormsFormPatchVersionEnum = typeof VersionFormsFormPatchVersionEnum[keyof typeof VersionFormsFormPatchVersionEnum];
/**
 * @export
 */
export const VersionFormsFormPatchIncludeEnum = {
    Fields: 'fields',
    Submissions: 'submissions',
    Submissions2: 'submissions.*',
    Tags: 'tags'
} as const;
export type VersionFormsFormPatchIncludeEnum = typeof VersionFormsFormPatchIncludeEnum[keyof typeof VersionFormsFormPatchIncludeEnum];
/**
 * @export
 */
export const VersionFormsGetVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionFormsGetVersionEnum = typeof VersionFormsGetVersionEnum[keyof typeof VersionFormsGetVersionEnum];
/**
 * @export
 */
export const VersionFormsGetIncludeEnum = {
    Fields: 'fields',
    Submissions: 'submissions',
    Submissions2: 'submissions.*',
    Tags: 'tags'
} as const;
export type VersionFormsGetIncludeEnum = typeof VersionFormsGetIncludeEnum[keyof typeof VersionFormsGetIncludeEnum];
/**
 * @export
 */
export const VersionFormsPostVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type VersionFormsPostVersionEnum = typeof VersionFormsPostVersionEnum[keyof typeof VersionFormsPostVersionEnum];
/**
 * @export
 */
export const VersionFormsPostIncludeEnum = {
    Fields: 'fields',
    Submissions: 'submissions',
    Submissions2: 'submissions.*',
    Tags: 'tags'
} as const;
export type VersionFormsPostIncludeEnum = typeof VersionFormsPostIncludeEnum[keyof typeof VersionFormsPostIncludeEnum];
